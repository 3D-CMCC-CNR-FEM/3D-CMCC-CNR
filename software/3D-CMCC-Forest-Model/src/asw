Binary file 3D_CMCC_Forest_Model matches
allometry.c:	h = &c->heights[height];
allometry.c:	for ( height = 0; height < c->heights_count; ++height )
allometry.c:		h = &c->heights[height];
aut_respiration.c:	s  = &c->heights[height].dbhs[dbh].ages[age].species[species];
aut_respiration.c:		//2 use for each live respiring C-N pools a specific-pool CN ratio
aut_respiration.c:		c->daily_leaf_maint_resp   += s->value[TOT_LEAF_MAINT_RESP];
aut_respiration.c:		c->daily_stem_maint_resp   += s->value[STEM_MAINT_RESP];
aut_respiration.c:		c->daily_froot_maint_resp  += s->value[FROOT_MAINT_RESP];
aut_respiration.c:		c->daily_branch_maint_resp += s->value[BRANCH_MAINT_RESP];
aut_respiration.c:		c->daily_croot_maint_resp  += s->value[CROOT_MAINT_RESP];
aut_respiration.c:	c->daily_maint_resp                += s->value[TOTAL_MAINT_RESP];
aut_respiration.c:	c->monthly_maint_resp              += s->value[TOTAL_MAINT_RESP];
aut_respiration.c:	c->annual_maint_resp               += s->value[TOTAL_MAINT_RESP];
aut_respiration.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
aut_respiration.c:		c->daily_leaf_growth_resp   += s->value[LEAF_GROWTH_RESP];
aut_respiration.c:		c->daily_stem_growth_resp   += s->value[STEM_GROWTH_RESP];
aut_respiration.c:		c->daily_froot_growth_resp  += s->value[FROOT_GROWTH_RESP];
aut_respiration.c:		c->daily_branch_growth_resp += s->value[BRANCH_GROWTH_RESP];
aut_respiration.c:		c->daily_croot_growth_resp  += s->value[CROOT_GROWTH_RESP];
aut_respiration.c:	c->daily_growth_resp                += s->value[TOTAL_GROWTH_RESP];
aut_respiration.c:	c->monthly_growth_resp              += s->value[TOTAL_GROWTH_RESP];
aut_respiration.c:	c->annual_growth_resp               += s->value[TOTAL_GROWTH_RESP];
aut_respiration.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
aut_respiration.c:		c->daily_leaf_aut_resp            += (s->value[TOT_LEAF_MAINT_RESP]     + s->value[LEAF_GROWTH_RESP]);
aut_respiration.c:		c->daily_stem_aut_resp            += (s->value[STEM_MAINT_RESP]         + s->value[STEM_GROWTH_RESP]);
aut_respiration.c:		c->daily_branch_aut_resp          += (s->value[BRANCH_MAINT_RESP]       + s->value[BRANCH_GROWTH_RESP]);
aut_respiration.c:		c->daily_froot_aut_resp           += (s->value[FROOT_MAINT_RESP]        + s->value[FROOT_GROWTH_RESP]);
aut_respiration.c:		c->daily_croot_aut_resp           += (s->value[CROOT_MAINT_RESP]        + s->value[CROOT_GROWTH_RESP]);
aut_respiration.c:	c->daily_aut_resp                     += s->value[TOTAL_AUT_RESP];
aut_respiration.c:	c->monthly_aut_resp                   += s->value[TOTAL_AUT_RESP];
aut_respiration.c:	c->annual_aut_resp                    += s->value[TOTAL_AUT_RESP];
aut_respiration.c:	c->daily_aut_resp_tC                  += (s->value[TOTAL_AUT_RESP] / 1e6 * g_settings->sizeCell);
aut_respiration.c:	c->monthly_aut_resp_tC                += (s->value[TOTAL_AUT_RESP] / 1e6 * g_settings->sizeCell);
aut_respiration.c:	c->annual_aut_resp_tC                 += (s->value[TOTAL_AUT_RESP] / 1e6 * g_settings->sizeCell);
biomass.c:	if ( ! c->heights ) return;
biomass.c:	if ( ! c->heights[height].dbhs ) return;
biomass.c:	if ( ! c->heights[height].dbhs[dbh].ages ) return;
biomass.c:	if ( ! c->heights[height].dbhs[dbh].ages[age].species ) return;
biomass.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
biomass.c:	for ( height = 0; height < c->heights_count ; ++height )
biomass.c:		for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
biomass.c:			for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
biomass.c:				for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
biomass.c:					s = &c->heights[height].dbhs[dbh].ages[age].species[species];
biomass.c:	a = &c->heights[height].dbhs[dbh].ages[age];
biomass.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
biomass.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
biomass.c:		c->daily_cwd_to_litrC           += s->value[CWD_LITRC]  * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr2C          += s->value[CWD_LITR2C] * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr3C          += s->value[CWD_LITR3C] * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr4C          += s->value[CWD_LITR4C] * 1e6 / g_settings->sizeCell;
biomass.c:		CHECK_CONDITION ( c->daily_cwd_to_litr2C + c->daily_cwd_to_litr3C + c->daily_cwd_to_litr4C , == , c->daily_cwd_to_litrC + eps );
biomass.c:		c->cwd_C                        += s->value[CWD_LITRC]  * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_2C                       += s->value[CWD_LITR2C] * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_3C                       += s->value[CWD_LITR3C] * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_4C                       += s->value[CWD_LITR4C] * 1e6 / g_settings->sizeCell;
biomass.c:		CHECK_CONDITION ( c->cwd_2C + c->cwd_3C + c->cwd_4C , == , c->cwd_C + eps );
biomass.c:		c->daily_cwd_to_litrN           += s->value[CWD_LITRN]  * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr2N          += s->value[CWD_LITR2N] * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr3N          += s->value[CWD_LITR3N] * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr4N          += s->value[CWD_LITR4N] * 1e6 / g_settings->sizeCell;
biomass.c:		CHECK_CONDITION ( c->daily_cwd_to_litr2N + c->daily_cwd_to_litr3N + c->daily_cwd_to_litr4N , == , c->daily_cwd_to_litrN + eps );
biomass.c:		c->cwd_N                        += s->value[CWD_LITRN]  * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_2N                       += s->value[CWD_LITR2N] * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_3N                       += s->value[CWD_LITR3N] * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_4N                       += s->value[CWD_LITR4N] * 1e6 / g_settings->sizeCell;
biomass.c:		CHECK_CONDITION ( c->cwd_2N + c->cwd_3N + c->cwd_4N , == , c->cwd_N + eps );
Binary file biomass.o matches
canopy_cover.c:	d = &c->heights[height].dbhs[dbh];
canopy_cover.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
canopy_cover.c:	temp_crown_area     = ( s->value[MAX_LAYER_COVER] * g_settings->sizeCell ) / ( c->tree_layers[layer].layer_density * g_settings->sizeCell );
canopy_cover.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
canopy_evapotranspiration.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
canopy_evapotranspiration.c:	/* leaf aerodynamic-boundary-layer conductance */
canopy_evapotranspiration.c:		h = &c->heights[height];
canopy_evapotranspiration.c:			c->canopy_water_stored           += ( s->value[CANOPY_INT_RAIN] - s->value[CANOPY_EVAPO] );
canopy_evapotranspiration.c:			c->canopy_snow_stored                += ( s->value[CANOPY_INT_SNOW] - s->value[CANOPY_EVAPO] );
canopy_evapotranspiration.c:	if ( s->value[CANOPY_TRANSP] > c->asw )
canopy_evapotranspiration.c:		if ( s->value[CANOPY_TRANSP] > c->asw )
canopy_evapotranspiration.c:		CHECK_CONDITION ( s->value[CANOPY_TRANSP] , > , c->asw );
canopy_evapotranspiration.c:	c->daily_canopy_evapo                 += s->value[CANOPY_EVAPO];
canopy_evapotranspiration.c:	c->daily_canopy_transp                += s->value[CANOPY_TRANSP];
canopy_evapotranspiration.c:	c->daily_canopy_et                    += s->value[CANOPY_EVAPO_TRANSP];
Binary file canopy_evapotranspiration.o matches
canopy_interception.c:	l = &c->tree_layers[layer];
canopy_interception.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
canopy_interception.c:	if( ! l->canopy_int_layer_height_class_counter && ! c->canopy_int_cell_height_class_counter )
canopy_interception.c:		c->temp_int_rain = 0.;
canopy_interception.c:		c->temp_int_snow = 0.;
canopy_interception.c:		//c->rain = meteo_daily->rain;
canopy_interception.c:		//c->snow = meteo_daily->snow;
canopy_interception.c:	c->canopy_int_cell_height_class_counter++;
canopy_interception.c:	c->temp_int_rain += s->value[CANOPY_INT_RAIN];
canopy_interception.c:	c->temp_int_snow += s->value[CANOPY_INT_SNOW];
canopy_interception.c:		c->daily_canopy_rain_int += s->value[CANOPY_INT_RAIN];
canopy_interception.c:		meteo_daily->rain        -= c->temp_int_rain;
canopy_interception.c:		c->daily_canopy_snow_int += s->value[CANOPY_INT_SNOW];
canopy_interception.c:		meteo_daily->snow        -= c->temp_int_snow;
canopy_interception.c:		c->temp_int_rain = 0.;
canopy_interception.c:		c->temp_int_snow = 0.;
canopy_interception.c:	if ( c->heights_count == c->canopy_int_cell_height_class_counter )
canopy_interception.c:		c->canopy_int_cell_height_class_counter = 0;
canopy_net_radiation.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
canopy_radiation_lw_band.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
canopy_radiation_lw_band.c:	c->soil_long_wave_emitted = EMSOIL * SBC_W * pow(TsoilK, 4.);
canopy_radiation_lw_band.c:			(LW_emis_canopy_frac * c->soil_long_wave_emitted) -
canopy_radiation_lw_band.c:	c->net_lw_rad_for_soil = c->soil_long_wave_emitted - (EMSOIL * s->value[LW_RAD_TRANSM]) - (EMSOIL * meteo_daily->atm_lw_downward_W);
canopy_radiation_lw_band.c:	logger(g_debug_log, "net soil long wave fluxes (CLM 4.5) = %g (W/m2)\n", c->net_lw_rad_for_soil);
canopy_radiation_sw_band.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
canopy_radiation_sw_band.c:	l = &c->tree_layers[layer];
canopy_radiation_sw_band.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
canopy_radiation_sw_band.c:	if( ! l->layer_height_class_counter && ! c->cell_height_class_counter )
canopy_radiation_sw_band.c:		c->temp_apar         = 0.;
canopy_radiation_sw_band.c:		c->temp_par_refl     = 0.;
canopy_radiation_sw_band.c:		c->temp_sw_rad_abs   = 0.;
canopy_radiation_sw_band.c:		c->temp_sw_rad_refl  = 0.;
canopy_radiation_sw_band.c:		c->temp_net_rad_abs  = 0.;
canopy_radiation_sw_band.c:		c->temp_net_rad_refl = 0.;
canopy_radiation_sw_band.c:	++c->cell_height_class_counter;
canopy_radiation_sw_band.c:	c->temp_apar       += s->value[APAR];
canopy_radiation_sw_band.c:	c->apar            += s->value[APAR];
canopy_radiation_sw_band.c:	logger(g_debug_log,"cum apar = %f\n", c->apar);
canopy_radiation_sw_band.c:	c->temp_par_refl   += s->value[PAR_REFL];
canopy_radiation_sw_band.c:	c->par_refl        += s->value[PAR_REFL];
canopy_radiation_sw_band.c:	logger(g_debug_log,"cum par_refl = %f\n", c->par_refl);
canopy_radiation_sw_band.c:	c->temp_sw_rad_abs  += s->value[SW_RAD_ABS];
canopy_radiation_sw_band.c:	c->sw_rad_abs       += s->value[SW_RAD_ABS];
canopy_radiation_sw_band.c:	logger(g_debug_log,"cum sw_rad_abs = %f\n", c->sw_rad_abs);
canopy_radiation_sw_band.c:	c->temp_sw_rad_refl += s->value[SW_RAD_REFL];
canopy_radiation_sw_band.c:	c->sw_rad_refl      += s->value[SW_RAD_REFL];
canopy_radiation_sw_band.c:	logger(g_debug_log,"cum sw_rad_refl = %f\n", c->sw_rad_refl);
canopy_radiation_sw_band.c:	c->temp_net_rad_abs += s->value[NET_RAD_ABS];
canopy_radiation_sw_band.c:	c->net_rad_abs      += s->value[NET_RAD_ABS];
canopy_radiation_sw_band.c:	logger(g_debug_log,"cum net_rad_abs = %f\n", c->net_rad_abs);
canopy_radiation_sw_band.c:	c->temp_net_rad_refl += s->value[NET_RAD_REFL];
canopy_radiation_sw_band.c:	c->net_rad_refl      += s->value[NET_RAD_REFL];
canopy_radiation_sw_band.c:	logger(g_debug_log,"cum net_rad_refl = %f\n", c->net_rad_refl);
canopy_radiation_sw_band.c:		meteo_daily->par           -= (c->temp_apar + c->temp_par_refl);
canopy_radiation_sw_band.c:		meteo_daily->sw_downward_W -= (c->temp_sw_rad_abs + c->temp_sw_rad_refl);
canopy_radiation_sw_band.c:		meteo_daily->Net_rad_threePG -= (c->temp_net_rad_abs + c->temp_net_rad_refl);
canopy_radiation_sw_band.c:		c->temp_apar         = 0.;
canopy_radiation_sw_band.c:		c->temp_par_refl     = 0.;
canopy_radiation_sw_band.c:		c->temp_sw_rad_abs   = 0.;
canopy_radiation_sw_band.c:		c->temp_sw_rad_refl  = 0.;
canopy_radiation_sw_band.c:		c->temp_net_rad_abs  = 0.;
canopy_radiation_sw_band.c:		c->temp_net_rad_refl = 0.;
canopy_radiation_sw_band.c:	if ( c->heights_count == c->cell_height_class_counter )
canopy_temperature.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
canopy_temperature.c:	c->canopy_temp = s->value[CANOPY_TEMP_K] - TempAbs;
canopy_temperature.c:	logger(g_debug_log, "canopy_temp = %g (K)\n",c->canopy_temp);
canopy_temperature.c:	c->canopy_temp_k = s->value[CANOPY_TEMP_K];
canopy_temperature.c:	c->canopy_temp_diff = c->canopy_temp_k - TairK;
C-assimilation.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
C-assimilation.c:	c->daily_npp             += s->value[NPP];
C-assimilation.c:	c->monthly_npp           += s->value[NPP];
C-assimilation.c:	c->annual_npp            += s->value[NPP];
C-assimilation.c:	c->daily_npp_tC          += s->value[NPP_tC];
C-assimilation.c:	c->monthly_npp_tC        += s->value[NPP_tC];
C-assimilation.c:	c->annual_npp_tC         += s->value[NPP_tC];
C-deciduous-partitioning.c:	h = &c->heights[height];
C-deciduous-partitioning.c:	/* note: in Biome a constant proportion (50%) (Growth:storage parameter) of NPP that goes to the c-pools is allocated
cell_model_check_balance.c:	out = c->par_refl + c->par_refl_soil + c->par_refl_snow;
cell_model_check_balance.c:	store = c->apar + c->apar_soil + c->apar_snow ;
cell_model_check_balance.c:		error_log("DOY = %d\n", c->doy);
cell_model_check_balance.c:		error_log("c->par_refl      = %f molPAR/m2/day\n", c->par_refl);
cell_model_check_balance.c:		error_log("c->par_refl_soil = %f molPAR/m2/day\n", c->par_refl_soil);
cell_model_check_balance.c:		error_log("c->par_refl_snow = %f molPAR/m2/day\n", c->par_refl_snow);
cell_model_check_balance.c:		error_log("c->apar          = %f molPAR/m2/day\n", c->apar);
cell_model_check_balance.c:		error_log("c->par_for_soil  = %f molPAR/m2/day\n", c->apar_soil);
cell_model_check_balance.c:		error_log("c->par_for_snow  = %f molPAR/m2/day\n", c->apar_snow);
cell_model_check_balance.c:	out = c->sw_rad_refl + c->sw_rad_refl_soil + c->sw_rad_refl_snow;
cell_model_check_balance.c:	store = c->sw_rad_abs + c->sw_rad_abs_soil + c->sw_rad_abs_snow;
cell_model_check_balance.c:		error_log("DOY = %d\n", c->doy);
cell_model_check_balance.c:		error_log("c->sw_rad_refl          = %f W/m2\n", c->sw_rad_refl);
cell_model_check_balance.c:		error_log("c->sw_rad_for_soil_refl = %f W/m2\n", c->sw_rad_refl_soil);
cell_model_check_balance.c:		error_log("c->sw_rad_for_soil_refl = %f W/m2\n", c->sw_rad_refl_snow);
cell_model_check_balance.c:		error_log("c->sw_rad_abs           = %f W/m2\n", c->sw_rad_abs);
cell_model_check_balance.c:		error_log("c->sw_rad_for_soil  = %f W/m2\n",     c->sw_rad_abs_soil);
cell_model_check_balance.c:	in      = c->daily_gpp;
cell_model_check_balance.c:	out     = c->daily_aut_resp + c->daily_het_resp;
cell_model_check_balance.c:	store   = - c->daily_nee;
cell_model_check_balance.c:		error_log("DOY = %d\n", c->doy);
cell_model_check_balance.c:		error_log("daily_gpp             = %f gC/m2/day\n", c->daily_gpp);
cell_model_check_balance.c:		error_log("daily_tot_aut_resp    = %f gC/m2/day\n", c->daily_aut_resp);
cell_model_check_balance.c:		error_log("daily_tot_het_resp    = %f gC/m2/day\n", c->daily_het_resp);
cell_model_check_balance.c:		error_log("daily_nee             = %f gC/m2/day\n", c->daily_nee);
cell_model_check_balance.c://	in = c->daily_gpp;
cell_model_check_balance.c://	out = c->daily_maint_resp + c->daily_growth_resp  + c->daily_het_resp;
cell_model_check_balance.c://	store = c->daily_leaf_carbon   + c->daily_stem_carbon +
cell_model_check_balance.c://			c->daily_froot_carbon  + c->daily_croot_carbon +
cell_model_check_balance.c://			c->daily_branch_carbon + c->daily_reserve_carbon +
cell_model_check_balance.c://			c->daily_fruit_carbon  + c->daily_to_litrC +
cell_model_check_balance.c://			c->daily_to_soilC;
cell_model_check_balance.c://		error_log("DOY = %d\n", c->doy);
cell_model_check_balance.c://		error_log("c->daily_gpp                = %f gC/m2/day\n", c->daily_gpp);
cell_model_check_balance.c://		error_log("c->daily_tot_aut_resp       = %f gC/m2/day\n", c->daily_maint_resp + c->daily_growth_resp);
cell_model_check_balance.c://		error_log("c->daily_tot_het_resp       = %f gC/m2/day\n", c->daily_het_resp);
cell_model_check_balance.c://		error_log("c->daily_leaf_carbon        = %f gC/m2/day\n", c->daily_leaf_carbon);
cell_model_check_balance.c://		error_log("c->daily_stem_carbon        = %f gC/m2/day\n", c->daily_stem_carbon);
cell_model_check_balance.c://		error_log("c->daily_fine_root_carbon   = %f gC/m2/day\n", c->daily_froot_carbon);
cell_model_check_balance.c://		error_log("c->daily_coarse_root_carbon = %f gC/m2/day\n", c->daily_croot_carbon);
cell_model_check_balance.c://		error_log("c->daily_branch_carbon      = %f gC/m2/day\n", c->daily_branch_carbon);
cell_model_check_balance.c://		error_log("c->daily_reserve_carbon     = %f gC/m2/day\n", c->daily_reserve_carbon);
cell_model_check_balance.c://		error_log("c->daily_litrC              = %f gC/m2/day\n", c->daily_to_litrC);
cell_model_check_balance.c://		error_log("c->daily_soilC              = %f gC/m2/day\n", c->daily_to_soilC);
cell_model_check_balance.c:	c->cell_carbon_in    = c->daily_gpp;
cell_model_check_balance.c:	c->cell_carbon_out   = c->daily_aut_resp + c->daily_het_resp;
cell_model_check_balance.c:	c->cell_carbon_store = c->leaf_carbon +
cell_model_check_balance.c:			c->froot_carbon   +
cell_model_check_balance.c:			c->croot_carbon   +
cell_model_check_balance.c:			c->stem_carbon    +
cell_model_check_balance.c:			c->branch_carbon  +
cell_model_check_balance.c:			c->reserve_carbon +
cell_model_check_balance.c:			c->fruit_carbon   +
cell_model_check_balance.c:			c->litrC          +
cell_model_check_balance.c:			c->soilC          ;
cell_model_check_balance.c:	c->cell_carbon_balance = c->cell_carbon_in - c->cell_carbon_out - ( c->cell_carbon_store - c->cell_carbon_old_store );
cell_model_check_balance.c:	if ( ( fabs( c->cell_carbon_balance ) > 1e3 ) && ( c->dos > 1 ) )
cell_model_check_balance.c:		error_log("DOS = %d\n", c->dos);
cell_model_check_balance.c:		error_log("daily_gpp_carbon   = %f gC/m2/day\n",     c->daily_gpp);
cell_model_check_balance.c:		error_log("daily_aut_resp     = %f gC/m2/day\n", c->daily_aut_resp);
cell_model_check_balance.c:		error_log("daily_het_resp     = %f gC/m2/day\n", c->daily_het_resp);
cell_model_check_balance.c:		error_log("leaf_carbon        = %f gC/m2\n",     c->leaf_carbon   - c->old_leaf_carbon);
cell_model_check_balance.c:		error_log("froot_carbon       = %f gC/m2\n",     c->froot_carbon  - c->old_froot_carbon);
cell_model_check_balance.c:		error_log("croot_carbon       = %f gC/m2\n",     c->croot_carbon  - c->old_croot_carbon);
cell_model_check_balance.c:		error_log("stem_carbon        = %f gC/m2\n",     c->stem_carbon   - c->old_stem_carbon);
cell_model_check_balance.c:		error_log("branch_carbon      = %f gC/m2\n",     c->branch_carbon - c->old_reserve_carbon);
cell_model_check_balance.c:		error_log("fruit_carbon       = %f gC/m2\n",     c->fruit_carbon  - c->old_fruit_carbon);
cell_model_check_balance.c:		error_log("litr_carbon        = %f gC/m2\n",     c->litrC         - c->old_litrC);
cell_model_check_balance.c:		error_log("soil_carbon        = %f gC/m2\n",     c->soilC         - c->old_soilC);
cell_model_check_balance.c:		error_log("\ncarbon in        = %f gC/m2\n",     c->cell_carbon_in);
cell_model_check_balance.c:		error_log("carbon out         = %f gC/m2\n",     c->cell_carbon_out);
cell_model_check_balance.c:		error_log("delta carbon store = %f gC/m2\n",     c->cell_carbon_store - c->cell_carbon_old_store);
cell_model_check_balance.c:		error_log("carbon_balance     = %f gC/m2\n",     c->cell_carbon_balance);
cell_model_check_balance.c:		CHECK_CONDITION(fabs( c->cell_carbon_balance ), > , eps);
cell_model_check_balance.c:		c->old_leaf_carbon    = c->leaf_carbon;
cell_model_check_balance.c:		c->old_froot_carbon   = c->froot_carbon;
cell_model_check_balance.c:		c->old_croot_carbon   = c->croot_carbon;
cell_model_check_balance.c:		c->old_stem_carbon    = c->stem_carbon;
cell_model_check_balance.c:		c->old_branch_carbon  = c->branch_carbon;
cell_model_check_balance.c:		c->old_reserve_carbon = c->reserve_carbon;
cell_model_check_balance.c:		c->old_fruit_carbon   = c->fruit_carbon;
cell_model_check_balance.c:		c->old_litrC          = c->litrC;
cell_model_check_balance.c:		c->old_soilC          = c->soilC;
cell_model_check_balance.c:		c->cell_carbon_old_store = c->cell_carbon_store;
cell_model_check_balance.c:	in    = meteo_daily->Ndeposition + c->Nfix;
cell_model_check_balance.c:	out   = c->Nleach + c->Nvol;
cell_model_check_balance.c:	store = c->daily_to_litrN + c->daily_to_soilN;
cell_model_check_balance.c:		error_log("DOS = %d\n", c->dos);
cell_model_check_balance.c:		error_log("c->Nfix           = %f gN/m2\n",     c->Nfix);
cell_model_check_balance.c:		error_log("Nleach            = %f gN/m2/day\n", c->Nleach);
cell_model_check_balance.c:		error_log("Nvol              = %f gN/m2/day\n", c->Nvol);
cell_model_check_balance.c:		error_log("c->daily_to_litrN = %f gC/m2/day\n", c->daily_to_litrN);
cell_model_check_balance.c:		error_log("c->daily_to_soilN = %f gC/m2/day\n", c->daily_to_soilN);
cell_model_check_balance.c://	in = c->daily_gpp;
cell_model_check_balance.c://	out = c->daily_maint_resp + c->daily_growth_resp;
cell_model_check_balance.c://	store = c->daily_leaf_carbon   + c->daily_stem_carbon +
cell_model_check_balance.c://			c->daily_froot_carbon  + c->daily_croot_carbon +
cell_model_check_balance.c://			c->daily_branch_carbon + c->daily_reserve_carbon +
cell_model_check_balance.c://			c->daily_fruit_carbon  + c->daily_litrC +
cell_model_check_balance.c://			c->daily_soilC         + c->daily_cwdC;
cell_model_check_balance.c://		error_log("DOY = %d\n", c->doy);
cell_model_check_balance.c://		error_log("c->daily_gpp = %f gC/m2/day\n", c->daily_gpp);
cell_model_check_balance.c://		error_log("c->daily_tot_aut_resp = %f gC/m2/day\n",c->daily_maint_resp + c->daily_growth_resp);
cell_model_check_balance.c://		error_log("c->daily_leaf_carbon = %f gC/m2/day\n",        c->daily_leaf_carbon);
cell_model_check_balance.c://		error_log("c->daily_stem_carbon = %f gC/m2/day\n",        c->daily_stem_carbon);
cell_model_check_balance.c://		error_log("c->daily_fine_root_carbon = %f gC/m2/day\n",   c->daily_froot_carbon);
cell_model_check_balance.c://		error_log("c->daily_coarse_root_carbon = %f gC/m2/day\n", c->daily_croot_carbon);
cell_model_check_balance.c://		error_log("c->daily_branch_carbon = %f gC/m2/day\n",      c->daily_branch_carbon);
cell_model_check_balance.c://		error_log("c->daily_reserve_carbon = %f gC/m2/day\n",     c->daily_reserve_carbon);
cell_model_check_balance.c://		error_log("c->daily_litrC = %f gC/m2/day\n",              c->daily_litrC);
cell_model_check_balance.c://		error_log("c->daily_cwdC = %f gC/m2/day\n",               c->daily_cwdC);
cell_model_check_balance.c://		error_log("c->daily_soilC = %f gC/m2/day\n",              c->daily_soilC);
cell_model_check_balance.c:	c->cell_nitrogen_in    = meteo_daily->Ndeposition + c->Nfix;
cell_model_check_balance.c:	c->cell_nitrogen_out   = c->Nleach + c->Nvol;
cell_model_check_balance.c:	c->cell_nitrogen_store = c->leaf_nitrogen +
cell_model_check_balance.c:			c->froot_nitrogen   +
cell_model_check_balance.c:			c->croot_nitrogen   +
cell_model_check_balance.c:			c->stem_nitrogen    +
cell_model_check_balance.c:			c->branch_nitrogen  +
cell_model_check_balance.c:			c->reserve_nitrogen +
cell_model_check_balance.c:			c->fruit_nitrogen   +
cell_model_check_balance.c:			c->litrN            +
cell_model_check_balance.c:			c->soilN            ;
cell_model_check_balance.c:	c->cell_nitrogen_balance = c->cell_nitrogen_in - c->cell_nitrogen_out - ( c->cell_nitrogen_store - c->cell_nitrogen_old_store );
cell_model_check_balance.c:	if ( ( fabs( c->cell_nitrogen_balance ) > eps ) && ( c->dos > 1 ) )
cell_model_check_balance.c:		error_log("DOS = %d\n", c->dos);
cell_model_check_balance.c:		error_log("c->Nfix = %f gN/m2\n",                  c->Nfix);
cell_model_check_balance.c:		error_log("Nleach = %f gN/m2/day\n",               c->Nleach);
cell_model_check_balance.c:		error_log("Nvol = %f gN/m2/day\n",                 c->Nvol);
cell_model_check_balance.c:		error_log("leaf_nitrogen        = %f gN/m2\n",     c->leaf_nitrogen    - c->old_leaf_nitrogen);
cell_model_check_balance.c:		error_log("froot_nitrogen       = %f gN/m2\n",     c->froot_nitrogen   - c->old_froot_nitrogen);
cell_model_check_balance.c:		error_log("croot_nitrogen       = %f gN/m2\n",     c->croot_nitrogen   - c->old_croot_nitrogen);
cell_model_check_balance.c:		error_log("stem_nitrogen        = %f gN/m2\n",     c->stem_nitrogen    - c->old_stem_nitrogen);
cell_model_check_balance.c:		error_log("branch_nitrogen      = %f gN/m2\n",     c->branch_nitrogen  - c->old_reserve_nitrogen);
cell_model_check_balance.c:		error_log("fruit_nitrogen       = %f gN/m2\n",     c->fruit_nitrogen   - c->old_fruit_nitrogen);
cell_model_check_balance.c:		error_log("litr_nitrogen        = %f gN/m2\n",     c->litrN            - c->old_litrN);
cell_model_check_balance.c:		error_log("soil_nitrogen        = %f gN/m2\n",     c->soilN            - c->old_soilN);
cell_model_check_balance.c:		error_log("\nnitrogen in = %f gN/m2/day\n",        c->cell_nitrogen_in);
cell_model_check_balance.c:		error_log("nitrogen out = %f gN/m2/day\n",         c->cell_nitrogen_out);
cell_model_check_balance.c:		error_log("delta nitrogen store = %f gN/m2/day\n", c->cell_nitrogen_store - c->cell_nitrogen_old_store);
cell_model_check_balance.c:		error_log("nitrogen_balance = %f gN/m2/day\n",     c->cell_nitrogen_balance);
cell_model_check_balance.c:		CHECK_CONDITION(fabs( c->cell_nitrogen_balance ), > , eps);
cell_model_check_balance.c:		c->old_leaf_nitrogen    = c->leaf_nitrogen;
cell_model_check_balance.c:		c->old_froot_nitrogen   = c->froot_nitrogen;
cell_model_check_balance.c:		c->old_croot_nitrogen   = c->croot_nitrogen;
cell_model_check_balance.c:		c->old_branch_nitrogen  = c->branch_nitrogen;
cell_model_check_balance.c:		c->old_reserve_nitrogen = c->reserve_nitrogen;
cell_model_check_balance.c:		c->old_stem_nitrogen    = c->stem_nitrogen;
cell_model_check_balance.c:		c->old_fruit_nitrogen   = c->fruit_nitrogen;
cell_model_check_balance.c:		c->old_litrN            = c->litrC;
cell_model_check_balance.c:		c->old_soilN            = c->soilC;
cell_model_check_balance.c:		c->cell_nitrogen_old_store = c->cell_nitrogen_store;
cell_model_check_balance.c:	c->cell_water_in      = meteo_daily->prcp + c->daily_irrigation;
cell_model_check_balance.c:	c->cell_water_out     = c->daily_canopy_transp + c->daily_canopy_evapo + c->daily_soil_evapo + c->daily_snow_subl + c->daily_out_flow;
cell_model_check_balance.c:	c->cell_water_store   = ( c->asw + c->canopy_water_stored + c->canopy_snow_stored + c->snow_pack );
cell_model_check_balance.c:	c->cell_water_balance = c->cell_water_in - c->cell_water_out - ( c->cell_water_store - c->cell_water_old_store );
cell_model_check_balance.c:	if ( ( fabs( c->cell_water_balance ) > eps ) && ( c->dos > 1 ) )
cell_model_check_balance.c:		error_log("DOY = %d\n", c->dos);
cell_model_check_balance.c:		error_log("c->daily_canopy_transp = %f\n", c->daily_canopy_transp);
cell_model_check_balance.c:		error_log("c->daily_canopy_evapo  = %f\n", c->daily_canopy_evapo);
cell_model_check_balance.c:		error_log("c->soil_evaporation    = %f\n", c->daily_soil_evapo);
cell_model_check_balance.c:		error_log("c->daily_snow_subl     = %f\n", c->daily_snow_subl);
cell_model_check_balance.c:		error_log("c->out_flow            = %f\n", c->daily_out_flow);
cell_model_check_balance.c:		error_log("c->canopy_water_stored = %f\n", c->canopy_water_stored);
cell_model_check_balance.c:		error_log("c->canopy_snow_stored  = %f\n", c->canopy_snow_stored);
cell_model_check_balance.c:		error_log("c->asw                 = %f\n", c->asw);
cell_model_check_balance.c:		error_log("c->snow_pack           = %f\n", c->snow_pack);
cell_model_check_balance.c:		error_log("soil water in          = %f\n", c->cell_water_in);
cell_model_check_balance.c:		error_log("soil water out         = %f\n", c->cell_water_out  );
cell_model_check_balance.c:		error_log("soil water store       = %f\n", c->cell_water_store);
cell_model_check_balance.c:		error_log("delta soil water store = %f\n", c->cell_water_store - c->cell_water_old_store);
cell_model_check_balance.c:		error_log("soil water balance     = %f\n", c->cell_water_balance);
cell_model_check_balance.c:		CHECK_CONDITION(fabs( c->cell_water_balance ), > , eps);
cell_model_check_balance.c:		c->cell_water_old_store = c->cell_water_store;
cell_model_check_balance.c:	c->cell_snow_in      = meteo_daily->snow;
cell_model_check_balance.c:	c->cell_snow_out     = c->daily_snow_melt + c->daily_snow_subl;
cell_model_check_balance.c:	c->cell_snow_store   = c->snow_pack;
cell_model_check_balance.c:	c->cell_snow_balance = c->cell_snow_in - c->cell_snow_out - ( c->cell_snow_store - c->cell_snow_old_store);
cell_model_check_balance.c:	if ( ( fabs( c->cell_snow_balance ) > eps ) && ( c->dos > 1 ) )
cell_model_check_balance.c:		error_log("DOY = %d\n", c->doy);
cell_model_check_balance.c:		error_log("c->daily_snow_subl = %f\n", c->daily_snow_subl);
cell_model_check_balance.c:		error_log("c->daily_snow_melt = %f\n", c->daily_snow_melt);
cell_model_check_balance.c:		error_log("delta c->asw       = %f\n", c->snow_pack);
cell_model_check_balance.c:		error_log("soil water in      = %f\n", c->cell_snow_in);
cell_model_check_balance.c:		error_log("soil water out     = %f\n", c->cell_snow_out);
cell_model_check_balance.c:		error_log("soil water store   = %f\n", c->cell_snow_store);
cell_model_check_balance.c:		error_log("soil water balance = %f\n", c->cell_snow_balance);
cell_model_check_balance.c:		CHECK_CONDITION(fabs( c->cell_snow_balance ), > , eps);
cell_model_check_balance.c:		c->cell_snow_old_store = c->cell_snow_store;
Binary file cell_model_check_balance.o matches
C-evergreen-partitioning.c:	h = &c->heights[height];
CN-allocation.c:	c->daily_leaf_carbon        += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_froot_carbon       += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_stem_carbon        += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_croot_carbon       += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_branch_carbon      += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_reserve_carbon     += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_fruit_carbon       += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->leaf_carbon              += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->froot_carbon             += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->stem_carbon              += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->branch_carbon            += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->croot_carbon             += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->reserve_carbon           += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->fruit_carbon             += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	CHECK_CONDITION ( c->leaf_carbon,    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( c->froot_carbon,   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( c->stem_carbon,    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( c->branch_carbon,  < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( c->croot_carbon,   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( c->fruit_carbon,   < , ZERO );
CN-allocation.c:	c->daily_leaf_carbon        += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_froot_carbon       += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_stem_carbon        += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_croot_carbon       += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_branch_carbon      += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_reserve_carbon     += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_fruit_carbon       += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->leaf_carbon              += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->froot_carbon             += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->stem_carbon              += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->branch_carbon            += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->croot_carbon             += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->reserve_carbon           += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->fruit_carbon             += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	CHECK_CONDITION ( c->leaf_carbon,    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( c->froot_carbon,   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( c->stem_carbon,    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( c->branch_carbon,  < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( c->croot_carbon,   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( c->fruit_carbon,   < , ZERO );
CN-allocation.c:	if (s->value[NPP_gN_DEMAND] > c->soilN)
Binary file CN-allocation.o matches
CN-balance.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
CN-balance.c:	c->leaf_carbon              -= (s->value[C_LEAF_TO_LITR]  * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->froot_carbon             -= (s->value[C_FROOT_TO_LITR] * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->stem_carbon              -= (s->value[C_STEM_TO_CWD]   * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->branch_carbon            -= (s->value[C_CROOT_TO_CWD]  * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->croot_carbon             -= (s->value[C_BRANCH_TO_CWD] * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->reserve_carbon           -= (s->value[C_BRANCH_TO_CWD] * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->fruit_carbon             -= (s->value[C_FRUIT_TO_CWD]  * 1e6 / g_settings->sizeCell);
CN-balance.c:	CHECK_CONDITION ( c->leaf_carbon,    < , ZERO );
CN-balance.c:	CHECK_CONDITION ( c->froot_carbon,   < , ZERO );
CN-balance.c:	CHECK_CONDITION ( c->stem_carbon,    < , ZERO );
CN-balance.c:	CHECK_CONDITION ( c->branch_carbon,  < , ZERO );
CN-balance.c:	CHECK_CONDITION ( c->croot_carbon,   < , ZERO );
CN-balance.c:	CHECK_CONDITION ( c->fruit_carbon,   < , ZERO );
CN-balance.c:	CHECK_CONDITION ( c->litrC,          < , ZERO );
CN-balance.c:	CHECK_CONDITION ( c->cwd_C,          < , ZERO );
Binary file CN-balance.o matches
cue.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
cue.c:	if ( ( IS_LEAP_YEAR ( c->years[year].year ) ? ( MonthLength_Leap[month] ) : ( MonthLength[month] ) ) == c->doy )
cue.c:	if ( c->doy == ( IS_LEAP_YEAR( c->years[year].year ) ? 366 : 365) )
cue.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
cue.c:	if ( ( IS_LEAP_YEAR ( c->years[year].year ) ? ( MonthLength_Leap[month] ) : ( MonthLength[month] ) ) == c->doy )
cue.c:	if ( c->doy == ( IS_LEAP_YEAR( c->years[year].year ) ? 366 : 365) )
decomposition.c:	max_psi = c->psi_sat;
decomposition.c:	if (c->psi < min_psi)
decomposition.c:	else if ( c->psi > max_psi )
decomposition.c:		water_scalar = log ( min_psi / c->psi ) / log ( min_psi / max_psi );
decomposition.c:	water_scalar = 1. / ( 1. + 30. * exp ( -8.5 * ( c->asw / c->max_asw_fc ) ) );
decomposition.c:	if ( c->cwd_N  > 0. ) cn_cwd       = c->cwd_C  / c->cwd_N;
decomposition.c:	if ( c->cwd_2N > 0. ) cn_cwd2      = c->cwd_2C / c->cwd_2N;
decomposition.c:	if ( c->cwd_3N > 0. ) cn_cwd3      = c->cwd_3C / c->cwd_3N;
decomposition.c:	if ( c->cwd_4N > 0. ) cn_cwd4      = c->cwd_4C / c->cwd_4N;
decomposition.c:	if ( c->litr1N      > 0. ) cn_litr1     = c->litr1C      / c->litr1N;
decomposition.c:	if ( c->litr2N      > 0. ) cn_litr2     = c->litr2C      / c->litr2N;
decomposition.c:	if ( c->litr4N      > 0. ) cn_litr4     = c->litr4C      / c->litr4N;
decomposition.c:	CHECK_CONDITION ( ( c->cwd_2C + c->cwd_3C + c->cwd_4C ) - c->cwd_C, > , eps);
decomposition.c:	c->daily_cwd_to_litrC       = c->cwd_C  * deadwood_fragm_rate;
decomposition.c:	c->daily_cwd_to_litr2C      = c->cwd_2C * deadwood_fragm_rate;
decomposition.c:	c->daily_cwd_to_litr3C      = c->cwd_3C * deadwood_fragm_rate;
decomposition.c:	c->daily_cwd_to_litr4C      = c->cwd_4C * deadwood_fragm_rate;
decomposition.c:	CHECK_CONDITION ( c->daily_cwd_to_litr2C + c->daily_cwd_to_litr3C + c->daily_cwd_to_litr4C, > , c->daily_cwd_to_litrC + eps);
decomposition.c:	if ( cn_cwd  > 0. ) c->daily_cwd_to_litrN  = c->daily_cwd_to_litrC  / cn_cwd;
decomposition.c:	if ( cn_cwd2 > 0. ) c->daily_cwd_to_litr2N = c->daily_cwd_to_litr2C / cn_cwd2;
decomposition.c:	if ( cn_cwd3 > 0. ) c->daily_cwd_to_litr3N = c->daily_cwd_to_litr3C / cn_cwd3;
decomposition.c:	if ( cn_cwd4 > 0. ) c->daily_cwd_to_litr4N = c->daily_cwd_to_litr4C / cn_cwd4;
decomposition.c:	if ( c->litr1C > 0. )
decomposition.c:		pot_litr1C_loss      = c->litr1C * litt_decomp_rate1;
decomposition.c:	if ( c->litr2C > 0. )
decomposition.c:		pot_litr2C_loss      = c->litr2C * litt_decomp_rate2;
decomposition.c:	if ( c->litr4C > 0. )
decomposition.c:		pot_litr4C_loss      = c->litr4C * litt_decomp_rate4;
decomposition.c:	if ( c->litr1C > 0. )
decomposition.c:		c->daily_litr1_het_resp   = pot_litr1C_loss * RFL1S1;
decomposition.c:		c->daily_litr1C_to_soil1C = pot_litr1C_loss * ( 1. - RFL1S1 );
decomposition.c:		if ( c->litr1N > 0. ) c->daily_litr1N_to_soil1N = pot_litr1C_loss / cn_litr1;
decomposition.c:		else                  c->daily_litr1N_to_soil1N = 0.;
decomposition.c:	if ( c->litr2C > 0. )
decomposition.c:		c->daily_litr2_het_resp   = pot_litr2C_loss * RFL2S2;
decomposition.c:		c->daily_litr2C_to_soil2C = pot_litr2C_loss * ( 1. - RFL2S2 );
decomposition.c:		if ( c->litr2N > 0. ) c->daily_litr2N_to_soil2N = pot_litr2C_loss / cn_litr2;
decomposition.c:		else                  c->daily_litr2N_to_soil2N = 0.;
decomposition.c:	if ( c->litr3C > 0. )
decomposition.c:		c->daily_litr3C_to_litr2C = litt_decomp_rate4 * c->litr3C;
decomposition.c:	if ( c->litr4C > 0. )
decomposition.c:		c->daily_litr4_het_resp   = pot_litr4C_loss * RFL4S3;
decomposition.c:		c->daily_litr4C_to_soil3C = pot_litr4C_loss * ( 1. - RFL4S3 );
decomposition.c:		if ( c->litr4N > 0. ) c->daily_litr4N_to_soil3N = pot_litr4C_loss / cn_litr4;
decomposition.c:		else                  c->daily_litr4N_to_soil3N = 0.;
decomposition.c:	if ( c->soil1C > 0.)
decomposition.c:		pot_soil1C_loss = soil_decomp_rate1 * c->soil1C;
decomposition.c:	if ( c->soil2C > 0. )
decomposition.c:		pot_soil2C_loss = soil_decomp_rate2 * c->soil2C;
decomposition.c:	if ( c->soil3C > 0. )
decomposition.c:		pot_soil3C_loss = soil_decomp_rate3 * c->soil3C;
decomposition.c:	if ( c->soil4C > 0. )
decomposition.c:		pot_soil4C_loss = soil_decomp_rate4 * c->soil4C;
decomposition.c:	if ( c->soil1C > 0. )
decomposition.c:		c->daily_soil1_het_resp   = pot_soil1C_loss * RFS1S2;
decomposition.c:		c->daily_soil1C_to_soil2C = pot_soil1C_loss * ( 1. - RFS1S2 );
decomposition.c:		c->daily_soil1N_to_soil2N = pot_soil1C_loss / SOIL1_CN;
decomposition.c:	if ( c->soil2C > 0. )
decomposition.c:		c->daily_soil2_het_resp   = pot_soil2C_loss * RFS2S3;
decomposition.c:		c->daily_soil2C_to_soil3C = pot_soil2C_loss * ( 1. - RFS2S3 );
decomposition.c:		c->daily_soil2N_to_soil3N = pot_soil2C_loss / SOIL2_CN;
decomposition.c:	if ( c->soil3C > 0. )
decomposition.c:		c->daily_soil2_het_resp   = pot_soil2C_loss * RFS2S3;
decomposition.c:		c->daily_soil3C_to_soil4C = pot_soil2C_loss * ( 1. - RFS2S3 );
decomposition.c:		c->daily_soil3N_to_soil4N = pot_soil3C_loss / SOIL3_CN;
decomposition.c:	if ( c->soil4C > 0. )
decomposition.c:		c->daily_soil4_het_resp     = pot_soil4C_loss;
decomposition.c:		c->daily_soil4N_to_soilMinN = pot_soil4C_loss / SOIL4_CN;
Binary file decomposition.o matches
dendrometry.c:	h = &c->heights[height];
dendrometry.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
dendrometry.c:	h = &c->heights[height];
dendrometry.c:	d = &c->heights[height].dbhs[dbh];
dendrometry.c:	a = &c->heights[height].dbhs[dbh].ages[age];
dendrometry.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
dendrometry.c:	c->volume     += s->value[VOLUME];
dendrometry.c:	c->cum_volume += s->value[VOLUME];
dendrometry.c:	//	h = &c->heights[height];
dendrometry.c:	//	a = &c->heights[height].dbhs[dbh].ages[age];
dendrometry.c:	//	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
dendrometry.c:	//	if ( c->doy == ( IS_LEAP_YEAR( c->years[year].year ) ? 366 : 365) )
Binary file dendrometry.o matches
establishment.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
evapotranspiration.c:	c->daily_et = c->daily_canopy_et + c->daily_soil_evapo;
evapotranspiration.c:	logger(g_debug_log, "Daily EVAPOTRANSPIRATION = %f \n", c->daily_et);
evapotranspiration.c:	c->monthly_et += c->daily_et;
evapotranspiration.c:	logger(g_debug_log, "Monthly EVAPOTRANSPIRATION = %f \n", c->monthly_et);
evapotranspiration.c:	c->annual_et += c->daily_et;
evapotranspiration.c:	logger(g_debug_log, "Annual EVAPOTRANSPIRATION = %f \n", c->annual_et);
fluxes.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
fluxes.c:	logger(g_debug_log, "c-flux = %f gC/m2/day\n", s->value[C_FLUX]);
fluxes.c://	c->daily_tot_w_flux = c->water_to_soil + meteo_daily->snow - c->water_to_atmosphere - c->out_flow;
fluxes.c://	c->monthly_tot_w_flux += c->daily_tot_w_flux;
fluxes.c://	c->annual_tot_w_flux += c->daily_tot_w_flux;
fluxes.c://	logger(g_debug_log, "Daily_w_flux = %f \n", c->daily_tot_w_flux);
fluxes.c:	c->daily_r_eco    = c->daily_aut_resp + c->daily_het_resp;
fluxes.c:	logger(g_debug_log, "daily_r_eco = %f gC/m2/day\n", c->daily_r_eco);
fluxes.c:	c->monthly_r_eco += c->daily_r_eco;
fluxes.c:	logger(g_debug_log, "monthly_r_eco = %f gC/m2/month\n", c->monthly_r_eco);
fluxes.c:	c->annual_r_eco  += c->daily_r_eco;
fluxes.c:	logger(g_debug_log, "annual_r_eco = %f gC/m2/year\n", c->annual_r_eco);
fluxes.c:	c->daily_nep     = c->daily_npp - c->daily_het_resp;
fluxes.c:	logger(g_debug_log, "daily_nep = %f gC/m2/day\n", c->daily_nep);
fluxes.c:	c->monthly_nep  += c->daily_nep;
fluxes.c:	logger(g_debug_log, "monthly_nep = %f gC/m2/monthly\n", c->monthly_nep);
fluxes.c:	c->annual_nep   += c->daily_nep;
fluxes.c:	logger(g_debug_log, "annual_nep = %f gC/m2/annual\n", c->annual_nep);
fluxes.c:	c->daily_nee     = c->daily_gpp - c->daily_r_eco;
fluxes.c:	logger(g_debug_log, "daily_nee = %f gC/m2/day\n", c->daily_nee);
fluxes.c:	c->daily_nee *= -1.;
fluxes.c:	c->monthly_nee  += c->daily_nee;
fluxes.c:	logger(g_debug_log, "monthly_nee = %f gC/m2/monthly\n", c->monthly_nee);
fluxes.c:	c->annual_nee   += c->daily_nee;
fluxes.c:	logger(g_debug_log, "annual_nee = %f gC/m2/annual\n", c->annual_nee);
Binary file fluxes.o matches
g-function.c:	for ( height = 0; height < c->heights_count; ++height )
g-function.c:		h = &c->heights[height];
g-function.c:			d = &c->heights[height].dbhs[dbh];
g-function.c:				a = &c->heights[height].dbhs[dbh].ages[age];
g-function.c:					s = &c->heights[height].dbhs[dbh].ages[age].species[species];
g-function.c:	met = c->years[year].m;
g-function.c:	for (height = c->heights_count - 1; height >= 0; height-- )
g-function.c:		for ( dbh = c->heights[height].dbhs_count - 1; dbh >= 0; --dbh )
g-function.c:			for (age = c->heights[height].dbhs[dbh].ages_count - 1 ; age >= 0 ; age-- )
g-function.c:				for (species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; species++)
g-function.c:					s = &c->heights[height].dbhs[dbh].ages[age].species[species];
g-function.c:						if ( IS_LEAP_YEAR( c->years[year].year ) )
g-function.c:	c->abscission_daylength = (39132 + (pow (1.088, (g_soil_settings->values[SOIL_LAT] + 60.753))))/(60*60);
g-function.c:	//logger(g_debug_log, "Abscission day length = %f hrs\n", c->abscission_daylength);
heat_fluxes.c:	c->daily_canopy_evapo_watt  = c->daily_canopy_evapo  * meteo_daily->lh_vap / 86400.0;
heat_fluxes.c:	c->daily_canopy_transp_watt = c->daily_canopy_transp * meteo_daily->lh_vap / 86400.0;
heat_fluxes.c:	c->daily_canopy_et_watt     = c->daily_canopy_evapo_watt + c->daily_canopy_transp_watt;
heat_fluxes.c:	c->daily_canopy_lh_flux     = c->daily_canopy_et_watt;
heat_fluxes.c:	logger(g_debug_log, "Latent heat canopy evapotranspiration = %g W/m^2\n", c->daily_canopy_lh_flux);
heat_fluxes.c:	logger(g_debug_log, "Latent heat soil evaporation = %g W/m^2\n", c->daily_soil_evapo_watt);
heat_fluxes.c:	c->daily_lh_flux = c->daily_canopy_et_watt + c->daily_soil_evapo_watt;
heat_fluxes.c:	if(c->daily_snow_subl != 0.0)
heat_fluxes.c:		c->daily_lh_flux += c->daily_snow_subl * ( meteo_daily->lh_sub * 1000. ) / 86400.;
heat_fluxes.c:		logger(g_debug_log, "Daily total latent heat flux with sublimation = %g W/m\n", c->daily_lh_flux);
heat_fluxes.c:		logger(g_debug_log, "Daily total latent heat flux = %g W/m\n", c->daily_lh_flux);
heat_fluxes.c:	c->monthly_lh_flux += c->daily_lh_flux;
heat_fluxes.c:	c->annual_lh_flux  += c->daily_lh_flux;
heat_fluxes.c:	c->daily_sh_flux = c->daily_canopy_sh_flux + c->daily_soil_sh_flux;
heat_fluxes.c:	logger(g_debug_log, "Daily sensible heat flux = %g W/m\n", c->daily_sh_flux);
heat_fluxes.c:	c->monthly_sh_flux += c->daily_lh_flux;
heat_fluxes.c:	c->annual_sh_flux  += c->daily_lh_flux;
het_respiration.c:	c->daily_litr_het_resp = c->daily_litr1_het_resp + c->daily_litr2_het_resp + c->daily_litr4_het_resp;
het_respiration.c:	c->daily_litr_to_soilC = c->daily_litr1C_to_soil1C + c->daily_litr2C_to_soil2C + c->daily_litr4C_to_soil3C;
het_respiration.c:	c->daily_litr_to_soilN = c->daily_litr1N_to_soil1N + c->daily_litr2N_to_soil2N + c->daily_litr4N_to_soil3N;
het_respiration.c:	c->daily_het_resp        += c->daily_litr_het_resp;
het_respiration.c:	c->monthly_het_resp      += c->daily_litr_het_resp;
het_respiration.c:	c->annual_het_resp       += c->daily_litr_het_resp;
het_respiration.c:	c->daily_soil_het_resp = c->daily_soil1_het_resp + c->daily_soil2_het_resp + c->daily_soil3_het_resp + c->daily_soil4_het_resp;
het_respiration.c:	c->daily_het_resp        += c->daily_soil_het_resp;
het_respiration.c:	c->monthly_het_resp      += c->daily_soil_het_resp;
het_respiration.c:	c->annual_het_resp       += c->daily_soil_het_resp;
initialization.c:	h = &c->heights[height];
initialization.c:	d = &c->heights[height].dbhs[dbh];
initialization.c:	a = &c->heights[height].dbhs[dbh].ages[age];
initialization.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
initialization.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
initialization.c:	c->leaf_carbon              += (s->value[LEAF_C]             * 1e6 / g_settings->sizeCell);
initialization.c:	c->froot_carbon             += (s->value[FROOT_C]            * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_carbon              += (s->value[STEM_C]             * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_live_wood_carbon    += (s->value[STEM_LIVEWOOD_C]    * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_dead_wood_carbon    += (s->value[STEM_DEADWOOD_C]    * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_carbon             += (s->value[CROOT_C]            * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_live_wood_carbon   += (s->value[CROOT_LIVEWOOD_C]   * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_dead_wood_carbon   += (s->value[CROOT_DEADWOOD_C]   * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_carbon            += (s->value[BRANCH_C]           * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_live_wood_carbon  += (s->value[BRANCH_LIVEWOOD_C]  * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_dead_wood_carbon  += (s->value[BRANCH_DEADWOOD_C]  * 1e6 / g_settings->sizeCell);
initialization.c:	c->reserve_carbon           += (s->value[RESERVE_C]          * 1e6 / g_settings->sizeCell);
initialization.c:	c->fruit_carbon             += (s->value[FRUIT_C]            * 1e6 / g_settings->sizeCell);
initialization.c:	c->agb                      += ((s->value[LEAF_C] + s->value[STEM_C] + s->value[BRANCH_C] + s->value[FRUIT_C]) * 1e6 / g_settings->sizeCell);
initialization.c:	c->bgb                      += ((s->value[FROOT_C] + s->value[CROOT_C]) * 1e6 / g_settings->sizeCell);
initialization.c:	CHECK_CONDITION(c->leaf_carbon,                    <=, ZERO);
initialization.c:	CHECK_CONDITION(c->froot_carbon,                   <=, ZERO);
initialization.c:	CHECK_CONDITION(c->stem_carbon,                    <=, ZERO);
initialization.c:	CHECK_CONDITION(c->stem_live_wood_carbon,          <=, ZERO);
initialization.c:	CHECK_CONDITION(c->stem_dead_wood_carbon,          <=, ZERO);
initialization.c:	CHECK_CONDITION(c->croot_carbon,                   <=, ZERO);
initialization.c:	CHECK_CONDITION(c->croot_live_wood_carbon,         <=, ZERO);
initialization.c:	CHECK_CONDITION(c->croot_live_wood_carbon,         <=, ZERO);
initialization.c:	CHECK_CONDITION(c->branch_carbon,                  <=, ZERO);
initialization.c:	CHECK_CONDITION(c->branch_live_wood_carbon,        <=, ZERO);
initialization.c:	CHECK_CONDITION(c->branch_dead_wood_carbon,        <=, ZERO);
initialization.c:	CHECK_CONDITION(c->reserve_carbon,                 <=, ZERO);
initialization.c:	CHECK_CONDITION(c->fruit_carbon,                   <=, ZERO);
initialization.c:	CHECK_CONDITION(c->agb,                            <=, ZERO);
initialization.c:	CHECK_CONDITION(c->bgb,                            <=, ZERO);
initialization.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
initialization.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
initialization.c:	c->leaf_nitrogen              += (s->value[LEAF_N]            * 1e6 / g_settings->sizeCell);
initialization.c:	c->froot_nitrogen             += (s->value[FROOT_N]           * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_nitrogen              += (s->value[STEM_N]            * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_live_wood_nitrogen    += (s->value[STEM_LIVEWOOD_N]   * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_dead_wood_nitrogen    += (s->value[STEM_DEADWOOD_N]   * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_nitrogen             += (s->value[CROOT_N]           * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_live_wood_nitrogen   += (s->value[CROOT_LIVEWOOD_N]  * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_dead_wood_nitrogen   += (s->value[CROOT_DEADWOOD_N]  * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_nitrogen            += (s->value[BRANCH_N]          * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_live_wood_nitrogen  += (s->value[BRANCH_LIVEWOOD_N] * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_dead_wood_nitrogen  += (s->value[BRANCH_DEADWOOD_N] * 1e6 / g_settings->sizeCell);
initialization.c:	c->reserve_nitrogen           += (s->value[RESERVE_N]         * 1e6 / g_settings->sizeCell);
initialization.c:	c->fruit_nitrogen             += (s->value[FRUIT_N]           * 1e6 / g_settings->sizeCell);
initialization.c:	CHECK_CONDITION(c->leaf_nitrogen,             <=, ZERO);
initialization.c:	CHECK_CONDITION(c->froot_nitrogen,            <=, ZERO);
initialization.c:	CHECK_CONDITION(c->stem_nitrogen,             <=, ZERO);
initialization.c:	CHECK_CONDITION(c->stem_live_wood_nitrogen,   <=, ZERO);
initialization.c:	CHECK_CONDITION(c->stem_dead_wood_nitrogen,   <=, ZERO);
initialization.c:	CHECK_CONDITION(c->croot_nitrogen,            <=, ZERO);
initialization.c:	CHECK_CONDITION(c->croot_live_wood_nitrogen,  <=, ZERO);
initialization.c:	CHECK_CONDITION(c->croot_live_wood_nitrogen,  <=, ZERO);
initialization.c:	CHECK_CONDITION(c->branch_nitrogen,           <=, ZERO);
initialization.c:	CHECK_CONDITION(c->branch_live_wood_nitrogen, <=, ZERO);
initialization.c:	CHECK_CONDITION(c->branch_dead_wood_nitrogen, <=, ZERO);
initialization.c:	CHECK_CONDITION(c->reserve_nitrogen,          <=, ZERO);
initialization.c:	CHECK_CONDITION(c->fruit_nitrogen,            <=, ZERO);
initialization.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
initialization.c:	c->daily_cwd_to_litrC  += cwd_litrC    * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr2C += cwd_litr2C   * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr3C += cwd_litr3C   * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr4C += cwd_litr4C   * 1e6 / g_settings->sizeCell;
initialization.c:	CHECK_CONDITION ( fabs ( c->daily_cwd_to_litr2C + c->daily_cwd_to_litr3C + c->daily_cwd_to_litr4C ), >, c->daily_cwd_to_litrC+ eps);
initialization.c:	c->daily_leaf_to_litrC      += leaf_litrC        * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr1C     += leaf_litr1C       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr2C     += leaf_litr2C       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr3C     += leaf_litr3C       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr4C     += leaf_litr4C       * 1e6 / g_settings->sizeCell;
initialization.c:	CHECK_CONDITION ( fabs ( c->daily_leaf_to_litr1C + c->daily_leaf_to_litr2C + c->daily_leaf_to_litr3C + c->daily_leaf_to_litr4C ), >, c->daily_leaf_to_litrC+ eps);
initialization.c:	c->daily_froot_to_litrC     += froot_litrC       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr1C    += froot_litr1C      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr2C    += froot_litr2C      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr3C    += froot_litr3C      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr4C    += froot_litr4C      * 1e6 / g_settings->sizeCell;
initialization.c:	CHECK_CONDITION ( fabs ( c->daily_froot_to_litr1C + c->daily_froot_to_litr2C + c->daily_froot_to_litr3C + c->daily_froot_to_litr4C ), >, c->daily_froot_to_litrC+ eps);
initialization.c:	c->daily_cwd_to_litrN       += cwd_litrN    * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr2N      += cwd_litr2N   * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr3N      += cwd_litr3N   * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr4N      += cwd_litr4N   * 1e6 / g_settings->sizeCell;
initialization.c:	CHECK_CONDITION ( fabs ( c->daily_cwd_to_litr2C + c->daily_cwd_to_litr3C + c->daily_cwd_to_litr4C ), >, c->daily_cwd_to_litrC+ eps);
initialization.c:	c->daily_leaf_to_litrN      += leaf_litrN        * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr1N     += leaf_litr1N       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr2N     += leaf_litr2N       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr3N     += leaf_litr3N       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr4N     += leaf_litr4N       * 1e6 / g_settings->sizeCell;
initialization.c:	CHECK_CONDITION ( fabs ( c->daily_leaf_to_litr1C + c->daily_leaf_to_litr2C + c->daily_leaf_to_litr3C + c->daily_leaf_to_litr4C ), >, c->daily_leaf_to_litrC+ eps);
initialization.c:	c->daily_froot_to_litrN     += froot_litrN      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr1N    += froot_litr1N      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr2N    += froot_litr2N      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr3N    += froot_litr3N      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr4N    += froot_litr4N     * 1e6 / g_settings->sizeCell;
initialization.c:	CHECK_CONDITION ( fabs ( c->daily_froot_to_litr1N + c->daily_froot_to_litr2N + c->daily_froot_to_litr3N + c->daily_froot_to_litr4N ), >, c->daily_froot_to_litrN+ eps);
initialization.c:	c->cwd_C     = c->daily_cwd_to_litrC;
initialization.c:	c->cwd_2C    = c->daily_cwd_to_litr2C;
initialization.c:	c->cwd_3C    = c->daily_cwd_to_litr3C;
initialization.c:	c->cwd_4C    = c->daily_cwd_to_litr4C;
initialization.c:	CHECK_CONDITION ( fabs ( c->cwd_2C + c->cwd_3C + c->cwd_4C ) , > , c->cwd_C + eps );
initialization.c:	c->leaf_litrC     = c->daily_leaf_to_litrC;
initialization.c:	c->leaf_litr1C    = c->daily_leaf_to_litr1C;
initialization.c:	c->leaf_litr2C    = c->daily_leaf_to_litr2C;
initialization.c:	c->leaf_litr3C    = c->daily_leaf_to_litr3C;
initialization.c:	c->leaf_litr4C    = c->daily_leaf_to_litr4C;
initialization.c:	CHECK_CONDITION ( fabs ( c->leaf_litr1C + c->leaf_litr2C + c->leaf_litr3C + c->leaf_litr4C ) , > , c->leaf_litrC + eps );
initialization.c:	c->froot_litrC    = c->daily_froot_to_litrC;
initialization.c:	c->froot_litr1C   = c->daily_froot_to_litr1C;
initialization.c:	c->froot_litr2C   = c->daily_froot_to_litr2C;
initialization.c:	c->froot_litr3C   = c->daily_froot_to_litr3C;
initialization.c:	c->froot_litr4C   = c->daily_froot_to_litr4C;
initialization.c:	CHECK_CONDITION ( fabs ( c->froot_litr1C + c->froot_litr2C + c->froot_litr3C + c->froot_litr4C ) , > , c->froot_litrC + eps );
initialization.c:	c->litrC          = c->leaf_litrC + c->froot_litrC + c->cwd_C;
initialization.c:	c->litr1C         = c->leaf_litr1C + c->froot_litr1C;
initialization.c:	c->litr2C         = c->leaf_litr2C + c->froot_litr2C + c->cwd_2C;
initialization.c:	c->litr3C         = c->leaf_litr3C + c->froot_litr3C + c->cwd_3C;
initialization.c:	c->litr4C         = c->leaf_litr4C + c->froot_litr4C + c->cwd_4C;
initialization.c:	c->cwd_N     = c->daily_cwd_to_litrN;
initialization.c:	c->cwd_2N    = c->daily_cwd_to_litr2N;;
initialization.c:	c->cwd_3N    = c->daily_cwd_to_litr3N;;
initialization.c:	c->cwd_4N    = c->daily_cwd_to_litr4N;;
initialization.c:	CHECK_CONDITION ( fabs ( c->cwd_2N + c->cwd_3N + c->cwd_4N ) , > , c->cwd_N + eps );
initialization.c:	c->leaf_litrN     = c->daily_leaf_to_litrN;
initialization.c:	c->leaf_litr1N    = c->daily_leaf_to_litr1N;
initialization.c:	c->leaf_litr2N    = c->daily_leaf_to_litr2N;
initialization.c:	c->leaf_litr3N    = c->daily_leaf_to_litr3N;
initialization.c:	c->leaf_litr4N    = c->daily_leaf_to_litr4N;
initialization.c:	CHECK_CONDITION ( fabs ( c->leaf_litr1N + c->leaf_litr2N + c->leaf_litr3N + c->leaf_litr4N ) , > , c->leaf_litrN + eps );
initialization.c:	c->froot_litrN    = c->daily_froot_to_litrN;
initialization.c:	c->froot_litr1N   = c->daily_froot_to_litr1N;
initialization.c:	c->froot_litr2N   = c->daily_froot_to_litr2N;
initialization.c:	c->froot_litr3N   = c->daily_froot_to_litr3N;
initialization.c:	c->froot_litr4N   = c->daily_froot_to_litr4N;
initialization.c:	CHECK_CONDITION ( fabs ( c->froot_litr1N + c->froot_litr2N + c->froot_litr3N + c->froot_litr4N ) , > , c->froot_litrN + eps );
initialization.c:	c->litrN          = c->leaf_litrN + c->froot_litrN + c->cwd_N;
initialization.c:	c->litr1N         = c->leaf_litr1N + c->froot_litr1N;
initialization.c:	c->litr2N         = c->leaf_litr2N + c->froot_litr2N + c->cwd_2N;
initialization.c:	c->litr3N         = c->leaf_litr3N + c->froot_litr3N + c->cwd_3N;
initialization.c:	c->litr4N         = c->leaf_litr4N + c->froot_litr4N + c->cwd_4N;
initialization.c:		c->soilC      = 0.001;
initialization.c:		c->soilC      = g_soil_settings->values[SOILC];
initialization.c:	c->soil1C         = 0.001;
initialization.c:	c->soil2C         = 0.001;
initialization.c:	c->soil3C         = 0.001;
initialization.c:	c->soil4C         = 0.001;
initialization.c:		c->soilN      = 0.001;
initialization.c:		c->soilN      = g_soil_settings->values[SOILN];
initialization.c:	c->soil1N         = 0.001;
initialization.c:	c->soil2N         = 0.001;
initialization.c:	c->soil3N         = 0.001;
initialization.c:	c->soil4N         = 0.001;
initialization.c:	c->soil_b = -( 3.10 + 0.157 * g_soil_settings->values[SOIL_CLAY_PERC] - 0.003 * g_soil_settings->values[SOIL_SAND_PERC] ); /* ok for schwalm*/
initialization.c:	logger(g_debug_log, "soil_b = %f (DIM)\n", c->soil_b);
initialization.c:	// c->soil_b = 11.43 - (0.1034*g_soil_settings->values[SOIL_SAND_PERC) - (0.0687*0.157*g_soil_settings->values[SOIL_silt_perc);
initialization.c:	c->vwc_sat = ( 50.5 - 0.142 * g_soil_settings->values[SOIL_SAND_PERC] - 0.037 * g_soil_settings->values[SOIL_CLAY_PERC] ) / 100.; /* ok for schwalm*/
initialization.c:	logger(g_debug_log, "volumetric water content at saturation (BIOME) = %f %%(vol)\n", c->vwc_sat);
initialization.c:	c->psi_sat = -( exp ( ( 1.54 - 0.0095 * g_soil_settings->values[SOIL_SAND_PERC] + 0.0063 * g_soil_settings->values[SOIL_SILT_PERC] ) * log ( 10.) ) * 9.8e-5 ); /* ok for schwalm*/
initialization.c:	logger(g_debug_log, "psi_sat = %f MPa \n", c->psi_sat);
initialization.c:	c->vwc_fc = c->vwc_sat * pow ( ( -0.015 / c->psi_sat ) , ( 1. / c->soil_b ) );
initialization.c:	logger(g_debug_log, "volumetric water content at field capacity (BIOME) = %f %%(vol) \n", c->vwc_fc);
initialization.c:	c->soilw_fc = ( g_soil_settings->values[SOIL_DEPTH] / 100. ) * c->vwc_fc * 1e3;
initialization.c:	logger(g_debug_log, "soilw_fc BIOME (MAXASW FC BIOME)= %f (kgH2O/m2)\n", c->soilw_fc);
initialization.c:	c->soilw_sat = ( g_soil_settings->values[SOIL_DEPTH] / 100. ) * c->vwc_sat * 1e3;
initialization.c:	logger(g_debug_log, "soilw_sat BIOME (MAXASW SAT BIOME)= %f (kgH2O/m2)\n", c->soilw_sat);
initialization.c:	c->max_asw_fc = c->soilw_fc;
initialization.c:	c->asw = (c->soilw_sat * g_settings->init_frac_maxasw);
initialization.c:	logger(g_debug_log, "Initialization ASW = %f (mm-kgH2O/m2)\n\n\n", c->asw);
initialization.c:	c->bulk_density = (1 - sat) * 2.65;
initialization.c:	c->wilting_point = ( g_soil_settings->values[SOIL_DEPTH] / 100. ) * volumetric_wilting_point * 1e3;
initialization.c:	logger(g_debug_log, "Wilting point (CENTURY) = %f mm/m2\n", c->wilting_point);
initialization.c:	c->field_capacity = ( g_soil_settings->values[SOIL_DEPTH] / 100. ) * volumetric_field_capacity * 1e3;
initialization.c:	logger(g_debug_log, "Field capacity (CENTURY) = %f mm/m2\n", c->field_capacity);
initialization.c:	c->sat_hydr_conduct = (g_soil_settings->values[SOIL_DEPTH] / 100.) * volumetric_saturated_hydraulic_conductivity * 1e3;
initialization.c:	logger(g_debug_log, "Saturated hydraulic conductivity (CENTURY) = %f mm/m2\n", c->sat_hydr_conduct);
initialization.c:	c->bulk_density += (-0.08 * c->bulk_density);
initialization.c:	logger(g_debug_log, "Bulk density = %f g/cm^3\n", c->bulk_density);
Binary file initialization.o matches
lai.c:	c->max_lai_proj = s->value[MAX_LAI_PROJ];
leaf_fall.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
leaf_fall.c:		s->counter[SENESCENCE_DAY_ONE] = c->doy;
leaf_fall.c:		currentLai  = MAX(0,s->value[MAX_LAI_LEAFFALL_PROJ] / (1 + exp(-(s->counter[DAYS_LEAFFALL] / 2. + s->counter[SENESCENCE_DAY_ONE] - c->doy)
leaf_fall.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
leaf_fall.c:	if ( IS_LEAP_YEAR ( c->years[year].year ) ) days_for_leaffall = 366;
leaf_fall.c:	if ( c->doy == 1 )
Binary file leaf_fall.o matches
litter_carbon_balance.c:	c->cwd_2C             -= c->daily_cwd_to_litr2C;
litter_carbon_balance.c:	c->cwd_3C             -= c->daily_cwd_to_litr3C;
litter_carbon_balance.c:	c->cwd_4C             -= c->daily_cwd_to_litr4C;
litter_carbon_balance.c:	c->daily_to_litr1C          = ( c->daily_leaf_to_litr1C + c->daily_froot_to_litr1C )
litter_carbon_balance.c:					- ( c-> daily_litr1_het_resp + c->daily_litr1C_to_soil1C );
litter_carbon_balance.c:	c->litr1C                  += c->daily_to_litr1C;
litter_carbon_balance.c:	c->daily_to_litr2C          = ( c->daily_leaf_to_litr2C + c->daily_litr3C_to_litr2C + c->daily_cwd_to_litr2C + c->daily_froot_to_litr2C )
litter_carbon_balance.c:					- ( c-> daily_litr2_het_resp + c->daily_litr2C_to_soil2C );
litter_carbon_balance.c:	c->litr2C                  += c->daily_to_litr2C;
litter_carbon_balance.c:	c->daily_to_litr3C          = ( c->daily_leaf_to_litr3C + c->daily_froot_to_litr3C + c->daily_cwd_to_litr3C )
litter_carbon_balance.c:					- c->daily_litr3C_to_litr2C;
litter_carbon_balance.c:	c->litr3C                  += c->daily_to_litr3C;
litter_carbon_balance.c:	c->daily_to_litr4C          = ( c->daily_leaf_to_litr4C + c->daily_froot_to_litr4C + c->daily_cwd_to_litr4C )
litter_carbon_balance.c:					- ( c-> daily_litr4_het_resp + c->daily_litr4C_to_soil3C );
litter_carbon_balance.c:	c->litr4C                  += c->daily_to_litr4C;
litter_carbon_balance.c:	c->daily_leaf_to_litrC      = c->daily_leaf_to_litr1C  + c->daily_leaf_to_litr2C     + c->daily_leaf_to_litr3C     + c->daily_leaf_to_litr4C;
litter_carbon_balance.c:	c->daily_froot_to_litrC     = c->daily_froot_to_litr1C + c->daily_froot_to_litr2C    + c->daily_froot_to_litr3C    + c->daily_froot_to_litr4C;
litter_carbon_balance.c:	c->daily_cwd_to_litrC       =                            c->daily_cwd_to_litr2C      + c->daily_cwd_to_litr3C      + c->daily_cwd_to_litr4C;
litter_carbon_balance.c:	c->daily_to_litrC           = c->daily_to_litr1C       + c->daily_to_litr2C          + c->daily_to_litr3C          + c->daily_to_litr4C;
litter_carbon_balance.c:	c->cwd_C                    =             c->cwd_2C      + c->cwd_3C      + c->cwd_4C;
litter_carbon_balance.c:	c->litrC                    = c->litr1C + c->litr2C      + c->litr3C      + c->litr4C;
litter_carbon_balance.c:	c->daily_to_soilC           = c->daily_litr1C_to_soil1C + c->daily_litr2C_to_soil2C + c->daily_litr4C_to_soil3C;
litter_carbon_balance.c:	c->daily_to_soil1C          = c->daily_litr1C_to_soil1C;
litter_carbon_balance.c:	c->daily_to_soil2C          = c->daily_litr2C_to_soil2C;
litter_carbon_balance.c:	c->daily_to_soil3C          = c->daily_litr4C_to_soil3C;
litter_carbon_balance.c:	c->daily_to_soil4C          = 0.;
littering.c:	c->daily_cwd_to_litrC         += s->value[CWD_TO_LITRC]   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr2C        += s->value[CWD_TO_LITR2C]  * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr3C        += s->value[CWD_TO_LITR3C]  * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr4C        += s->value[CWD_TO_LITR4C]  * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_cwd_to_litr2C + c->daily_cwd_to_litr3C + c->daily_cwd_to_litr4C , == , c->daily_cwd_to_litrC + eps );
littering.c:	c->cwd_C                      += s->value[CWD_TO_LITRC]   * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_2C                     += s->value[CWD_TO_LITR2C]  * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_3C                     += s->value[CWD_TO_LITR3C]  * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_4C                     += s->value[CWD_TO_LITR4C]  * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->cwd_2C + c->cwd_3C + c->cwd_4C , == , c->cwd_C + eps );
littering.c:	c->daily_leaf_to_litrC             += s->value[LEAF_TO_LITRC]       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr1C            += s->value[LEAF_TO_LITR1C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr2C            += s->value[LEAF_TO_LITR2C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr3C            += s->value[LEAF_TO_LITR3C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr4C            += s->value[LEAF_TO_LITR4C]      * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_leaf_to_litr1C + c->daily_leaf_to_litr2C + c->daily_leaf_to_litr3C + c->daily_leaf_to_litr4C , == , c->daily_leaf_to_litrC + eps );
littering.c:	c->leaf_litrC                      += s->value[LEAF_TO_LITRC]       * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr1C                     += s->value[LEAF_TO_LITR1C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr2C                     += s->value[LEAF_TO_LITR2C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr3C                     += s->value[LEAF_TO_LITR3C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr4C                     += s->value[LEAF_TO_LITR4C]      * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->leaf_litr1C + c->leaf_litr2C + c->leaf_litr3C + c->leaf_litr4C , == , c->leaf_litrC + eps );
littering.c:	c->daily_froot_to_litrC            += s->value[FROOT_TO_LITRC]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr1C           += s->value[FROOT_TO_LITR1C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr2C           += s->value[FROOT_TO_LITR2C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr3C           += s->value[FROOT_TO_LITR3C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr4C           += s->value[FROOT_TO_LITR4C]     * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_froot_to_litr1C + c->daily_froot_to_litr2C + c->daily_froot_to_litr3C + c->daily_froot_to_litr4C , == , c->daily_froot_to_litrC + eps );
littering.c:	c->froot_litrC                     += s->value[FROOT_TO_LITRC]      * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr1C                    += s->value[FROOT_TO_LITR1C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr2C                    += s->value[FROOT_TO_LITR2C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr3C                    += s->value[FROOT_TO_LITR3C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr4C                    += s->value[FROOT_TO_LITR4C]     * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->froot_litr1C + c->froot_litr2C + c->froot_litr3C + c->froot_litr4C , == , c->froot_litrC + eps );
littering.c:	c->daily_cwd_to_litrN         += s->value[CWD_TO_LITRN]   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr2N        += s->value[CWD_TO_LITR2N]  * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr3N        += s->value[CWD_TO_LITR3N]  * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr4N        += s->value[CWD_TO_LITR4N]  * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_cwd_to_litr2N + c->daily_cwd_to_litr3N + c->daily_cwd_to_litr4N , == , c->daily_cwd_to_litrN + eps );
littering.c:	c->cwd_N                      += s->value[CWD_TO_LITRN]   * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_2N                     += s->value[CWD_TO_LITR2N]  * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_3N                     += s->value[CWD_TO_LITR3N]  * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_4N                     += s->value[CWD_TO_LITR4N]  * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->cwd_2N + c->cwd_3N + c->cwd_4N , == , c->cwd_N + eps );
littering.c:	c->daily_leaf_to_litrN             += s->value[LEAF_TO_LITRN]       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr1N            += s->value[LEAF_TO_LITR1N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr2N            += s->value[LEAF_TO_LITR2N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr3N            += s->value[LEAF_TO_LITR3N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr4N            += s->value[LEAF_TO_LITR4N]      * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_leaf_to_litr1N + c->daily_leaf_to_litr2N + c->daily_leaf_to_litr3N + c->daily_leaf_to_litr4N , == , c->daily_leaf_to_litrN + eps );
littering.c:	c->leaf_litrN                      += s->value[LEAF_TO_LITRN]       * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr1N                     += s->value[LEAF_TO_LITR1N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr2N                     += s->value[LEAF_TO_LITR2N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr3N                     += s->value[LEAF_TO_LITR3N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr4N                     += s->value[LEAF_TO_LITR4N]      * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->leaf_litr1N + c->leaf_litr2N + c->leaf_litr3N + c->leaf_litr4N , == , c->leaf_litrN + eps );
littering.c:	c->daily_froot_to_litrN            += s->value[FROOT_TO_LITRN]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr1N           += s->value[FROOT_TO_LITR1N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr2N           += s->value[FROOT_TO_LITR2N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr3N           += s->value[FROOT_TO_LITR3N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr4N           += s->value[FROOT_TO_LITR4N]     * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_froot_to_litr1N + c->daily_froot_to_litr2N + c->daily_froot_to_litr3N + c->daily_froot_to_litr4N , == , c->daily_froot_to_litrN + eps );
littering.c:	c->froot_litrN                     += s->value[FROOT_TO_LITRN]      * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr1N                    += s->value[FROOT_TO_LITR1N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr2N                    += s->value[FROOT_TO_LITR2N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr3N                    += s->value[FROOT_TO_LITR3N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr4N                    += s->value[FROOT_TO_LITR4N]     * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->froot_litr1N + c->froot_litr2N + c->froot_litr3N + c->froot_litr4N , == , c->froot_litrN + eps );
littering.c:	c->daily_cwd_to_litrC         = cwd_to_litrC    * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr2C        = cwd_to_litr2C   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr3C        = cwd_to_litr3C   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr4C        = cwd_to_litr4C   * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_cwd_to_litr2C + c->daily_cwd_to_litr3C + c->daily_cwd_to_litr4C , == , c->daily_cwd_to_litrC + eps );
littering.c:	c->cwd_C                      += c->daily_cwd_to_litrC;
littering.c:	c->cwd_2C                     += c->daily_cwd_to_litr2C;
littering.c:	c->cwd_3C                     += c->daily_cwd_to_litr3C;
littering.c:	c->cwd_4C                     += c->daily_cwd_to_litr4C;
littering.c:	CHECK_CONDITION ( c->cwd_2C + c->cwd_3C + c->cwd_4C , == , c->cwd_C + eps );
littering.c:	c->daily_cwd_to_litrN         = cwd_to_litrN    * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr2N        = cwd_to_litr2N   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr3N        = cwd_to_litr3N   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr4N        = cwd_to_litr4N   * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_cwd_to_litr2N + c->daily_cwd_to_litr3N + c->daily_cwd_to_litr4N , == , c->daily_cwd_to_litrN + eps );
littering.c:	c->cwd_N                      += c->daily_cwd_to_litrN;
littering.c:	c->cwd_2N                     += c->daily_cwd_to_litr2N;
littering.c:	c->cwd_3N                     += c->daily_cwd_to_litr3N;
littering.c:	c->cwd_4N                     += c->daily_cwd_to_litr4N;
littering.c:	CHECK_CONDITION ( c->cwd_2N + c->cwd_3N + c->cwd_4N , == , c->cwd_N + eps );
littering.c:	c->daily_leaf_to_litrC              = leaf_to_litrC       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr1C             = leaf_to_litr1C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr2C             = leaf_to_litr2C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr3C             = leaf_to_litr3C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr4C             = leaf_to_litr4C      * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_leaf_to_litr1C + c->daily_leaf_to_litr2C + c->daily_leaf_to_litr3C + c->daily_leaf_to_litr4C , == , c->daily_leaf_to_litrC + eps );
littering.c:	c->leaf_litrC                      += c->daily_leaf_to_litrC;
littering.c:	c->leaf_litr1C                     += c->daily_leaf_to_litr1C;
littering.c:	c->leaf_litr2C                     += c->daily_leaf_to_litr2C;
littering.c:	c->leaf_litr3C                     += c->daily_leaf_to_litr3C;
littering.c:	c->leaf_litr4C                     += c->daily_leaf_to_litr4C;
littering.c:	CHECK_CONDITION ( c->leaf_litr1C + c->leaf_litr2C + c->leaf_litr3C + c->leaf_litr4C , == , c->leaf_litrC + eps );
littering.c:	c->daily_leaf_to_litrN              = leaf_to_litrN       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr1N             = leaf_to_litr1N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr2N             = leaf_to_litr2N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr3N             = leaf_to_litr3N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr4N             = leaf_to_litr4N      * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_leaf_to_litr1N + c->daily_leaf_to_litr2N + c->daily_leaf_to_litr3N + c->daily_leaf_to_litr4N , == , c->daily_leaf_to_litrN + eps );
littering.c:	c->leaf_litrN                      += c->daily_leaf_to_litrN;
littering.c:	c->leaf_litr1N                     += c->daily_leaf_to_litr1N;
littering.c:	c->leaf_litr2N                     += c->daily_leaf_to_litr2N;
littering.c:	c->leaf_litr3N                     += c->daily_leaf_to_litr3N;
littering.c:	c->leaf_litr4N                     += c->daily_leaf_to_litr4N;
littering.c:	CHECK_CONDITION ( c->leaf_litr1N + c->leaf_litr2N + c->leaf_litr3N + c->leaf_litr4N , == , c->leaf_litrN + eps );
littering.c:	c->daily_froot_to_litrC              = froot_to_litrC       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr1C             = froot_to_litr1C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr2C             = froot_to_litr2C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr3C             = froot_to_litr3C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr4C             = froot_to_litr4C      * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_froot_to_litr1C + c->daily_froot_to_litr2C + c->daily_froot_to_litr3C + c->daily_froot_to_litr4C , == , c->daily_froot_to_litrC + eps );
littering.c:	c->froot_litrC                      += c->daily_froot_to_litrC;
littering.c:	c->froot_litr1C                     += c->daily_froot_to_litr1C;
littering.c:	c->froot_litr2C                     += c->daily_froot_to_litr2C;
littering.c:	c->froot_litr3C                     += c->daily_froot_to_litr3C;
littering.c:	c->froot_litr4C                     += c->daily_froot_to_litr4C;
littering.c:	CHECK_CONDITION ( c->froot_litr1C + c->froot_litr2C + c->froot_litr3C + c->froot_litr4C , == , c->froot_litrC + eps );
littering.c:	c->daily_froot_to_litrN              = froot_to_litrN       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr1N             = froot_to_litr1N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr2N             = froot_to_litr2N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr3N             = froot_to_litr3N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr4N             = froot_to_litr4N      * 1e6 / g_settings->sizeCell;
littering.c:	CHECK_CONDITION ( c->daily_froot_to_litr1N + c->daily_froot_to_litr2N + c->daily_froot_to_litr3N + c->daily_froot_to_litr4N , == , c->daily_froot_to_litrN + eps );
littering.c:	c->froot_litrN                      += c->daily_froot_to_litrN;
littering.c:	c->froot_litr1N                     += c->daily_froot_to_litr1N;
littering.c:	c->froot_litr2N                     += c->daily_froot_to_litr2N;
littering.c:	c->froot_litr3N                     += c->daily_froot_to_litr3N;
littering.c:	c->froot_litr4N                     += c->daily_froot_to_litr4N;
littering.c:	CHECK_CONDITION ( c->froot_litr1N + c->froot_litr2N + c->froot_litr3N + c->froot_litr4N , == , c->froot_litrN + eps );
Binary file littering.o matches
litter_model_check_balance.c:	in      = c->daily_leaf_to_litrC + c->daily_froot_to_litrC + c->daily_cwd_to_litrC;
litter_model_check_balance.c:	out     = c->daily_litr_het_resp + c->daily_litr_to_soilC;
litter_model_check_balance.c:	store   = c->daily_to_litr1C +
litter_model_check_balance.c:			c->daily_to_litr2C   +
litter_model_check_balance.c:			c->daily_to_litr3C   +
litter_model_check_balance.c:			c->daily_to_litr4C;
litter_model_check_balance.c:	if ( ( fabs( balance ) > eps ) && ( c->dos > 1) )
litter_model_check_balance.c:		error_log("DOY                       = %d\n", c->doy);
litter_model_check_balance.c:		error_log("c->daily_leaf_to_litrC    = %f gC/m2/day\n", c->daily_leaf_to_litrC);
litter_model_check_balance.c:		error_log("c->daily_froot_to_litrC   = %f gC/m2/day\n", c->daily_froot_to_litrC);
litter_model_check_balance.c:		error_log("c->daily_cwd_to_litrC     = %f gC/m2/day\n", c->daily_cwd_to_litrC);
litter_model_check_balance.c:		error_log("c->daily_litr_to_soilC    = %f gC/m2/day\n", c->daily_litr_to_soilC);
litter_model_check_balance.c:		error_log("c->daily_litr_het_resp    = %f gC/m2/day\n", c->daily_litr_het_resp);
litter_model_check_balance.c:		error_log("c->daily_to_litr1C        = %f gC/m2/day\n", c->daily_to_litr1C);
litter_model_check_balance.c:		error_log("c->daily_to_litr2C        = %f gC/m2/day\n", c->daily_to_litr2C);
litter_model_check_balance.c:		error_log("c->daily_to_litr3C        = %f gC/m2/day\n", c->daily_to_litr3C);
litter_model_check_balance.c:		error_log("c->daily_to_litr4C        = %f gC/m2/day\n", c->daily_to_litr4C);
litter_model_check_balance.c:	c->litr_carbon_in    = c->daily_leaf_to_litrC + c->daily_froot_to_litrC + c->daily_cwd_to_litrC;
litter_model_check_balance.c:	c->litr_carbon_out   = c->daily_litr_het_resp + c->daily_litr_to_soilC;
litter_model_check_balance.c:	c->litr_carbon_store =
litter_model_check_balance.c:			c->litr1C +
litter_model_check_balance.c:			c->litr2C +
litter_model_check_balance.c:			c->litr3C +
litter_model_check_balance.c:			c->litr4C;
litter_model_check_balance.c:	c->litr_carbon_balance = c->litr_carbon_in - c->litr_carbon_out - ( c->litr_carbon_store - c->litr_carbon_old_store );
litter_model_check_balance.c:	if ( ( fabs( c->litr_carbon_balance ) > eps ) && ( c->dos > 1 ) )
litter_model_check_balance.c:		error_log("DOS                    = %d\n", c->dos);
litter_model_check_balance.c:		error_log("in                     = %f gC/m2/day\n", c->litr_carbon_in);
litter_model_check_balance.c:		error_log("daily_leaf_to_litrC    = %f gC/m2\n",     c->daily_leaf_to_litrC);
litter_model_check_balance.c:		error_log("daily_froot_to_litrC   = %f gC/m2\n",     c->daily_froot_to_litrC);
litter_model_check_balance.c:		error_log("daily_cwd_to_litrC     = %f gC/m2/day\n", c->daily_cwd_to_litrC);
litter_model_check_balance.c:		error_log("out                    = %f gC/m2/day\n", c->litr_carbon_out);
litter_model_check_balance.c:		error_log("daily_het_resp         = %f gC/m2/day\n", c->daily_litr_het_resp);
litter_model_check_balance.c:		error_log("daily_to_soilC         = %f gC/m2/day\n", c->daily_to_soilC);
litter_model_check_balance.c:		error_log("litr1C                 = %f gC/m2/day\n", c->litr1C);
litter_model_check_balance.c:		error_log("litr2C                 = %f gC/m2/day\n", c->litr2C);
litter_model_check_balance.c:		error_log("litr3C                 = %f gC/m2/day\n", c->litr3C);
litter_model_check_balance.c:		error_log("litr4C                 = %f gC/m2/day\n", c->litr4C);
litter_model_check_balance.c:		error_log("carbon in              = %f gC/m2/day\n", c->litr_carbon_in);
litter_model_check_balance.c:		error_log("carbon out             = %f gC/m2/day\n", c->litr_carbon_out);
litter_model_check_balance.c:		error_log("delta carbon store     = %f gC/m2/day\n", c->litr_carbon_store - c->litr_carbon_old_store);
litter_model_check_balance.c:		error_log("carbon_balance         = %f gC/m2/day\n", c->litr_carbon_balance);
litter_model_check_balance.c:		CHECK_CONDITION(fabs( c->litr_carbon_balance ), > , eps);
litter_model_check_balance.c:		c->litr_carbon_old_store = c->litr_carbon_store;
litter_model_check_balance.c:	in      = c->daily_leaf_to_litrN + c->daily_froot_to_litrN + c->daily_cwd_to_litrN /* fixme include Ndepostiion daily NOT here but in the soil balance */;
litter_model_check_balance.c:	out     = c->daily_litr_to_soilN /* fixme include N plants demand */;
litter_model_check_balance.c:	store   = c->daily_to_litr1N +
litter_model_check_balance.c:			c->daily_to_litr2N   +
litter_model_check_balance.c:			c->daily_to_litr3N   +
litter_model_check_balance.c:			c->daily_to_litr4N;
litter_model_check_balance.c:	if ( ( fabs( balance ) > eps ) && ( c->dos > 1) )
litter_model_check_balance.c:		error_log("DOY                       = %d\n", c->doy);
litter_model_check_balance.c:		error_log("c->daily_leaf_to_litrN    = %f gN/m2/day\n", c->daily_leaf_to_litrN);
litter_model_check_balance.c:		error_log("c->daily_froot_to_litrN   = %f gN/m2/day\n", c->daily_froot_to_litrN);
litter_model_check_balance.c:		error_log("c->daily_cwd_to_litrN     = %f gN/m2/day\n", c->daily_cwd_to_litrN);
litter_model_check_balance.c:		error_log("c->daily_litr_to_soilN    = %f gN/m2/day\n", c->daily_litr_to_soilN);
litter_model_check_balance.c:		error_log("c->daily_to_litr1N        = %f gN/m2/day\n", c->daily_to_litr1N);
litter_model_check_balance.c:		error_log("c->daily_to_litr2N        = %f gN/m2/day\n", c->daily_to_litr2N);
litter_model_check_balance.c:		error_log("c->daily_to_litr3N        = %f gN/m2/day\n", c->daily_to_litr3N);
litter_model_check_balance.c:		error_log("c->daily_to_litr4N        = %f gN/m2/day\n", c->daily_to_litr4N);
litter_model_check_balance.c:	c->litr_nitrogen_in    = c->daily_leaf_to_litrN + c->daily_froot_to_litrN + c->daily_cwd_to_litrN /* fixme include Ndepostiion daily */;
litter_model_check_balance.c:	c->litr_nitrogen_out   = c->daily_litr_to_soilN /* fixme include N plants demand */;
litter_model_check_balance.c:	c->litr_nitrogen_store = c->litr1N +
litter_model_check_balance.c:			c->litr2N  +
litter_model_check_balance.c:			c->litr3N  +
litter_model_check_balance.c:			c->litr4N ;
litter_model_check_balance.c:	c->litr_nitrogen_balance = c->litr_nitrogen_in - c->litr_nitrogen_out - ( c->litr_nitrogen_store - c->litr_nitrogen_old_store );
litter_model_check_balance.c:	if ( ( fabs( c->litr_nitrogen_balance ) > eps ) && ( c->dos > 1 ) )
litter_model_check_balance.c:		error_log("DOS                       = %d\n", c->dos);
litter_model_check_balance.c:		error_log("\nin                      = %f gN/m2/day\n", c->litr_nitrogen_in);
litter_model_check_balance.c:		error_log("daily_leaf_to_litrN       = %f gN/m2\n",     c->daily_leaf_to_litrN);
litter_model_check_balance.c:		error_log("c->daily_froot_to_litrN   = %f gN/m2/day\n", c->daily_froot_to_litrN);
litter_model_check_balance.c:		error_log("c->daily_cwd_to_litrN     = %f gN/m2/day\n", c->daily_cwd_to_litrN);
litter_model_check_balance.c:		error_log("\nout                     = %f gN/m2/day\n", c->litr_nitrogen_out);
litter_model_check_balance.c:		error_log("daily_litr_to_soilN       = %f gN/m2/day\n", c->daily_litr_to_soilN);
litter_model_check_balance.c:		error_log("\nstore                   = %f gN/m2/day\n", c->litr_nitrogen_store);
litter_model_check_balance.c:		error_log("leaf_litr1N               = %f gN/m2/day\n", c->litr1N);
litter_model_check_balance.c:		error_log("leaf_litr2N               = %f gN/m2/day\n", c->litr2N);
litter_model_check_balance.c:		error_log("leaf_litr3N               = %f gN/m2/day\n", c->litr3N);
litter_model_check_balance.c:		error_log("leaf_litr4N               = %f gN/m2/day\n", c->litr4N);
litter_model_check_balance.c:		error_log("\nbalance                 = %f gN/m2/day\n", c->litr_nitrogen_balance);
litter_model_check_balance.c:		error_log("nitrogen in               = %f gN/m2/day\n", c->litr_nitrogen_in);
litter_model_check_balance.c:		error_log("nitrogen out              = %f gN/m2/day\n", c->litr_nitrogen_out);
litter_model_check_balance.c:		error_log("delta nitrogen store      = %f gN/m2/day\n", c->litr_nitrogen_store - c->litr_nitrogen_old_store);
litter_model_check_balance.c:		error_log("nitrogen_balance          = %f gN/m2/day\n", c->litr_nitrogen_balance);
litter_model_check_balance.c:		CHECK_CONDITION(fabs( c->litr_nitrogen_balance ), > , eps);
litter_model_check_balance.c:		c->litr_nitrogen_old_store = c->litr_nitrogen_store;
Binary file litter_model_check_balance.o matches
litter_nitrogen_balance.c:	c->cwd_2N             -= c->daily_cwd_to_litr2N;
litter_nitrogen_balance.c:	c->cwd_3N             -= c->daily_cwd_to_litr3N;
litter_nitrogen_balance.c:	c->cwd_4N             -= c->daily_cwd_to_litr4N;
litter_nitrogen_balance.c:	c->daily_to_litr1N          = ( c->daily_leaf_to_litr1N + c->daily_froot_to_litr1N )
litter_nitrogen_balance.c:			- ( c->daily_litr1N_to_soil1N );
litter_nitrogen_balance.c:	c->litr1N                  += c->daily_to_litr1N;
litter_nitrogen_balance.c:	c->daily_to_litr2N          = ( c->daily_leaf_to_litr2N + c->daily_litr3N_to_litr2N + c->daily_cwd_to_litr2N + c->daily_froot_to_litr2N)
litter_nitrogen_balance.c:			- ( c->daily_litr2N_to_soil2N );
litter_nitrogen_balance.c:	c->litr2N                  += c->daily_to_litr2N;
litter_nitrogen_balance.c:	c->daily_to_litr3N          = ( c->daily_leaf_to_litr3N + c->daily_froot_to_litr3N + c->daily_cwd_to_litr3N )
litter_nitrogen_balance.c:			- c->daily_litr3N_to_litr2N;
litter_nitrogen_balance.c:	c->litr3N                  += c->daily_to_litr3N;
litter_nitrogen_balance.c:	c->daily_to_litr4N          = ( c->daily_leaf_to_litr4N + c->daily_froot_to_litr4N + c->daily_cwd_to_litr4N )
litter_nitrogen_balance.c:			- ( c->daily_litr4N_to_soil3N );
litter_nitrogen_balance.c:	c->litr4N                  += c->daily_to_litr4N;
litter_nitrogen_balance.c:	c->daily_leaf_to_litrN      = c->daily_leaf_to_litr1N  + c->daily_leaf_to_litr2N     + c->daily_leaf_to_litr3N     + c->daily_leaf_to_litr4N;
litter_nitrogen_balance.c:	c->daily_froot_to_litrN     = c->daily_froot_to_litr1N + c->daily_froot_to_litr2N    + c->daily_froot_to_litr3N    + c->daily_froot_to_litr4N;
litter_nitrogen_balance.c:	c->daily_cwd_to_litrN       =                            c->daily_cwd_to_litr2N      + c->daily_cwd_to_litr3N      + c->daily_cwd_to_litr4N;
litter_nitrogen_balance.c:	c->daily_to_litrN           = c->daily_to_litr1N       + c->daily_to_litr2N          + c->daily_to_litr3N          + c->daily_to_litr4N;
litter_nitrogen_balance.c:	c->cwd_N                    =             c->cwd_2N + c->cwd_3N + c->cwd_4N;
litter_nitrogen_balance.c:	c->litrN                    = c->litr1N + c->litr2N      + c->litr3N      + c->litr4N;
litter_nitrogen_balance.c:	c->daily_to_soilN           = c->daily_litr1N_to_soil1N + c->daily_litr2N_to_soil2N + c->daily_litr4N_to_soil3N;
litter_nitrogen_balance.c:	c->daily_to_soil1N          = c->daily_litr1N_to_soil1N;
litter_nitrogen_balance.c:	c->daily_to_soil2N          = c->daily_litr2N_to_soil2N;
litter_nitrogen_balance.c:	c->daily_to_soil3N          = c->daily_litr4N_to_soil3N;
Makefile:install-exec: install-exec-am
Makefile:	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
Makefile:install-exec-am: install-binPROGRAMS
Makefile:	install-dvi install-dvi-am install-exec install-exec-am \
Makefile.in:install-exec: install-exec-am
Makefile.in:	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
Makefile.in:install-exec-am: install-binPROGRAMS
Makefile.in:	install-dvi install-dvi-am install-exec install-exec-am \
management.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
management.c:	qsort ( c->heights, c->heights_count, sizeof (height_t),
management.c:	for ( height = c->heights_count -1 ; height >= 0; --height )
management.c:		h = &c->heights[height];
management.c:					c->harvesting                = 0;
management.c:							CHECK_CONDITION ( c->years[year].year, >, g_settings->year_start_management );
management.c:						if ( ( c->years[year].year == g_settings->year_start_management) ||
management.c:							(( c->years[year].year >= g_settings->year_start_management )
management.c:							prescribed_thinning ( c, height, dbh, age, species, c->years[year].year );
management.c:								if ( c->years[year].year == g_management->thinning_years[i] )
management.c:								if ( c->years[year].year == g_management->harvesting_years[i] )
management.c:							if ( ! string_compare_i(c->heights[height].dbhs[dbh].ages[age].species[species].name
management.c:						/* note: RESET c->dos */
management.c:						c->dos = 0;
management.c:							h = &c->heights[height];
management.c:						c->harvesting                = 1;
management.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
management.c:	c->n_trees          -= trees_to_remove;
management.c:	c->annual_dead_tree += trees_to_remove;
management.c:			if ( ! string_compare_i(g_dataset->rows[row].species, c->heights[height].dbhs[dbh].ages[age].species[species].name) )
management.c:				if ( g_dataset->rows[row].n != c->heights[height].dbhs[dbh].ages[age].species[species].counter[N_TREE] )
management.c:					CHECK_CONDITION(c->heights[height].dbhs[dbh].ages[age].species[species].counter[N_TREE], <, g_dataset->rows[row].n);
management.c:					tree_remove = c->heights[height].dbhs[dbh].ages[age].species[species].counter[N_TREE] - g_dataset->rows[row].n;
management.c:					c->heights[height].dbhs[dbh].ages[age].species[species].counter[THINNED_TREE] += tree_remove;
management.c:					c->heights[height].dbhs[dbh].ages[age].species[species].counter[N_TREE] = g_dataset->rows[row].n;
management.c:						c->heights[height].value = g_dataset->rows[row].height;
management.c:						c->heights[height].dbhs[dbh].value = g_dataset->rows[row].avdbh;
management.c:						c->heights[height].dbhs[dbh].ages[age].value = g_dataset->rows[row].age;
Binary file management.o matches
matrix.c:	if (!alloc_struct((void **)&c->heights, &c->heights_count, &c->heights_avail, sizeof(height_t)) )
matrix.c:	assert(c->heights_count);
matrix.c:	height.index = c->heights_count-1 + c->heights_avail;
matrix.c:	c->heights[c->heights_count-1] = height;
matrix.c:	c->heights[c->heights_count-1].value = row ? row->height : INVALID_VALUE;
matrix.c:	return fill_cell_from_dbhs(&c->heights[c->heights_count-1], row);
matrix.c:			if ( ! alloc_struct((void **)&c->soil_layers, &c->soil_layers_count, &c->s_layers_avail, sizeof(soil_layer_s)) )
matrix.c:			c->soil_layers[c->soil_layers_count-1] = s;
Binary file matrix.o matches
met_data.c:	met = (meteo_t*) c->years[year].m;
met_data.c:	implemented by Sönke Zaehle (szaehle@bgc-jena.mpg.de)
met_data.c:	met = (meteo_t*) c->years[year].m;
met_data.c:	met = (meteo_t*) c->years[year].m;
met_data.c:	met = c->years[year].m;
met_data.c:	//if(c->snow_pack != 0) met[month].d[day].tsoil = 0.0;
met_data.c:	met = c->years[year].m;
met_data.c:		c->doy_daylength = 0;
met_data.c:	++c->doy_daylength;
met_data.c:	met[month].d[day].daylength     = ampl * ( sin ( ( c->doy_daylength - 79. ) * 0.01721 ) ) + 12.;
met_data.c:			c->previous_thermic_sum = met[month].d[day].thermic_sum;
met_data.c:			c->previous_thermic_sum          = 0.;
met_data.c:			met[month].d[day].thermic_sum = c->previous_thermic_sum + (met[month].d[day].tavg - GDD_BASIS);
met_data.c:			c->previous_thermic_sum = met[month].d[day].thermic_sum;
met_data.c:			met[month].d[day].thermic_sum = c->previous_thermic_sum;
met_data.c:	met = (meteo_t*) c->years[year].m;
met_data.c:			weighted_avg += ( c->years[year].m[month].d[day].tavg * day_avg );
met_data.c:				if ( IS_LEAP_YEAR(c->years[year].year) && (1 == month) )
met_data.c:		c->years[current_year_index].m[current_month].d[current_day].tsoil = weighted_avg / i;
met_data.c:		c->years[current_year_index].m[current_month].d[current_day].tsoil = met[month].d[day].ts_f;
met_data.c:			v = c->years[year].m[month].d[day].tavg;
met_data.c:			v = c->years[year].m[month].d[day].tday;
met_data.c:			v = c->years[year].m[month].d[day].tnight;
met_data.c:			v = c->years[year].m[month].d[day].tsoil;
met_data.c:			if ( IS_LEAP_YEAR(c->years[year].year) && (1 == month) ) {
met_data.c:		c->years[current_year_index].m[current_month].d[current_day].ten_day_weighted_avg_tavg = weighted_avg / i;
met_data.c:		c->years[current_year_index].m[current_month].d[current_day].ten_day_weighted_avg_tday = weighted_avg / i;
met_data.c:		c->years[current_year_index].m[current_month].d[current_day].ten_day_weighted_avg_tnight = weighted_avg / i;
met_data.c:		c->years[current_year_index].m[current_month].d[current_day].ten_day_weighted_avg_tsoil = weighted_avg / i;
met_data.c:			v = c->years[year].m[month].d[day].tavg;
met_data.c:			v = c->years[year].m[month].d[day].tday;
met_data.c:			v = c->years[year].m[month].d[day].tnight;
met_data.c:			v = c->years[year].m[month].d[day].tsoil;
met_data.c:			if ( IS_LEAP_YEAR(c->years[year].year) && (1 == month) ) {
met_data.c:		c->years[current_year_index].m[current_month].d[current_day].ten_day_avg_tavg = averaged / i;
met_data.c:		c->years[current_year_index].m[current_month].d[current_day].ten_day_avg_tday = averaged / i;
met_data.c:		c->years[current_year_index].m[current_month].d[current_day].ten_day_avg_tnight = averaged / i;
met_data.c:		c->years[current_year_index].m[current_month].d[current_day].ten_day_avg_tsoil = averaged / i;
met_data.c:	if ( IS_LEAP_YEAR(c->years[year].year)) doy = 366;
met_data.c:	c->years[year].m[month].d[day].Ndeposition = c->years[year].Ndep / doy;
meteo.c:			//todo ((e0max*c->ni) + (e0min*(1.0-c->ni)));
Binary file meteo.o matches
modifiers.c:	a = &c->heights[height].dbhs[dbh].ages[age];
modifiers.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
modifiers.c:	s->values[F_NUTR] = c->soilN / s->value[NPP_gN_DEMAND];
modifiers.c:	c->vwc = c->asw / c->max_asw_fc;
modifiers.c:	c->psi = c->psi_sat * pow((c->vwc/c->vwc_sat), c->soil_b);
modifiers.c:  test<-(c->vwc/c->vwc_sat);
modifiers.c:  //printf("psi %f\n",c->psi);
modifiers.c:  //printf("saturation degree %f\n",c->vwc/c->vwc_sat);
modifiers.c:  //printf("vwc %f\n",c->vwc);
modifiers.c:  //printf("vwcsat %f\n",c->vwc_sat);
modifiers.c:  printf("asw %f\n",c->asw);
modifiers.c:  c->vwc = c->asw/(g_soil_settings->values[SOIL_DEPTH]*10);
modifiers.c:  c->psi = c->psi_sat * pow((c->vwc/c->vwc_sat), c->soil_b); 
modifiers.c:  printf("new_vwc %f\n",c->vwc);
modifiers.c:  printf("new_psi %f\n",c->psi);
modifiers.c:  //printf("psi_sat %f\n",c->psi_sat);
modifiers.c:  // printf("soil_b %f\n", c->soil_b);
modifiers.c:	if (c->psi > s->value[SWPOPEN])
modifiers.c:	else if (c->psi <= s->value[SWPCLOSE])
modifiers.c:		s->value[F_PSI] = ( s->value[SWPCLOSE] - c->psi ) / ( s->value[SWPCLOSE] - s->value[SWPOPEN] );
modifiers.c:	    pentry = pentry_temp * pow ((c->bulk_density / 1.3), (0.67 * bsl));
modifiers.c:	    sat_soil_water_cont= 1.0 - (c->bulk_density/2.56);
modifiers.c:	    eq = pentry * pow ((sat_soil_water_cont / c->soil_moist_ratio), bsl);
mortality.c:	for ( height = c->heights_count - 1; height >= 0; --height )
mortality.c:		qsort (c->heights, c->heights_count, sizeof (height_t), sort_by_heights_desc);
mortality.c:		h = &c->heights[height];
mortality.c:			d = &c->heights[height].dbhs[dbh];
mortality.c:				a = &c->heights[height].dbhs[dbh].ages[age];
mortality.c:					s = &c->heights[height].dbhs[dbh].ages[age].species[species];
mortality.c:					//					while ( c->tree_layers[layer].layer_cover_proj >= g_settings->max_layer_cover )
mortality.c:						++c->daily_dead_tree;
mortality.c:						--c->tree_layers[layer].layer_n_trees;
mortality.c:						c->tree_layers[layer].layer_density = c->tree_layers[layer].layer_n_trees / g_settings->sizeCell;
mortality.c:						c->tree_layers[layer].layer_cover_proj  -= s->value[CANOPY_COVER_PROJ];
mortality.c:							c->tree_layers[layer].layer_cover_proj += s->value[CANOPY_COVER_PROJ];
mortality.c:					c->n_trees            -= deadtree;
mortality.c:	c->tree_layers[layer].layer_n_height_class = 0;
mortality.c:	c->tree_layers[layer].layer_n_trees        = 0;
mortality.c:	c->tree_layers[layer].layer_density        = 0;
mortality.c:	for ( height = c->heights_count -1; height >= 0 ; --height )
mortality.c:		if( layer == c->heights[height].height_z )
mortality.c:			c->tree_layers[layer].layer_n_height_class += 1;
mortality.c:		for ( dbh = c->heights[height].dbhs_count - 1; dbh >= 0; --dbh)
mortality.c:			for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
mortality.c:				for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
mortality.c:					s = &c->heights[height].dbhs[dbh].ages[age].species[species];
mortality.c:					if( layer == c->heights[height].height_z )
mortality.c:						c->tree_layers[layer].layer_n_trees += s->counter[N_TREE];
mortality.c:	c->tree_layers[layer].layer_density = c->tree_layers[layer].layer_n_trees / g_settings->sizeCell;
mortality.c:	logger(g_debug_log, "-height class(es) = %d layer\n", c->tree_layers[layer].layer_n_height_class);
mortality.c:	logger(g_debug_log, "-number of trees  = %d layer\n", c->tree_layers[layer].layer_n_trees);
mortality.c:	logger(g_debug_log, "-density          = %f layer\n", c->tree_layers[layer].layer_density);
mortality.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
mortality.c:		c->n_trees -= s->counter[DEAD_TREE];
mortality.c:		c->daily_leaf_carbon        -= (s->value[C_LEAF_TO_LITR]   * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_froot_carbon       -= (s->value[C_FROOT_TO_LITR]  * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_stem_carbon        -= (s->value[C_STEM_TO_CWD]    * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_croot_carbon       -= (s->value[C_CROOT_TO_CWD]   * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_branch_carbon      -= (s->value[C_BRANCH_TO_CWD]  * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_reserve_carbon     -= (s->value[C_RESERVE_TO_CWD] * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_fruit_carbon       -= (s->value[C_FRUIT_TO_CWD]   * 1e6 / g_settings->sizeCell);
mortality.c:		c->leaf_carbon              -= (s->value[C_LEAF_TO_LITR]   * 1e6 / g_settings->sizeCell);
mortality.c:		c->froot_carbon             -= (s->value[C_FROOT_TO_LITR]  * 1e6 / g_settings->sizeCell);
mortality.c:		c->stem_carbon              -= (s->value[C_STEM_TO_CWD]    * 1e6 / g_settings->sizeCell);
mortality.c:		c->branch_carbon            -= (s->value[C_BRANCH_TO_CWD]  * 1e6 / g_settings->sizeCell);
mortality.c:		c->croot_carbon             -= (s->value[C_CROOT_TO_CWD]   * 1e6 / g_settings->sizeCell);
mortality.c:		c->reserve_carbon           -= (s->value[C_RESERVE_TO_CWD] * 1e6 / g_settings->sizeCell);
mortality.c:		c->fruit_carbon             -= (s->value[C_FRUIT_TO_CWD]   * 1e6 / g_settings->sizeCell);
mortality.c:		CHECK_CONDITION ( c->leaf_carbon,    < , ZERO );
mortality.c:		CHECK_CONDITION ( c->froot_carbon,   < , ZERO );
mortality.c:		CHECK_CONDITION ( c->stem_carbon,    < , ZERO );
mortality.c:		CHECK_CONDITION ( c->branch_carbon,  < , ZERO );
mortality.c:		CHECK_CONDITION ( c->croot_carbon,   < , ZERO );
mortality.c:		CHECK_CONDITION ( c->reserve_carbon, < , ZERO );
mortality.c:		CHECK_CONDITION ( c->fruit_carbon,   < , ZERO );
mortality.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
mortality.c:		c->n_trees -= s->counter[DEAD_TREE];
mortality.c:	a = &c->heights[height].dbhs[dbh].ages[age];
mortality.c:		c->daily_dead_tree   += deadtree;
mortality.c:		c->monthly_dead_tree += deadtree;
mortality.c:		c->annual_dead_tree  += deadtree;
mortality.c:		c->n_trees           -= deadtree;
mortality.c:		CHECK_CONDITION(c->daily_dead_tree  , <, 0);
mortality.c:		CHECK_CONDITION(c->monthly_dead_tree, <, 0);
mortality.c:		CHECK_CONDITION(c->annual_dead_tree , <, 0);
mortality.c:	a = &c->heights[height].dbhs[dbh].ages[age];
mortality.c:		c->daily_dead_tree   += deadtree;
mortality.c:		c->monthly_dead_tree += deadtree;
mortality.c:		c->annual_dead_tree  += deadtree;
mortality.c:		c->n_trees           -= deadtree;
mortality.c:		CHECK_CONDITION(c->daily_dead_tree  , <, 0);
mortality.c:		CHECK_CONDITION(c->monthly_dead_tree, <, 0);
mortality.c:		CHECK_CONDITION(c->annual_dead_tree , <, 0);
mortality.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
mortality.c:	CHECK_CONDITION(c->heights_count, !=, 1);
mortality.c:	CHECK_CONDITION(c->heights[0].dbhs_count, !=, 1);
mortality.c:	CHECK_CONDITION(c->heights[0].dbhs[0].ages_count, !=, 1);
mortality.c:	CHECK_CONDITION(c->heights[0].dbhs[0].ages[0].species_count, !=, 1);
mortality.c:	s = &c->heights[0].dbhs[0].ages[0].species[0];
Binary file mortality.o matches
new_forest_tree_class.c:	if ( ! alloc_struct((void **)&c->heights, &c->heights_count, &c->heights_avail, sizeof(height_t)) )
new_forest_tree_class.c:	c->heights[c->heights_count-1]       = height;
new_forest_tree_class.c:	c->heights[c->heights_count-1].value = g_settings->replanted[species_index].height;
new_forest_tree_class.c:	h = &c->heights[c->heights_count-1];
new_forest_tree_class.c:	height = c->heights_count - 1;
new_forest_tree_class.c:	dbh = c->heights[height].dbhs_count - 1;
new_forest_tree_class.c:	age = c->heights[height].dbhs[dbh].ages_count - 1;
new_forest_tree_class.c:	species = c->heights[height].dbhs[dbh].ages[age].species_count - 1;
new_forest_tree_class.c:	if ( ! fill_species_from_file ( &c->heights[height].dbhs[dbh].ages[age].species[species]) )
new_forest_tree_class.c:		if ( (FEBRUARY == month_temp) && IS_LEAP_YEAR(c->years[year].year) )
new_forest_tree_class.c:	if ( ! alloc_struct((void **)&c->heights, &c->heights_count, &c->heights_avail, sizeof(height_t)) )
new_forest_tree_class.c:	c->heights[c->heights_count-1] = height;
new_forest_tree_class.c:	c->heights[c->heights_count-1].value = g_settings->regeneration_height;
new_forest_tree_class.c:	h = &c->heights[c->heights_count-1];
new_forest_tree_class.c:	logger(g_debug_log, "-height = %f\n", c->heights[c->heights_count-1].value);
new_forest_tree_class.c:	if ( ! fill_species_from_file(&c->heights[c->heights_count-1].dbhs[0].ages[0].species[0]) )
new_forest_tree_class.c:	initialization_forest_class_C      ( c, c->heights_count-1, 0, 0, 0 );
new_forest_tree_class.c:	initialization_forest_class_N      ( c, c->heights_count-1, 0, 0, 0 );
new_forest_tree_class.c:	print_new_daily_forest_class_data  ( c, c->heights_count-1, 0, 0, 0 );
phenology.c:	for (height = c->heights_count - 1; height >= 0; height-- )
phenology.c:		for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh)
phenology.c:			for (age = c->heights[height].dbhs[dbh].ages_count - 1 ; age >= 0 ; age-- )
phenology.c:				for (species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; species++)
phenology.c:					s = &c->heights[height].dbhs[dbh].ages[age].species[species];
phenology.c:						logger(g_debug_log, "-days of leaf fall for %s = %d day\n", c->heights[height].dbhs[dbh].ages[age].species[species].name, s->counter[DAYS_LEAFFALL]);
phenology.c:								(meteo_daily->daylength >= s->value[MINDAYLENGTH] && month >= 6 && c->north == 0))
phenology.c:								s->counter[FIRST_VEG_DAYS] = c->doy;
phenology.c:							if (meteo_daily->daylength <= s->value[MINDAYLENGTH] && month >= 6 && c->north == 0 )
phenology.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
phenology.c://				if (met[month].d[day].daylength < s->value[MINDAYLENGTH] && month+1 > 6 /*c->abscission_daylength*/)
photosynthesis2.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
photosynthesis2.c:	c->daily_gpp                         += s->value[GPP];
photosynthesis2.c:	c->monthly_gpp                       += s->value[GPP];
photosynthesis2.c:	c->annual_gpp                        += s->value[GPP];
photosynthesis2.c:	c->daily_ass                         += s->value[ASSIMILATION];
photosynthesis2.c:	c->monthly_ass                       += s->value[ASSIMILATION];
photosynthesis2.c:	c->annual_ass                        += s->value[ASSIMILATION];
photosynthesis2.c:	c->daily_gpp_tC                      += s->value[GPP_tC];
photosynthesis2.c:	c->monthly_gpp_tC                    += s->value[GPP_tC];
photosynthesis2.c:	c->annual_gpp_tC                     += s->value[GPP_tC];
photosynthesis3.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
photosynthesis3.c:	c->daily_gpp                         += s->value[GPP];
photosynthesis3.c:	c->monthly_gpp                       += s->value[GPP];
photosynthesis3.c:	c->annual_gpp                        += s->value[GPP];
photosynthesis3.c:	c->daily_ass                         += s->value[ASSIMILATION];
photosynthesis3.c:	c->monthly_ass                       += s->value[ASSIMILATION];
photosynthesis3.c:	c->annual_ass                        += s->value[ASSIMILATION];
photosynthesis3.c:	c->daily_gpp_tC                      += s->value[GPP_tC];
photosynthesis3.c:	c->monthly_gpp_tC                    += s->value[GPP_tC];
photosynthesis3.c:	c->annual_gpp_tC                     += s->value[GPP_tC];
photosynthesis.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
photosynthesis.c:	c->daily_gpp                += s->value[GPP];
photosynthesis.c:	c->monthly_gpp              += s->value[GPP];
photosynthesis.c:	c->annual_gpp               += s->value[GPP];
photosynthesis.c:	c->daily_ass                += s->value[ASSIMILATION];
photosynthesis.c:	c->monthly_ass              += s->value[ASSIMILATION];
photosynthesis.c:	c->annual_ass               += s->value[ASSIMILATION];
photosynthesis.c:	c->daily_gpp_tC             += s->value[GPP_tC];
photosynthesis.c:	c->monthly_gpp_tC           += s->value[GPP_tC];
photosynthesis.c:	c->annual_gpp_tC            += s->value[GPP_tC];
Binary file photosynthesis.o matches
print.c:	met = c->years[year].m;
print.c:	meteo_annual = &c->years[year];
print.c:	logger(g_debug_log, "**Daily MET DATA day %d month %d, year %d (yos %d)**\n", day + 1, month + 1, c->years[year].year, year + 1);
print.c:	logger(g_debug_log, "-%d-%d-%d\n", met[month].d[day].n_days, month+1, c->years[year].year);
print.c:			c->doy
print.c:	logger(g_debug_log, "* x = %d\n", c->x);
print.c:	logger(g_debug_log, "* y = %d\n", c->y);
print.c:	logger(g_debug_log, "* asw = %f mm\n", c->asw);
print.c:	logger(g_debug_log, "* swc = %f %%\n", c->swc);
print.c:	logger(g_debug_log, "* snow pack = %f cm\n", c->snow_pack);
print.c:	logger(g_debug_log, "* number of trees = %d\n", c->n_trees);
print.c:	logger(g_debug_log, "* number of layers = %d\n", c->tree_layers_count);
print.c:	logger(g_debug_log, "* number of height class = %d\n", c->heights_count);
print.c:	//logger(g_debug_log, "* number of height class = %d\n", c->cell_heights_count);
print.c:	//logger(g_debug_log, "* number of dbh = %d\n", c->cell_dbhs_count);
print.c:	//logger(g_debug_log, "* number of age class = %d\n", c->cell_ages_count);
print.c:	//logger(g_debug_log, "* number of species class = %d\n", c->cell_species_count);
print.c:	l = &c->tree_layers[layer];
print.c:	h = &c->heights[height];
print.c:	logger(g_debug_log, "* x  = %d\n", c->x);
print.c:	logger(g_debug_log, "* y  = %d\n", c->y);
print.c:	h = &c->heights[height];
print.c:	logger(g_debug_log, "* x  = %d\n", c->x);
print.c:	logger(g_debug_log, "* y  = %d\n", c->y);
print_output.c:		for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:			for ( height = 0; height < c->heights_count+c->heights_avail; ++height )
print_output.c:				if ( check_height_index(height, c->heights, c->heights_count) )
print_output.c:					if( layer == c->heights[height].height_z )
print_output.c:						for ( dbh = 0; dbh < c->heights[height].dbhs_count+c->heights[height].dbhs_avail; ++dbh )
print_output.c:							if ( check_dbh_index(dbh, c->heights[height].dbhs, c->heights[height].dbhs_count) )
print_output.c:								for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count+c->heights[height].dbhs[dbh].ages_avail; ++age )
print_output.c:									if ( check_age_index(age, c->heights[height].dbhs[dbh].ages, c->heights[height].dbhs[dbh].ages_count) )
print_output.c:										for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count+c->heights[height].dbhs[dbh].ages[age].species_avail; ++species )
print_output.c:											if ( check_species_index(species, c->heights[height].dbhs[dbh].ages[age].species, c->heights[height].dbhs[dbh].ages[age].species_count)  )
print_output.c:							if ( c->heights[height].dbhs[dbh].ages[age].species_count > 1 ) logger(g_daily_log,",*");
print_output.c:						if ( c->heights[height].dbhs[dbh].ages_count > 1 ) logger(g_daily_log,",**");
print_output.c:					if ( c->heights[height].dbhs_count > 1 ) logger(g_daily_log,",***");
print_output.c:				if ( c->tree_layers[layer].layer_n_height_class > 1 ) logger(g_daily_log,",****");
print_output.c:			if ( c->tree_layers_count > 1 ) logger(g_daily_log,",*****");
print_output.c:	logger(g_daily_log, "%d,%d,%d,%d,%d", c->x, c->y, c->years[year].year, month + 1, day + 1);
print_output.c:	//qsort(c->heights, c->heights_count, sizeof(height_t), sort_by_heights_index_asc);
print_output.c:	for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:		for ( height = 0; height < c->heights_count+c->heights_avail; ++height )
print_output.c:			if ( check_height_index(height, c->heights, c->heights_count) )
print_output.c:				if( layer == c->heights[height].height_z )
print_output.c:					logger(g_daily_log,",%g", c->heights[height].value);
print_output.c:					//qsort(c->heights[height].dbhs, c->heights[height].dbhs_count, sizeof(dbh_t), sort_by_dbhs_index_asc);
print_output.c:					for ( dbh = 0; dbh < c->heights[height].dbhs_count+c->heights[height].dbhs_avail; ++dbh )
print_output.c:						if ( check_dbh_index(dbh, c->heights[height].dbhs, c->heights[height].dbhs_count) )
print_output.c:							logger(g_daily_log, ",%g", c->heights[height].dbhs[dbh].value);
print_output.c:							//qsort(c->heights[height].dbhs[dbh].ages, c->heights[height].dbhs[dbh].ages_count, sizeof(age_t), sort_by_ages_index_asc);
print_output.c:							for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count+c->heights[height].dbhs[dbh].ages_avail; ++age )
print_output.c:								if ( check_age_index(age, c->heights[height].dbhs[dbh].ages, c->heights[height].dbhs[dbh].ages_count) )
print_output.c:									logger(g_daily_log,",%d", c->heights[height].dbhs[dbh].ages[age].value);
print_output.c:									//qsort(c->heights[height].dbhs[dbh].ages[age].species, c->heights[height].dbhs[dbh].ages[age].species_count, sizeof(species_t), sort_by_species_index_asc);
print_output.c:									for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count+c->heights[height].dbhs[dbh].ages[age].species_avail; ++species )
print_output.c:										if ( check_species_index(species, c->heights[height].dbhs[dbh].ages[age].species, c->heights[height].dbhs[dbh].ages[age].species_count)  )
print_output.c:											s = &c->heights[height].dbhs[dbh].ages[age].species[species];
print_output.c:											logger(g_daily_log,",%s", c->heights[height].dbhs[dbh].ages[age].species[species].name);
print_output.c:											logger(g_daily_log,",%c", sz_management[c->heights[height].dbhs[dbh].ages[age].species[species].management]);
print_output.c:			c->daily_gpp,
print_output.c:			c->daily_npp,
print_output.c:			c->daily_aut_resp,
print_output.c:			c->daily_et,
print_output.c:			c->daily_lh_flux,
print_output.c:			c->daily_soil_evapo,
print_output.c:			c->snow_pack,
print_output.c:			c->asw,
print_output.c:			c->daily_iwue,
print_output.c:			c->litrC,
print_output.c:			c->cwdC,
print_output.c:			c->soilC,
print_output.c:			c->litrN,
print_output.c:			c->soilN,
print_output.c:			c->years[year].m[month].d[day].tsoil,
print_output.c:			c->years[year].m[month].d[day].daylength
print_output.c:	if ( c->doy == ( IS_LEAP_YEAR( c->years[year].year ) ? 366 : 365 ) )
print_output.c:		for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:			for ( height = 0; height < c->heights_count+c->heights_avail; ++height )
print_output.c:				if ( check_height_index(height, c->heights, c->heights_count)  )
print_output.c:					if ( layer == c->heights[height].height_z )
print_output.c:						for ( dbh = 0; dbh < c->heights[height].dbhs_count+c->heights[height].dbhs_avail; ++dbh )
print_output.c:							if ( check_dbh_index(dbh, c->heights[height].dbhs, c->heights[height].dbhs_count)  )
print_output.c:								for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count+c->heights[height].dbhs[dbh].ages_avail; ++age )
print_output.c:									if ( check_age_index(age, c->heights[height].dbhs[dbh].ages, c->heights[height].dbhs[dbh].ages_count) )
print_output.c:										for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count+c->heights[height].dbhs[dbh].ages[age].species_avail; ++species )
print_output.c:											if ( check_species_index(species, c->heights[height].dbhs[dbh].ages[age].species, c->heights[height].dbhs[dbh].ages[age].species_count)  )
print_output.c:		if( c->heights_count > 1 )
print_output.c:	logger ( g_monthly_log, "%d,%d,%d,%d", c->x, c->y, c->years[year].year, month +1 );
print_output.c:	for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:		for ( height = 0; height < c->heights_count+c->heights_avail; ++height )
print_output.c:			if ( check_height_index(height, c->heights, c->heights_count) )
print_output.c:				if( layer == c->heights[height].height_z )
print_output.c:					logger(g_monthly_log,",%g", c->heights[height].value);
print_output.c:					for ( dbh = 0; dbh < c->heights[height].dbhs_count+c->heights[height].dbhs_avail; ++dbh )
print_output.c:						if ( check_dbh_index(dbh, c->heights[height].dbhs, c->heights[height].dbhs_count) )
print_output.c:							logger(g_monthly_log,",%g", c->heights[height].dbhs[dbh].value);
print_output.c:							for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count+c->heights[height].dbhs[dbh].ages_avail; ++age )
print_output.c:								if ( check_age_index(age, c->heights[height].dbhs[dbh].ages, c->heights[height].dbhs[dbh].ages_count) )
print_output.c:									logger(g_monthly_log,",%d", c->heights[height].dbhs[dbh].ages[age].value);
print_output.c:									for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count+c->heights[height].dbhs[dbh].ages[age].species_avail; ++species )
print_output.c:										if ( check_species_index(species, c->heights[height].dbhs[dbh].ages[age].species, c->heights[height].dbhs[dbh].ages[age].species_count) )
print_output.c:											s  = &c->heights[height].dbhs[dbh].ages[age].species[species];
print_output.c:											logger(g_monthly_log,",%s", c->heights[height].dbhs[dbh].ages[age].species[species].name);
print_output.c:											logger(g_monthly_log,",%c", sz_management[c->heights[height].dbhs[dbh].ages[age].species[species].management]);
print_output.c:	if( c->heights_count > 1 )
print_output.c:				c->monthly_gpp,
print_output.c:				c->monthly_npp,
print_output.c:				c->monthly_aut_resp);
print_output.c:			c->monthly_et,
print_output.c:			c->monthly_lh_flux,
print_output.c:			c->asw,
print_output.c:			c->monthly_iwue);
print_output.c:	if ( ( IS_LEAP_YEAR( c->years[year].year ) ? (MonthLength_Leap[11]) : (MonthLength[11] )) == c->doy )
print_output.c:		c->initial_tree_layers_count = c->tree_layers_count;
print_output.c:		c->initial_heights_count = c->heights_count;
print_output.c:		for ( height = c->heights_count - 1; height >= 0 ; --height )
print_output.c:			c->heights[height].initial_dbhs_count = c->heights[height].dbhs_count;
print_output.c:			for ( dbh = c->heights[height].dbhs_count - 1; dbh >= 0; --dbh )
print_output.c:				c->heights[height].dbhs[dbh].initial_ages_count = c->heights[height].dbhs[dbh].ages_count;
print_output.c:				for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
print_output.c:					c->heights[height].dbhs[dbh].ages[age].initial_species_count = c->heights[height].dbhs[dbh].ages[age].species_count;
print_output.c:		for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:			for ( height = 0; height < c->heights_count+c->heights_avail; ++height )
print_output.c:				if ( check_height_index(height, c->heights, c->heights_count) )
print_output.c:					if( layer == c->heights[height].height_z )
print_output.c:						for ( dbh = 0; dbh < c->heights[height].dbhs_count+c->heights[height].dbhs_avail; ++dbh )
print_output.c:							if ( check_dbh_index(dbh, c->heights[height].dbhs, c->heights[height].dbhs_count) )
print_output.c:								for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count+c->heights[height].dbhs[dbh].ages_avail; ++age )
print_output.c:									if ( check_age_index(age, c->heights[height].dbhs[dbh].ages, c->heights[height].dbhs[dbh].ages_count)  )
print_output.c:										for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count+c->heights[height].dbhs[dbh].ages[age].species_avail; ++species )
print_output.c:											if ( check_species_index(species, c->heights[height].dbhs[dbh].ages[age].species, c->heights[height].dbhs[dbh].ages[age].species_count)  )
print_output.c:	logger(g_annual_log, "%d,%d,%d", c->x, c->y, c->years[year].year);
print_output.c:	if ( c->heights_count )
print_output.c:		for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:			//qsort(c->heights, c->heights_count, sizeof(height_t), sort_by_heights_desc);
print_output.c:			for ( height = 0; height <c->heights_count+c->heights_avail; ++height )
print_output.c:				if ( check_height_index(height, c->heights, c->heights_count) )
print_output.c:					if ( layer == c->heights[height].height_z )
print_output.c:						logger(g_annual_log,",%g", c->heights[height].value);
print_output.c:						for ( dbh = 0; dbh < c->heights[height].dbhs_count+c->heights[height].dbhs_avail; ++dbh )
print_output.c:							if ( check_dbh_index(dbh, c->heights[height].dbhs, c->heights[height].dbhs_count) )
print_output.c:								logger(g_annual_log,",%g", c->heights[height].dbhs[dbh].value);
print_output.c:								for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count+c->heights[height].dbhs[dbh].ages_avail; ++age )
print_output.c:									if ( check_age_index(age, c->heights[height].dbhs[dbh].ages, c->heights[height].dbhs[dbh].ages_count) )
print_output.c:										logger(g_annual_log,",%d", c->heights[height].dbhs[dbh].ages[age].value);
print_output.c:										for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count+c->heights[height].dbhs[dbh].ages[age].species_avail; ++species )
print_output.c:											if ( check_species_index(species, c->heights[height].dbhs[dbh].ages[age].species, c->heights[height].dbhs[dbh].ages[age].species_count) )
print_output.c:												s  = &c->heights[height].dbhs[dbh].ages[age].species[species];
print_output.c:												logger(g_annual_log,",%s", c->heights[height].dbhs[dbh].ages[age].species[species].name);
print_output.c:												logger(g_annual_log,",%c", sz_management[c->heights[height].dbhs[dbh].ages[age].species[species].management]);
print_output.c:			c->annual_gpp,
print_output.c:			c->annual_npp,
print_output.c:			c->annual_aut_resp,
print_output.c:			c->annual_et,
print_output.c:			c->annual_lh_flux,
print_output.c:			c->annual_soil_evapo,
print_output.c:			c->asw,
print_output.c:			c->annual_iwue,
print_output.c:			c->volume,
print_output.c:			c->cum_volume,
print_output.c:			c->annual_out_flow);
print_output.c:			c->years[year].yearly_mean.solar_rad     ,
print_output.c:			c->years[year].yearly_mean.tavg          ,
print_output.c:			c->years[year].yearly_mean.tmax          ,
print_output.c:			c->years[year].yearly_mean.tmin          ,
print_output.c:			c->years[year].yearly_mean.tday          ,
print_output.c:			c->years[year].yearly_mean.tnight        ,
print_output.c:			c->years[year].yearly_mean.vpd           ,
print_output.c:			c->years[year].yearly_mean.prcp          ,
print_output.c:			c->years[year].yearly_mean.tsoil         ,
print_output.c:			c->years[year].yearly_mean.rh_f          ,
print_output.c:			c->years[year].co2Conc);
print_output.c:	logger(g_daily_soil_log, "%d,%d,%d,%d,%d", c->x, c->y, c->years[year].year, month + 1, day + 1);
print_output.c:			c->leaf_litr1C,
print_output.c:			c->leaf_litr2C,
print_output.c:			c->leaf_litr3C,
print_output.c:			c->leaf_litr4C,
print_output.c:			c->froot_litr1C,
print_output.c:			c->froot_litr2C,
print_output.c:			c->froot_litr3C,
print_output.c:			c->froot_litr4C,
print_output.c:			c->litrC,
print_output.c:			c->litr1C,
print_output.c:			c->litr2C,
print_output.c:			c->litr3C,
print_output.c:			c->litr4C,
print_output.c:			c->soilC,
print_output.c:			c->soil1C,
print_output.c:			c->soil2C,
print_output.c:			c->soil3C,
print_output.c:			c->soil4C);
print_output.c:			c->leaf_litr1N,
print_output.c:			c->leaf_litr2N,
print_output.c:			c->leaf_litr3N,
print_output.c:			c->leaf_litr4N,
print_output.c:			c->froot_litr1N,
print_output.c:			c->froot_litr2N,
print_output.c:			c->froot_litr3N,
print_output.c:			c->froot_litr4N,
print_output.c:			c->litrN,
print_output.c:			c->litr1N,
print_output.c:			c->litr2N,
print_output.c:			c->litr3N,
print_output.c:			c->litr4N,
print_output.c:			c->soilN,
print_output.c:			c->soil1N,
print_output.c:			c->soil2N,
print_output.c:			c->soil3N,
print_output.c:			c->soil4N);
print_output.c:	if ( c->doy == ( IS_LEAP_YEAR( c->years[year].year ) ? 366 : 365 ) )
print_output.c:	logger (g_monthly_soil_log, "%d,%d,%d,%d", c->years[year].year, month +1 );
print_output.c:			c->leaf_litr1C,
print_output.c:			c->leaf_litr2C,
print_output.c:			c->leaf_litr3C,
print_output.c:			c->leaf_litr4C,
print_output.c:			c->froot_litr1C,
print_output.c:			c->froot_litr2C,
print_output.c:			c->froot_litr3C,
print_output.c:			c->froot_litr4C,
print_output.c:			c->litrC,
print_output.c:			c->litr1C,
print_output.c:			c->litr2C,
print_output.c:			c->litr3C,
print_output.c:			c->litr4C,
print_output.c:			c->soilC,
print_output.c:			c->soil1C,
print_output.c:			c->soil2C,
print_output.c:			c->soil3C,
print_output.c:			c->soil4C);
print_output.c:			c->leaf_litr1N,
print_output.c:			c->leaf_litr2N,
print_output.c:			c->leaf_litr3N,
print_output.c:			c->leaf_litr4N,
print_output.c:			c->froot_litr1N,
print_output.c:			c->froot_litr2N,
print_output.c:			c->froot_litr3N,
print_output.c:			c->froot_litr4N,
print_output.c:			c->litrN,
print_output.c:			c->litr1N,
print_output.c:			c->litr2N,
print_output.c:			c->litr3N,
print_output.c:			c->litr4N,
print_output.c:			c->soilN,
print_output.c:			c->soil1N,
print_output.c:			c->soil2N,
print_output.c:			c->soil3N,
print_output.c:			c->soil4N);
print_output.c:	if ( ( IS_LEAP_YEAR( c->years[year].year ) ? (MonthLength_Leap[11]) : (MonthLength[11] )) == c->doy )
print_output.c:	logger(g_annual_soil_log, "%d,%d,%d", c->x, c->y, c->years[year].year);
print_output.c:			c->leaf_litr1C,
print_output.c:			c->leaf_litr2C,
print_output.c:			c->leaf_litr3C,
print_output.c:			c->leaf_litr4C,
print_output.c:			c->froot_litr1C,
print_output.c:			c->froot_litr2C,
print_output.c:			c->froot_litr3C,
print_output.c:			c->froot_litr4C,
print_output.c:			c->litrC,
print_output.c:			c->litr1C,
print_output.c:			c->litr2C,
print_output.c:			c->litr3C,
print_output.c:			c->litr4C,
print_output.c:			c->soilC,
print_output.c:			c->soil1C,
print_output.c:			c->soil2C,
print_output.c:			c->soil3C,
print_output.c:			c->soil4C);
print_output.c:			c->leaf_litr1N,
print_output.c:			c->leaf_litr2N,
print_output.c:			c->leaf_litr3N,
print_output.c:			c->leaf_litr4N,
print_output.c:			c->froot_litr1N,
print_output.c:			c->froot_litr2N,
print_output.c:			c->froot_litr3N,
print_output.c:			c->froot_litr4N,
print_output.c:			c->litrN,
print_output.c:			c->litr1N,
print_output.c:			c->litr2N,
print_output.c:			c->litr3N,
print_output.c:			c->litr4N,
print_output.c:			c->soilN,
print_output.c:			c->soil1N,
print_output.c:			c->soil2N,
print_output.c:			c->soil3N,
print_output.c:			c->soil4N);
print_output.c://		if ( !c->CO2_modifier )
print_output.c:		for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:			for ( height = c->heights_count - 1; height >= 0 ; --height )
print_output.c:				if( layer == c->heights[height].height_z )
print_output.c:					for ( dbh = c->heights[height].dbhs_count - 1; dbh >= 0; --dbh )
print_output.c:						for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
print_output.c:							for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
print_output.c:							if ( c->heights[height].dbhs[dbh].ages[age].species_count > 1 ) {
print_output.c:						if ( c->heights[height].dbhs[dbh].ages_count > 1 ) {
print_output.c:					if ( c->heights[height].dbhs_count > 1 ) {
print_output.c:				if ( c->tree_layers[layer].layer_n_height_class > 1 ) {
print_output.c:			if ( c->tree_layers_count > 1 ) {
print_output.c:							if ( c->heights[height].dbhs[dbh].ages[age].species_count > 1 ) logger(g_daily_log,",*");
print_output.c:						if ( c->heights[height].dbhs[dbh].ages_count > 1 ) logger(g_daily_log,",**");
print_output.c:					if ( c->heights[height].dbhs_count > 1 ) logger(g_daily_log,",***");
print_output.c:				if ( c->tree_layers[layer].layer_n_height_class > 1 ) logger(g_daily_log,",****");
print_output.c:			if ( c->tree_layers_count > 1 ) logger(g_daily_log,",*****");
print_output.c:	logger(g_daily_log, "%d,%d,%d,%d,%d", c->x, c->y, c->years[year].year, month + 1, day + 1);
print_output.c:	for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:		qsort(c->heights, c->heights_count, sizeof(height_t), sort_by_heights_desc);
print_output.c:		for ( height = 0; height < c->heights_count; ++height )
print_output.c:			if( layer == c->heights[height].height_z )
print_output.c:				logger(g_daily_log,",%g", c->heights[height].value);
print_output.c:				for ( dbh = c->heights[height].dbhs_count - 1; dbh >= 0; --dbh )
print_output.c:					logger(g_daily_log,",%g", c->heights[height].dbhs[dbh].value);
print_output.c:					for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
print_output.c:						logger(g_daily_log,",%d", c->heights[height].dbhs[dbh].ages[age].value);
print_output.c:						for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
print_output.c:							s  = &c->heights[height].dbhs[dbh].ages[age].species[species];
print_output.c:							logger(g_daily_log,",%s", c->heights[height].dbhs[dbh].ages[age].species[species].name);
print_output.c:							logger(g_daily_log,",%c", sz_management[c->heights[height].dbhs[dbh].ages[age].species[species].management]);
print_output.c:						if ( c->heights[height].dbhs[dbh].ages[age].species_count > 1 ) {
print_output.c:					if ( c->heights[height].dbhs[dbh].ages_count > 1 ) {
print_output.c:				if ( c->heights[height].dbhs_count > 1 ) {
print_output.c:			if ( c->tree_layers[layer].layer_n_height_class > 1 ) {
print_output.c:		if ( c->tree_layers_count > 1 ) {
print_output.c:			c->daily_gpp,
print_output.c:			c->daily_npp,
print_output.c:			c->daily_aut_resp,
print_output.c:			c->daily_het_resp,
print_output.c:			c->daily_soil_resp,
print_output.c:			c->daily_r_eco,
print_output.c:			c->daily_nee,
print_output.c:			c->daily_nep,
print_output.c:			c->daily_et,
print_output.c:			c->daily_lh_flux,
print_output.c:			c->daily_soil_evapo,
print_output.c:			c->snow_pack,
print_output.c:			c->asw,
print_output.c:			c->soil_moist_ratio,
print_output.c:			c->daily_iwue,
print_output.c:			c->litrC,
print_output.c:			c->litr1C,
print_output.c:			c->litr2C,
print_output.c:			c->litr3C,
print_output.c:			c->litr4C,
print_output.c:			c->cwd_C,
print_output.c:			c->cwd_2C,
print_output.c:			c->cwd_3C,
print_output.c:			c->cwd_4C,
print_output.c:			c->soilC,
print_output.c:			c->soil1C,
print_output.c:			c->soil2C,
print_output.c:			c->soil3C,
print_output.c:			c->soil4C,
print_output.c:			c->litrN,
print_output.c:			c->litr1N,
print_output.c:			c->litr2N,
print_output.c:			c->litr3N,
print_output.c:			c->litr4N,
print_output.c:			c->cwd_N,
print_output.c:			c->cwd_2N,
print_output.c:			c->cwd_3N,
print_output.c:			c->cwd_4N,
print_output.c:			c->soilN,
print_output.c:			c->soil1N,
print_output.c:			c->soil2N,
print_output.c:			c->soil3N,
print_output.c:			c->soil4N,
print_output.c:			c->years[year].m[month].d[day].tsoil,
print_output.c:			c->years[year].m[month].d[day].daylength
print_output.c:		for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:			for ( height = c->heights_count - 1; height >= 0 ; --height )
print_output.c:				if( layer == c->heights[height].height_z )
print_output.c:					for ( dbh = c->heights[height].dbhs_count - 1; dbh >= 0; --dbh )
print_output.c:						for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
print_output.c:							for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
print_output.c:							if ( c->heights[height].dbhs[dbh].ages[age].species_count > 1 ) {
print_output.c:						if ( c->heights[height].dbhs[dbh].ages_count > 1 ) {
print_output.c:					if ( c->heights[height].dbhs_count > 1 ) {
print_output.c:				if ( c->tree_layers[layer].layer_n_height_class > 1 ) {
print_output.c:			if ( c->tree_layers_count > 1 ) {
print_output.c:		if( c->heights_count > 1 )
print_output.c:	logger ( g_monthly_log, "%d,%d,%d,%d", c->x, c->y, c->years[year].year, month +1 );
print_output.c:	for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:		for ( height = c->heights_count - 1; height >= 0 ; --height )
print_output.c:			if( layer == c->heights[height].height_z )
print_output.c:				logger(g_monthly_log,",%g", c->heights[height].value);
print_output.c:				for ( dbh = c->heights[height].dbhs_count - 1; dbh >= 0; --dbh )
print_output.c:					logger(g_monthly_log,",%g", c->heights[height].dbhs[dbh].value);
print_output.c:					for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
print_output.c:						logger(g_monthly_log,",%d", c->heights[height].dbhs[dbh].ages[age].value);
print_output.c:						for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
print_output.c:							s  = &c->heights[height].dbhs[dbh].ages[age].species[species];
print_output.c:							logger(g_monthly_log,",%s", c->heights[height].dbhs[dbh].ages[age].species[species].name);
print_output.c:							logger(g_monthly_log,",%c", sz_management[c->heights[height].dbhs[dbh].ages[age].species[species].management]);
print_output.c:						if ( c->heights[height].dbhs[dbh].ages[age].species_count > 1 ) {
print_output.c:					if ( c->heights[height].dbhs[dbh].ages_count > 1 ) {
print_output.c:				if ( c->heights[height].dbhs_count > 1 ) {
print_output.c:			if ( c->tree_layers[layer].layer_n_height_class > 1 ) {
print_output.c:		if ( c->tree_layers_count > 1 ) {
print_output.c:	if( c->heights_count > 1 )
print_output.c:				c->monthly_gpp,
print_output.c:				c->monthly_npp,
print_output.c:				c->monthly_aut_resp);
print_output.c:			c->monthly_et,
print_output.c:			c->monthly_lh_flux,
print_output.c:			c->asw,
print_output.c:			c->monthly_iwue);
print_output.c:		c->initial_tree_layers_count = c->tree_layers_count;
print_output.c:		c->initial_heights_count = c->heights_count;
print_output.c:		for ( height = c->heights_count - 1; height >= 0 ; --height )
print_output.c:			c->heights[height].initial_dbhs_count = c->heights[height].dbhs_count;
print_output.c:			for ( dbh = c->heights[height].dbhs_count - 1; dbh >= 0; --dbh )
print_output.c:				c->heights[height].dbhs[dbh].initial_ages_count = c->heights[height].dbhs[dbh].ages_count;
print_output.c:				for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
print_output.c:					c->heights[height].dbhs[dbh].ages[age].initial_species_count = c->heights[height].dbhs[dbh].ages[age].species_count;
print_output.c:		for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:			for ( height = c->heights_count - 1; height >= 0 ; --height )
print_output.c:				if( layer == c->heights[height].height_z )
print_output.c:					for ( dbh = c->heights[height].dbhs_count - 1; dbh >= 0; --dbh )
print_output.c:						for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
print_output.c:							for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
print_output.c:							if ( c->heights[height].dbhs[dbh].ages[age].species_count > 1 ) {
print_output.c:						if ( c->heights[height].dbhs[dbh].ages_count > 1 ) {
print_output.c:					if ( c->heights[height].dbhs_count > 1 ) {
print_output.c:				if ( c->tree_layers[layer].layer_n_height_class > 1 ) {
print_output.c:			if ( c->tree_layers_count > 1 ) {
print_output.c:	logger(g_annual_log, "%d,%d,%d", c->x, c->y, c->years[year].year);
print_output.c:	if ( c->heights_count )
print_output.c:		for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
print_output.c:			qsort(c->heights, c->heights_count, sizeof(height_t), sort_by_heights_desc);
print_output.c:			for ( height = 0; height < c->heights_count; ++height )
print_output.c:				if( layer == c->heights[height].height_z )
print_output.c:					logger(g_annual_log,",%g", c->heights[height].value);
print_output.c:					for ( dbh = c->heights[height].dbhs_count - 1; dbh >= 0; --dbh )
print_output.c:						logger(g_annual_log,",%g", c->heights[height].dbhs[dbh].value);
print_output.c:						// start from c->heights[height].dbhs[dbh].ages_count-1 ?
print_output.c:						for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
print_output.c:							logger(g_annual_log,",%d", c->heights[height].dbhs[dbh].ages[age].value);
print_output.c:							for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
print_output.c:								s  = &c->heights[height].dbhs[dbh].ages[age].species[species];
print_output.c:								logger(g_annual_log,",%s", c->heights[height].dbhs[dbh].ages[age].species[species].name);
print_output.c:								logger(g_annual_log,",%c", sz_management[c->heights[height].dbhs[dbh].ages[age].species[species].management]);
print_output.c:							if ( c->heights[height].dbhs[dbh].ages[age].species_count > 1 ) {
print_output.c:						if ( c->heights[height].dbhs[dbh].ages_count > 1 ) {
print_output.c:					if ( c->heights[height].dbhs_count > 1 ) {
print_output.c:				if ( c->tree_layers[layer].layer_n_height_class > 1 ) {
print_output.c:			if ( c->tree_layers_count > 1 )
print_output.c:			c->annual_gpp,
print_output.c:			c->annual_npp,
print_output.c:			c->annual_aut_resp,
print_output.c:			c->annual_het_resp,
print_output.c:			c->annual_soil_resp,
print_output.c:			c->annual_soil_respCO2,
print_output.c:			c->annual_r_eco,
print_output.c:			c->annual_nee,
print_output.c:			c->annual_nep,
print_output.c:			c->annual_et,
print_output.c:			c->annual_lh_flux,
print_output.c:			c->annual_soil_evapo,
print_output.c:			c->asw,
print_output.c:			c->annual_iwue,
print_output.c:			c->volume,
print_output.c:			c->cum_volume,
print_output.c:			c->annual_out_flow,
print_output.c:			c->litrC,
print_output.c:			c->litr1C,
print_output.c:			c->litr2C,
print_output.c:			c->litr3C,
print_output.c:			c->litr4C,
print_output.c:			c->cwd_C,
print_output.c:			c->cwd_2C,
print_output.c:			c->cwd_3C,
print_output.c:			c->cwd_4C,
print_output.c:			c->soilC,
print_output.c:			c->soil1C,
print_output.c:			c->soil2C,
print_output.c:			c->soil3C,
print_output.c:			c->soil4C,
print_output.c:			c->litrN,
print_output.c:			c->litr1N,
print_output.c:			c->litr2N,
print_output.c:			c->litr3N,
print_output.c:			c->litr4N,
print_output.c:			c->cwd_N,
print_output.c:			c->cwd_2N,
print_output.c:			c->cwd_3N,
print_output.c:			c->cwd_4N,
print_output.c:			c->soilN,
print_output.c:			c->soil1N,
print_output.c:			c->soil2N,
print_output.c:			c->soil3N,
print_output.c:			c->soil4N);
print_output.c:			c->years[year].yearly_mean.solar_rad     ,
print_output.c:			c->years[year].yearly_mean.tavg          ,
print_output.c:			c->years[year].yearly_mean.tmax          ,
print_output.c:			c->years[year].yearly_mean.tmin          ,
print_output.c:			c->years[year].yearly_mean.tday          ,
print_output.c:			c->years[year].yearly_mean.tnight        ,
print_output.c:			c->years[year].yearly_mean.vpd           ,
print_output.c:			c->years[year].yearly_mean.prcp          ,
print_output.c:			c->years[year].yearly_mean.tsoil         ,
print_output.c:			c->years[year].yearly_mean.rh_f          ,
print_output.c:			c->years[year].yearly_mean.asw           ,
print_output.c:			c->years[year].co2Conc);
print_output.c:	logger(g_daily_soil_log, "%d,%d,%d,%d,%d", c->x, c->y, c->years[year].year, month + 1, day + 1);
print_output.c:			c->leaf_litr1C,
print_output.c:			c->leaf_litr2C,
print_output.c:			c->leaf_litr3C,
print_output.c:			c->leaf_litr4C,
print_output.c:			c->froot_litr1C,
print_output.c:			c->froot_litr2C,
print_output.c:			c->froot_litr3C,
print_output.c:			c->froot_litr4C,
print_output.c:			c->litrC,
print_output.c:			c->litr1C,
print_output.c:			c->litr2C,
print_output.c:			c->litr3C,
print_output.c:			c->litr4C,
print_output.c:			c->soilC,
print_output.c:			c->soil1C,
print_output.c:			c->soil2C,
print_output.c:			c->soil3C,
print_output.c:			c->soil4C);
print_output.c:			c->leaf_litr1N,
print_output.c:			c->leaf_litr2N,
print_output.c:			c->leaf_litr3N,
print_output.c:			c->leaf_litr4N,
print_output.c:			c->froot_litr1N,
print_output.c:			c->froot_litr2N,
print_output.c:			c->froot_litr3N,
print_output.c:			c->froot_litr4N,
print_output.c:			c->litrN,
print_output.c:			c->litr1N,
print_output.c:			c->litr2N,
print_output.c:			c->litr3N,
print_output.c:			c->litr4N,
print_output.c:			c->soilN,
print_output.c:			c->soil1N,
print_output.c:			c->soil2N,
print_output.c:			c->soil3N,
print_output.c:			c->soil4N);
print_output.c:	logger (g_monthly_soil_log, "%d,%d,%d,%d", c->x, c->y, c->years[year].year, month +1 );
print_output.c:			c->leaf_litr1C,
print_output.c:			c->leaf_litr2C,
print_output.c:			c->leaf_litr3C,
print_output.c:			c->leaf_litr4C,
print_output.c:			c->froot_litr1C,
print_output.c:			c->froot_litr2C,
print_output.c:			c->froot_litr3C,
print_output.c:			c->froot_litr4C,
print_output.c:			c->litrC,
print_output.c:			c->litr1C,
print_output.c:			c->litr2C,
print_output.c:			c->litr3C,
print_output.c:			c->litr4C,
print_output.c:			c->soilC,
print_output.c:			c->soil1C,
print_output.c:			c->soil2C,
print_output.c:			c->soil3C,
print_output.c:			c->soil4C);
print_output.c:			c->leaf_litr1N,
print_output.c:			c->leaf_litr2N,
print_output.c:			c->leaf_litr3N,
print_output.c:			c->leaf_litr4N,
print_output.c:			c->froot_litr1N,
print_output.c:			c->froot_litr2N,
print_output.c:			c->froot_litr3N,
print_output.c:			c->froot_litr4N,
print_output.c:			c->litrN,
print_output.c:			c->litr1N,
print_output.c:			c->litr2N,
print_output.c:			c->litr3N,
print_output.c:			c->litr4N,
print_output.c:			c->soilN,
print_output.c:			c->soil1N,
print_output.c:			c->soil2N,
print_output.c:			c->soil3N,
print_output.c:			c->soil4N);
print_output.c:	logger(g_annual_soil_log, "%d,%d,%d", c->x, c->y, c->years[year].year);
print_output.c:			c->leaf_litr1C,
print_output.c:			c->leaf_litr2C,
print_output.c:			c->leaf_litr3C,
print_output.c:			c->leaf_litr4C,
print_output.c:			c->froot_litr1C,
print_output.c:			c->froot_litr2C,
print_output.c:			c->froot_litr3C,
print_output.c:			c->froot_litr4C,
print_output.c:			c->litrC,
print_output.c:			c->litr1C,
print_output.c:			c->litr2C,
print_output.c:			c->litr3C,
print_output.c:			c->litr4C,
print_output.c:			c->soilC,
print_output.c:			c->soil1C,
print_output.c:			c->soil2C,
print_output.c:			c->soil3C,
print_output.c:			c->soil4C);
print_output.c:			c->leaf_litr1N,
print_output.c:			c->leaf_litr2N,
print_output.c:			c->leaf_litr3N,
print_output.c:			c->leaf_litr4N,
print_output.c:			c->froot_litr1N,
print_output.c:			c->froot_litr2N,
print_output.c:			c->froot_litr3N,
print_output.c:			c->froot_litr4N,
print_output.c:			c->litrN,
print_output.c:			c->litr1N,
print_output.c:			c->litr2N,
print_output.c:			c->litr3N,
print_output.c:			c->litr4N,
print_output.c:			c->soilN,
print_output.c:			c->soil1N,
print_output.c:			c->soil2N,
print_output.c:			c->soil3N,
print_output.c:			c->soil4N);
regeneration.c:	//if ( ! c->heights[height].dbhs[dbh].ages ) return;
regeneration.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
remove_tree_class.c:	if ( height > c->heights_count ) {
remove_tree_class.c:	for ( i = 0; i < c->heights_count; ++i ) {
remove_tree_class.c:			height_free(&c->heights[i]);
remove_tree_class.c:		c->heights[y++] = c->heights[i];
remove_tree_class.c:	--c->heights_count;
remove_tree_class.c:	++c->heights_avail;
remove_tree_class.c:	if ( height > c->heights_count ) {
remove_tree_class.c:	if ( dbh > c->heights[height].dbhs_count ) {
remove_tree_class.c:	for ( i = 0; i < c->heights[height].dbhs_count; ++i ) {
remove_tree_class.c:			dbh_free(&c->heights[height].dbhs[i]);
remove_tree_class.c:		c->heights[height].dbhs[y++] = c->heights[height].dbhs[i];
remove_tree_class.c:	--c->heights[height].dbhs_count;
remove_tree_class.c:	++c->heights[height].dbhs_avail;
remove_tree_class.c:	if ( height > c->heights_count ) {
remove_tree_class.c:	if ( dbh > c->heights[height].dbhs_count ) {
remove_tree_class.c:	if ( age > c->heights[height].dbhs[dbh].ages_count ) {
remove_tree_class.c:	for ( i = 0; i < c->heights[height].dbhs[dbh].ages_count; ++i ) {
remove_tree_class.c:			age_free(&c->heights[height].dbhs[dbh].ages[i]);
remove_tree_class.c:		c->heights[height].dbhs[dbh].ages[y++] = c->heights[height].dbhs[dbh].ages[i];
remove_tree_class.c:	--c->heights[height].dbhs[dbh].ages_count;
remove_tree_class.c:	++c->heights[height].dbhs[dbh].ages_avail;
remove_tree_class.c:	if ( height > c->heights_count ) {
remove_tree_class.c:	if ( dbh > c->heights[height].dbhs_count ) {
remove_tree_class.c:	if ( age > c->heights[height].dbhs[dbh].ages_count ) {
remove_tree_class.c:	if ( species > c->heights[height].dbhs[dbh].ages[age].species_count ) {
remove_tree_class.c:	for ( i = 0; i < c->heights[height].dbhs[dbh].ages[age].species_count; ++i ) {
remove_tree_class.c:			species_free(&c->heights[height].dbhs[dbh].ages[age].species[i]);
remove_tree_class.c:		c->heights[height].dbhs[dbh].ages[age].species[y++] = c->heights[height].dbhs[dbh].ages[age].species[i];
remove_tree_class.c:	--c->heights[height].dbhs[dbh].ages[age].species_count;
remove_tree_class.c:	++c->heights[height].dbhs[dbh].ages[age].species_avail;
remove_tree_class.c:	if ( height > c->heights_count ) {
remove_tree_class.c:	if ( dbh > c->heights[height].dbhs_count ) {
remove_tree_class.c:	if ( age > c->heights[height].dbhs[dbh].ages_count ) {
remove_tree_class.c:	if ( species > c->heights[height].dbhs[dbh].ages[age].species_count ) {
remove_tree_class.c:	for ( i = 0; i < c->heights[height].dbhs[dbh].ages[age].species_count; ++i ) {
remove_tree_class.c:				c->heights[height].dbhs[dbh].ages[age].species[i].value[y] = 0.;
remove_tree_class.c:				c->heights[height].dbhs[dbh].ages[age].species[i].counter[y] = 0;
remove_tree_class.c:			//c->heights[height].dbhs[dbh].ages[age].species[i].management = 0;
remove_tree_class.c:			c->heights[height].dbhs[dbh].ages[age].species[i].phenology_phase = 0;
remove_tree_class.c:	if ( c->heights_count ) {
remove_tree_class.c:		if ( height > c->heights_count ) return 0;
remove_tree_class.c:		if ( c->heights[height].dbhs_count ) {
remove_tree_class.c:			if (  dbh > c->heights[height].dbhs_count ) return 0;
remove_tree_class.c:			if ( c->heights[height].dbhs[dbh].ages_count ) {
remove_tree_class.c:				if ( age > c->heights[height].dbhs[dbh].ages_count ) return 0;
remove_tree_class.c:				if ( c->heights[height].dbhs[dbh].ages[age].species_count ) {
remove_tree_class.c:					if ( species > c->heights[height].dbhs[dbh].ages[age].species_count ) return 0;
remove_tree_class.c:	if ( ! c->heights[height].dbhs[dbh].ages[age].species[species].counter[N_TREE]
remove_tree_class.c:		if ( 1 == c->heights[height].dbhs[dbh].ages_count ) {
remove_tree_class.c:			if ( c->heights[height].dbhs[dbh].ages[0].species_count <= 1 ) {
remove_tree_class.c:		if ( 1 == c->heights[height].dbhs_count ) {
remove_tree_class.c:			if ( ! c->heights[height].dbhs[0].ages_count
remove_tree_class.c:				|| ( (1 == c->heights[height].dbhs[0].ages_count)
remove_tree_class.c:					&& (c->heights[height].dbhs[0].ages[0].species_count <= 1) ) ) {
remove_tree_class.c:		if ( 1 == c->heights_count ) {
remove_tree_class.c:			if ( ! c->heights[0].dbhs_count 
remove_tree_class.c:				|| ( (1 == c->heights[0].dbhs_count) 
remove_tree_class.c:					&& (c->heights[0].dbhs[0].ages_count <= 1)
remove_tree_class.c:					&& (c->heights[0].dbhs[0].ages[0].species_count <= 1) )
remove_tree_class.c:		if ( ! c->heights[height].dbhs_count 
remove_tree_class.c:			|| ( (1 == c->heights[height].dbhs_count) 
remove_tree_class.c:				&& (c->heights[height].dbhs[0].ages_count <= 1)
remove_tree_class.c:				&& (c->heights[height].dbhs[0].ages[0].species_count <= 1) )
remove_tree_class.c:	if ( ! c->heights[height].dbhs[dbh].ages[age].species[species].counter[N_TREE]
snow.c:	incident_rad = (c->sw_rad_abs_snow * meteo_daily->daylength_sec) * SNOW_ABS * 0.001;
snow.c:	incident_rad = ( c->net_rad_abs_snow * meteo_daily->daylength_sec) * SNOW_ABS * 0.001 ;
snow.c:		if ( c->snow_pack > 0. )
snow.c:			c->daily_snow_melt = t_melt + r_melt;
snow.c:			if ( c->daily_snow_melt > c->snow_pack )
snow.c:				c->daily_snow_melt = c->snow_pack;
snow.c:		if ( c->snow_pack > 0. )
snow.c:			if ( r_sub > c->snow_pack )
snow.c:				r_sub              = c->snow_pack;
snow.c:				c->daily_snow_subl = r_sub;
snow.c:				if ( c->daily_snow_subl > c->snow_pack )
snow.c:					c->daily_snow_subl = c->snow_pack;
snow.c:				c->daily_snow_subl = 0.;
snow.c:	//if( c->snow_pack ) meteo_daily->tsoil = 0.0;
soil_carbon_balance.c:	c->daily_to_soil1C          = c->daily_litr1C_to_soil1C
soil_carbon_balance.c:			- ( c-> daily_soil1_het_resp + c->daily_soil1C_to_soil2C );
soil_carbon_balance.c:	c->soil1C                  += c->daily_to_soil1C;
soil_carbon_balance.c:	c->daily_to_soil2C          = ( c->daily_litr2C_to_soil2C + c->daily_soil1C_to_soil2C )
soil_carbon_balance.c:			- ( c-> daily_soil2_het_resp + c->daily_soil2C_to_soil3C );
soil_carbon_balance.c:	c->soil2C                  += c->daily_to_soil2C;
soil_carbon_balance.c:	c->daily_to_soil3C          = ( c->daily_litr4C_to_soil3C + c->daily_soil2C_to_soil3C )
soil_carbon_balance.c:			- ( c-> daily_soil3_het_resp + c->daily_soil3C_to_soil4C );
soil_carbon_balance.c:	c->soil3C                  += c->daily_to_soil3C;
soil_carbon_balance.c:	c->daily_to_soil4C          = ( c->daily_soil3C_to_soil4C )
soil_carbon_balance.c:			- ( c-> daily_soil4_het_resp );
soil_carbon_balance.c:	c->soil4C                  += c->daily_to_soil4C;
soil_carbon_balance.c:	c->daily_to_soilC           = c->daily_litr1C_to_soil1C +
soil_carbon_balance.c:			c->daily_litr2C_to_soil2C +
soil_carbon_balance.c:			c->daily_litr4C_to_soil3C ;
soil_carbon_balance.c:	c->soilC                    = c->soil1C + c->soil2C + c->soil3C + c->soil4C;
soil_evaporation.c:	if ( ! c->snow_pack )
soil_evaporation.c:		net_rad = c->sw_rad_abs_soil;
soil_evaporation.c:		net_rad = c->net_rad_abs_soil;
soil_evaporation.c:			c->days_since_rain  = 0;
soil_evaporation.c:			c->daily_soil_evapo = 0.6 * pot_soil_evap;
soil_evaporation.c:			++c->days_since_rain;
soil_evaporation.c:			ratio = 0.3 / pow ( c->days_since_rain , 2. );
soil_evaporation.c:			c->daily_soil_evapo = ratio * pot_soil_evap ;
soil_evaporation.c:			if ( meteo_daily->rain > c->daily_soil_evapo )
soil_evaporation.c:				c->daily_soil_evapo = meteo_daily->rain;
soil_evaporation.c:				--c->days_since_rain;
soil_evaporation.c:		c->daily_soil_evapo = c->daily_snow_subl;
soil_evaporation.c:	c->monthly_soil_evapo += c->daily_soil_evapo;
soil_evaporation.c:	c->annual_soil_evapo += c->daily_soil_evapo;
soil_evaporation.c:	c->daily_soil_evapo_watt       = c->daily_soil_evapo * meteo_daily->lh_vap_soil / 86400.;
soil_evaporation.c:	c->daily_soil_lh_flux          = c->daily_soil_evapo_watt;
soil_evaporation.c:	if( ! c->snow_pack )
soil_evaporation.c:		c->daily_soil_sh_flux = meteo_daily->rho_air * CP * ( ( tairK - tsoilK ) / rhr );
soil_evaporation.c:		c->daily_soil_sensible_heat_flux = meteo_daily->rho_air * CP * ((tairK-tsnowK)/rhr);
soil_evaporation.c:		c->daily_soil_sh_flux = 0.;
soil_evaporation.c:		c->soil_moist_ratio = c->asw / c->max_asw_fc;
soil_evaporation.c:		c->daily_soil_evapo = ( PotEvap * EVAPOCOEFF * c->soil_moist_ratio * ( 1. - cc ) ) + c->daily_snow_subl;
soil_evaporation.c:		c->daily_soil_evapo = 0.;
soil_evaporation.c:	c->monthly_soil_evapo += c->daily_soil_evapo;
soil_evaporation.c:	c->annual_soil_evapo += c->daily_soil_evapo;
soil_evaporation.c:	c->daily_soil_evapo_watt = c->daily_soil_evapo * meteo_daily->lh_vap_soil / 86400.;
soil_model.c:	logger (g_debug_log, "number of soil layers = %d\n", c->soil_layers_count);
soil_model.c:	CHECK_CONDITION( c->soil_layers_count, !=, g_settings->number_of_soil_layer );
soil_model.c:	for ( soil_layer = c->soil_layers_count -1 ; soil_layer >= 0; -- soil_layer )
soil_model.c:		if ( soil_layer == c->soil_layers_count -1 )
soil_model.c:			c->daily_to_soilN += meteo_daily->Ndeposition;
soil_model.c:			if ( c->snow_pack )
soil_model.c:			c->daily_irrigation = 0.;
soil_model.c:								c->daily_irrigation = g_settings->irrigations[i].amount;
soil_model_check_balance.c:	out     = c->par_refl_soil + c->par_refl_snow;
soil_model_check_balance.c:	store   = c->apar_soil + c->apar_snow ;
soil_model_check_balance.c:		error_log("DOY = %d\n", c->doy);
soil_model_check_balance.c:		error_log("c->par_refl_soil = %g molPAR/m2/day\n",c->par_refl_soil);
soil_model_check_balance.c:		error_log("c->par_refl_snow = %g molPAR/m2/day\n",c->par_refl_snow);
soil_model_check_balance.c:		error_log("c->par_for_soil = %g molPAR/m2/day\n", c->apar_soil);
soil_model_check_balance.c:		error_log("c->par_for_snow = %g molPAR/m2/day\n", c->apar_snow);
soil_model_check_balance.c:	out     = c->sw_rad_refl_soil + c->sw_rad_refl_snow;
soil_model_check_balance.c:	store   = c->sw_rad_abs_soil + c->sw_rad_abs_snow;
soil_model_check_balance.c:		error_log("DOY = %d\n", c->doy);
soil_model_check_balance.c:		error_log("c->sw_rad_refl_soil = %g W/m2\n",c->sw_rad_refl_soil);
soil_model_check_balance.c:		error_log("c->sw_rad_refl_snow = %g W/m2\n",c->sw_rad_refl_snow);
soil_model_check_balance.c:		error_log("c->net_sw_rad_for_soil = %g W/m2\n", c->sw_rad_abs_soil);
soil_model_check_balance.c:	in      = c->daily_to_soilC;
soil_model_check_balance.c:	out     = c->daily_soil_het_resp;
soil_model_check_balance.c:	store   = c->daily_to_soil1C +
soil_model_check_balance.c:			c->daily_to_soil2C +
soil_model_check_balance.c:			c->daily_to_soil3C +
soil_model_check_balance.c:			c->daily_to_soil4C ;
soil_model_check_balance.c:		error_log("DOY = %d\n", c->doy);
soil_model_check_balance.c:		error_log("daily_to_soilC       = %g gC/m2/day\n", c->daily_to_soilC);
soil_model_check_balance.c:		error_log("daily_het_resp       = %g gC/m2/day\n",c->daily_het_resp);
soil_model_check_balance.c:		error_log("daily_to_soil1C      = %g gC/m2/day\n", c->daily_to_soil1C);
soil_model_check_balance.c:		error_log("daily_to_soil2C      = %g gC/m2/day\n", c->daily_to_soil2C);
soil_model_check_balance.c:		error_log("daily_to_soil3C      = %g gC/m2/day\n", c->daily_to_soil3C);
soil_model_check_balance.c:		error_log("daily_to_soil4C      = %g gC/m2/day\n", c->daily_to_soil4C);
soil_model_check_balance.c:	c->soil_carbon_in    = c->daily_to_soilC;
soil_model_check_balance.c:	c->soil_carbon_out   = c->daily_soil_het_resp;
soil_model_check_balance.c:	c->soil_carbon_store = c->soil1C +
soil_model_check_balance.c:			c->soil2C +
soil_model_check_balance.c:			c->soil3C +
soil_model_check_balance.c:			c->soil4C;
soil_model_check_balance.c:	c->soil_carbon_balance = c->soil_carbon_in - c->soil_carbon_out - ( c->soil_carbon_store - c->soil_carbon_old_store );
soil_model_check_balance.c:	if ( ( fabs( c->soil_carbon_balance ) > eps ) && ( c->dos > 1 ) )
soil_model_check_balance.c:		error_log("DOS                    = %d\n", c->dos);
soil_model_check_balance.c:		error_log("in                     = %f gC/m2/day\n", c->soil_carbon_in);
soil_model_check_balance.c:		error_log("daily_to_soilC         = %f gC/m2\n",     c->daily_to_soilC);
soil_model_check_balance.c:		error_log("out                    = %f gC/m2/day\n", c->soil_carbon_out);
soil_model_check_balance.c:		error_log("daily_soil_het_resp   = %f gC/m2/day\n", c->daily_soil_het_resp);
soil_model_check_balance.c:		error_log("carbon in              = %f gC/m2/day\n", c->soil_carbon_in);
soil_model_check_balance.c:		error_log("carbon out             = %f gC/m2/day\n", c->soil_carbon_out);
soil_model_check_balance.c:		error_log("delta carbon store     = %f gC/m2/day\n", c->soil_carbon_store - c->soil_carbon_old_store);
soil_model_check_balance.c:		error_log("carbon_balance         = %f gC/m2/day\n", c->soil_carbon_balance);
soil_model_check_balance.c:		CHECK_CONDITION(fabs( c->soil_carbon_balance ), > , eps);
soil_model_check_balance.c:		c->soil_carbon_old_store = c->soil_carbon_store;
soil_model_check_balance.c:	in      = c->daily_to_soilN /* + N deposition and so on...*/;
soil_model_check_balance.c:	out     = c->NPP_gN_demand /* + N leaching and so on...*/;
soil_model_check_balance.c:	store   = c->daily_to_soil1N +
soil_model_check_balance.c:			c->daily_to_soil2N +
soil_model_check_balance.c:			c->daily_to_soil3N +
soil_model_check_balance.c:			c->daily_to_soil4N ;
soil_model_check_balance.c:		error_log("DOY = %d\n", c->doy);
soil_model_check_balance.c:		error_log("daily_to_soilN       = %g gN/m2/day\n", c->daily_to_soilN);
soil_model_check_balance.c:		error_log("NPP_gN_demand        = %g gN/m2/day\n", c->NPP_gN_demand);
soil_model_check_balance.c:		error_log("daily_to_soil1N      = %g gN/m2/day\n", c->daily_to_soil1N);
soil_model_check_balance.c:		error_log("daily_to_soil2N      = %g gN/m2/day\n", c->daily_to_soil2N);
soil_model_check_balance.c:		error_log("daily_to_soil3N      = %g gN/m2/day\n", c->daily_to_soil3N);
soil_model_check_balance.c:		error_log("daily_to_soil4N      = %g gN/m2/day\n", c->daily_to_soil4N);
soil_model_check_balance.c:	c->soil_nitrogen_in    = c->daily_to_soilN /* + N deposition and so on...*/;
soil_model_check_balance.c:	c->soil_nitrogen_out   = c->NPP_gN_demand /* + N leaching and so on...*/;
soil_model_check_balance.c:	c->soil_nitrogen_store = c->soil1N +
soil_model_check_balance.c:			c->soil2N +
soil_model_check_balance.c:			c->soil3N +
soil_model_check_balance.c:			c->soil4N;
soil_model_check_balance.c:	c->soil_nitrogen_balance = c->soil_nitrogen_in - c->soil_nitrogen_out - ( c->soil_nitrogen_store - c->soil_nitrogen_old_store );
soil_model_check_balance.c:	if ( ( fabs( c->soil_nitrogen_balance ) > eps ) && ( c->dos > 1 ) )
soil_model_check_balance.c:		error_log("DOS                    = %d\n", c->dos);
soil_model_check_balance.c:		error_log("in                     = %f gN/m2/day\n", c->soil_nitrogen_in);
soil_model_check_balance.c:		error_log("daily_to_soilN         = %f gN/m2\n",     c->daily_to_soilN);
soil_model_check_balance.c:		error_log("out                    = %f gN/m2/day\n", c->soil_carbon_out);
soil_model_check_balance.c:		error_log("NPP_gN_demand          = %g gN/m2/day\n", c->NPP_gN_demand);
soil_model_check_balance.c:		error_log("nitrogen in            = %f gN/m2/day\n", c->soil_nitrogen_in);
soil_model_check_balance.c:		error_log("nitrogen out           = %f gN/m2/day\n", c->soil_nitrogen_out);
soil_model_check_balance.c:		error_log("delta nitrogen store   = %f gN/m2/day\n", c->soil_nitrogen_store - c->soil_nitrogen_old_store);
soil_model_check_balance.c:		error_log("nitrogen balance       = %f gN/m2/day\n", c->soil_nitrogen_balance);
soil_model_check_balance.c:		CHECK_CONDITION(fabs( c->soil_carbon_balance ), > , eps);
soil_model_check_balance.c:		c->soil_nitrogen_old_store = c->soil_nitrogen_store;
soil_model_check_balance.c:	in      = meteo_daily->rain + c->daily_snow_melt + c->daily_irrigation;
soil_model_check_balance.c:	out     = c->daily_soil_evapo + c->daily_out_flow + c->daily_canopy_transp;
soil_model_check_balance.c:	store   = c->asw;
soil_model_check_balance.c:	balance = in - out - ( store - c->old_water_store );
soil_model_check_balance.c:	if ( ( fabs( balance ) > eps ) && ( c->dos > 1 ) )
soil_model_check_balance.c:		error_log("DOS = %d\n", c->dos);
soil_model_check_balance.c:		error_log("x,y = %d,%d\n", c->x, c->y);
soil_model_check_balance.c:		error_log("c->daily_snow_melt = %g\n", c->daily_snow_melt);
soil_model_check_balance.c:		error_log("c->soil_evaporation = %g\n", c->daily_soil_evapo);
soil_model_check_balance.c:		error_log("c->daily_out_flow = %g\n", c->daily_out_flow);
soil_model_check_balance.c:		error_log("c->daily_canopy_transp = %g\n", c->daily_canopy_transp);
soil_model_check_balance.c:		error_log("c->asw = %g\n", c->asw);
soil_model_check_balance.c:		error_log("delta soil water balance = %g\n", store - c->old_water_store );
soil_model_check_balance.c:		c->old_water_store = store;
Binary file soil_model_check_balance.o matches
Binary file soil_model.o matches
soil_nitrogen_balance.c:	c->daily_to_soil1N          = c->daily_litr1N_to_soil1N
soil_nitrogen_balance.c:			- ( c->daily_soil1N_to_soil2N );
soil_nitrogen_balance.c:	c->soil1N                  += c->daily_to_soil1N;
soil_nitrogen_balance.c:	c->daily_to_soil2N          = ( c->daily_litr2N_to_soil2N + c->daily_soil1N_to_soil2N )
soil_nitrogen_balance.c:			- (  c->daily_soil2N_to_soil3N );
soil_nitrogen_balance.c:	c->soil2N                  += c->daily_to_soil2N;
soil_nitrogen_balance.c:	c->daily_to_soil3N          = ( c->daily_litr4N_to_soil3N + c->daily_soil2N_to_soil3N )
soil_nitrogen_balance.c:			- ( c->daily_soil3N_to_soil4N );
soil_nitrogen_balance.c:	c->soil3N                  += c->daily_to_soil3N;
soil_nitrogen_balance.c:	c->daily_to_soil4N          = ( c->daily_soil3N_to_soil4N )
soil_nitrogen_balance.c:			- ( c->daily_soil4N_to_soilMinN);
soil_nitrogen_balance.c:	c->soil4N                  += c->daily_to_soil4N;
soil_nitrogen_balance.c:	c->daily_to_soilN           = c->daily_litr1N_to_soil1N +
soil_nitrogen_balance.c:			c->daily_litr2N_to_soil2N +
soil_nitrogen_balance.c:			c->daily_litr4N_to_soil3N ;
soil_nitrogen_balance.c:	c->soilN                    = c->soil1N + c->soil2N + c->soil3N + c->soil4N;
soil_nitrogen_balance.c:	c->soilN -= c->NPP_gN_demand;
soil_radiation_sw_band.c:	if ( !c->snow_pack )
soil_radiation_sw_band.c:	if ( ! c->snow_pack )
soil_radiation_sw_band.c:		c->par_refl_soil     = meteo_daily->par             * Light_refl_rad_soil_frac;
soil_radiation_sw_band.c:		c->sw_rad_refl_soil  = meteo_daily->sw_downward_W   * Light_refl_rad_soil_frac;
soil_radiation_sw_band.c:		c->net_rad_refl_soil = meteo_daily->Net_rad_threePG * Light_refl_rad_soil_frac;
soil_radiation_sw_band.c:		logger(g_debug_log,"par_refl_soil         = %g molPAR/m^2/day\n", c->par_refl_soil);
soil_radiation_sw_band.c:		logger(g_debug_log,"sw_rad_for_soil_refl  = %g W/m2\n", c->sw_rad_refl_soil);
soil_radiation_sw_band.c:		logger(g_debug_log,"net_rad_for_soil_refl = %g W/m2\n", c->net_rad_refl_soil);
soil_radiation_sw_band.c:		c->par_refl_snow     = meteo_daily->par             * Light_refl_rad_snow_frac;
soil_radiation_sw_band.c:		c->sw_rad_refl_snow  = meteo_daily->sw_downward_W   * Light_refl_rad_snow_frac;
soil_radiation_sw_band.c:		c->net_rad_refl_snow = meteo_daily->Net_rad_threePG * Light_refl_rad_snow_frac;
soil_radiation_sw_band.c:		logger(g_debug_log,"par_refl_snow         = %g molPAR/m^2/day\n", c->par_refl_snow);
soil_radiation_sw_band.c:		logger(g_debug_log,"sw_rad_for_snow_refl  = %g W/m2\n", c->sw_rad_refl_snow);
soil_radiation_sw_band.c:		logger(g_debug_log,"net_rad_for_snow_refl = %g W/m2\n", c->net_rad_refl_snow);
soil_radiation_sw_band.c:	if ( ! c->snow_pack )
soil_radiation_sw_band.c:		c->apar_soil        = meteo_daily->par             - c->par_refl_soil;
soil_radiation_sw_band.c:		c->sw_rad_abs_soil  = meteo_daily->sw_downward_W   - c->sw_rad_refl_soil;
soil_radiation_sw_band.c:		c->net_rad_abs_soil = meteo_daily->Net_rad_threePG - c->net_rad_refl_soil;
soil_radiation_sw_band.c:		c->apar_snow        = meteo_daily->par             - c->par_refl_snow;
soil_radiation_sw_band.c:		c->sw_rad_abs_snow  = meteo_daily->sw_downward_W   - c->sw_rad_refl_snow;
soil_radiation_sw_band.c:		c->net_rad_abs_snow = meteo_daily->Net_rad_threePG - c->net_rad_refl_snow;
soil_respiration.c:	c->daily_soil_resp         = (c->daily_froot_aut_resp + c->daily_croot_aut_resp) + c->daily_het_resp;
soil_respiration.c:	c->daily_soil_respCO2      = (c->daily_soil_resp / GC_MOL) * GCO2_MOL;
soil_respiration.c:	c->monthly_soil_resp      += c->daily_soil_resp;
soil_respiration.c:	c->monthly_soil_respCO2   += c->daily_soil_respCO2;
soil_respiration.c:	c->annual_soil_resp       += c->daily_soil_resp;
soil_respiration.c:	c->annual_soil_respCO2    += c->daily_soil_respCO2;
soil_respiration.c:	max_psi = c->psi_sat;
soil_respiration.c:	if (c->psi < min_psi)
soil_respiration.c:	else if (c->psi > max_psi)
soil_respiration.c:		water_scalar = log ( min_psi / c->psi ) / log ( min_psi / max_psi );
soil_respiration.c:	water_scalar = c->soil_moist_ratio;
soil_respiration.c:	/* soil respiration from umol m-2 sec-1 to gC m-2 d-1 */
soil_respiration.c:	c->daily_soil_resp      = daily_soil_resp_mol *  GC_MOL  / 1e6 * 86400;
soil_respiration.c:	logger (g_debug_log, "c->daily_soil_resp = %g gC/m^2/day\n", c->daily_soil_resp);
soil_respiration.c:	/* soil respiration flux from umol m-2 sec-1 to gCO2 m-2 day-1 */
soil_respiration.c:	c->daily_soil_respCO2   = daily_soil_resp_mol * GCO2_MOL / 1e6 * 86400;
soil_respiration.c:	logger (g_debug_log, "c->daily_soil_respCO2 = %g gCO2/m^2/day\n", c->daily_soil_respCO2);
soil_respiration.c:	c->monthly_soil_resp      += c->daily_soil_resp;
soil_respiration.c:	c->monthly_soil_respCO2   += c->daily_soil_respCO2;
soil_respiration.c:	c->annual_soil_resp       += c->daily_soil_resp;
soil_respiration.c:	c->annual_soil_respCO2    += c->daily_soil_respCO2;
soil_respiration.c:	Rref  = a_lai + b_lai * c->max_lai_proj;
soil_respiration.c:	E0 = a + b * c->soil_moist_ratio;
soil_respiration.c:	water_scalar = c->soil_moist_ratio / ( Rswc + c->soil_moist_ratio );
soil_respiration.c:	/* soil respiration from umol m-2 sec-1 to gC m-2 d-1 */
soil_respiration.c:	c->daily_soil_resp      = daily_soil_resp_mol *  GC_MOL  / 1e6 * 86400.;
soil_respiration.c:	logger (g_debug_log, "c->daily_soil_resp = %g gC/m^2/day\n", c->daily_soil_resp);
soil_respiration.c:	/* soil respiration flux from umol m-2 sec-1 to gCO2 m-2 day-1 */
soil_respiration.c:	c->daily_soil_respCO2   = daily_soil_resp_mol * GCO2_MOL / 1e6 * 86400.;
soil_respiration.c:	logger (g_debug_log, "c->daily_soil_respCO2 = %g gCO2/m^2/day\n", c->daily_soil_respCO2);
soil_respiration.c:	c->monthly_soil_resp      += c->daily_soil_resp;
soil_respiration.c:	c->monthly_soil_respCO2   += c->daily_soil_respCO2;
soil_respiration.c:	c->annual_soil_resp       += c->daily_soil_resp;
soil_respiration.c:	c->annual_soil_respCO2    += c->daily_soil_respCO2;
Binary file soil_respiration.o matches
soil_water_balance.c:	if ( c->daily_irrigation > 0. )
soil_water_balance.c:	c->asw += ( ( c->daily_irrigation + meteo_daily->rain + c->daily_snow_melt ) - ( c->daily_canopy_transp + c->daily_soil_evapo ) );
soil_water_balance.c:	logger(g_debug_log, "asw = %g\n", c->asw);
soil_water_balance.c:	logger(g_debug_log, "daily_snow_melt = %g\n", c->daily_snow_melt);
soil_water_balance.c:	logger(g_debug_log, "daily_canopy_transp = %g\n", c->daily_canopy_transp);
soil_water_balance.c:	logger(g_debug_log, "daily_soil_evapo = %g\n", c->daily_soil_evapo);
soil_water_balance.c:	c->snow_pack += meteo_daily->snow - (c->daily_snow_melt + c->daily_snow_subl);
soil_water_balance.c:	logger(g_debug_log, "snow_pack = %g\n", c->snow_pack);
soil_water_balance.c:	if ( c->asw > c->max_asw_fc)
soil_water_balance.c:		c->daily_out_flow = c->asw - c->max_asw_fc;
soil_water_balance.c:		c->asw            = c->max_asw_fc;
soil_water_balance.c:		logger(g_debug_log, "daily_out_flow = %g\n", c->daily_out_flow);
soil_water_balance.c:		logger(g_debug_log, "asw = %g\n", c->asw);
soil_water_balance.c:		logger(g_debug_log, "max_asw_fc = %g\n", c->max_asw_fc);
soil_water_balance.c:		c->monthly_out_flow += c->daily_out_flow;
soil_water_balance.c:		c->annual_out_flow  += c->daily_out_flow;
soil_water_balance.c:	if ( c->asw < ZERO )
soil_water_balance.c:		c->asw                  += c->daily_soil_evapo;
soil_water_balance.c:		c->asw                  += c->daily_canopy_transp;
soil_water_balance.c:		c->daily_soil_evapo      = 0.;
soil_water_balance.c:		c->daily_canopy_transp   = 0.;
soil_water_balance.c:	c->soil_moist_ratio = c->asw / c->max_asw_fc;
soil_water_balance.c:	//		c->soil_moist_ratio = meteo_daily->swc ;
soil_water_balance.c:	logger(g_debug_log, "Soil moisture = %g %\n", c->soil_moist_ratio );
soil_water_balance.c:	CHECK_CONDITION(c->asw,       <, ZERO);
soil_water_balance.c:	CHECK_CONDITION(c->snow_pack, <, ZERO);
soil_water_balance.c:	if ( c-> doy == 1 ) c->cum_asw = 0.;
soil_water_balance.c:	c->cum_asw += c->asw;
soil_water_balance.c:	if ( c->doy == ( IS_LEAP_YEAR ( c->years[year].year ) ? 364 : 365  ) )
soil_water_balance.c:		c->years[year].yearly_mean.asw = c->cum_asw / c->doy;
soil_water_balance.c:		c->cum_asw = 0.;
Binary file soil_water_balance.o matches
structure.c:	ret = alloc_struct((void **)&c->tree_layers, &c->tree_layers_count, &c->t_layers_avail, sizeof(tree_layer_t));
structure.c:		c->tree_layers[c->tree_layers_count-1] = t_layer;
structure.c:	assert( ! c->tree_layers_count );
structure.c:	for ( height = 0; height < c->heights_count; ++height )
structure.c:		assert( ! c->heights[height].height_z );
structure.c:	for ( height = 0; height < c->heights_count ; ++height )
structure.c:		for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
structure.c:			for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
structure.c:				for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
structure.c:					light_tol = (int)c->heights[height].dbhs[dbh].ages[age].species[species].value[LIGHT_TOL];
structure.c:						c->heights[height].dbhs[dbh].ages[age].species[species].value[MAX_LAYER_COVER] = 1.1;
structure.c:						c->heights[height].dbhs[dbh].ages[age].species[species].value[MAX_LAYER_COVER] = 1.0;
structure.c:						c->heights[height].dbhs[dbh].ages[age].species[species].value[MAX_LAYER_COVER] = 0.9;
structure.c:						c->heights[height].dbhs[dbh].ages[age].species[species].value[MAX_LAYER_COVER] = 0.8;
structure.c:	qsort(c->heights, c->heights_count, sizeof(height_t), sort_by_heights_asc);
structure.c:	if (c->heights_count > 1)
structure.c:		for ( height = 0; height < c->heights_count-1; ++height )
structure.c:			logger(g_debug_log, "*value %f*\n\n", c->heights[height].value);
structure.c:			if ( (c->heights[height+1].value - c->heights[height].value) > g_settings->tree_layer_limit )
structure.c:	logger(g_debug_log, "*c->t_layers_count %d*\n\n", c->tree_layers_count);
structure.c:	for ( height = c->heights_count -1 ; height >= 0; --height )
structure.c:		//if ( (c->heights[height].value - c->heights[height-1].value) > g_settings->tree_layer_limit )
structure.c:		if ( height && (c->heights[height].value - c->heights[height-1].value) > g_settings->tree_layer_limit )
structure.c:			c->heights[height].height_z = zeta_count;
structure.c:			c->heights[height].height_z = zeta_count;
structure.c:	CHECK_CONDITION(c->tree_layers_count, <, 1);
structure.c:	CHECK_CONDITION(c->tree_layers_count, >, c->heights_count);
structure.c:	for ( layer = c->tree_layers_count - 1; layer >= 0 ; --layer )
structure.c:		for ( height = c->heights_count -1; height >= 0 ; --height )
structure.c:			if( layer == c->heights[height].height_z )
structure.c:				++c->tree_layers[layer].layer_n_height_class;
structure.c:		logger(g_debug_log, "-layer %d height class(es) = %d\n", layer, c->tree_layers[layer].layer_n_height_class);
structure.c:		CHECK_CONDITION(c->tree_layers[layer].layer_n_height_class, <, ZERO);
structure.c:	for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
structure.c:		for ( height = 0; height < c->heights_count ; ++height )
structure.c:			if( layer == c->heights[height].height_z )
structure.c:				for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
structure.c:					for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
structure.c:						for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
structure.c:							if( layer == c->heights[height].height_z )
structure.c:								s = &c->heights[height].dbhs[dbh].ages[age].species[species];
structure.c:								c->tree_layers[layer].layer_n_trees += s->counter[N_TREE];
structure.c:		logger(g_debug_log, "-layer %d number of trees = %d\n", layer, c->tree_layers[layer].layer_n_trees);
structure.c:	for (layer = c->tree_layers_count - 1; layer >= 0; layer --)
structure.c:		c->tree_layers[layer].layer_density = c->tree_layers[layer].layer_n_trees / g_settings->sizeCell;
structure.c:		logger(g_debug_log, "-layer %d density = %f layer\n", layer, c->tree_layers[layer].layer_density);
structure.c:	for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
structure.c:		qsort (c->heights, c->heights_count, sizeof (height_t), sort_by_heights_desc);
structure.c:		for ( height = 0; height < c->heights_count ; ++height )
structure.c:			if( layer == c->heights[height].height_z )
structure.c:				for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
structure.c:					for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
structure.c:						for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
structure.c:	for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
structure.c:		for ( height = 0; height < c->heights_count ; ++height )
structure.c:			if( layer == c->heights[height].height_z )
structure.c:				for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
structure.c:					for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
structure.c:						for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
structure.c:	for (layer = c->tree_layers_count - 1; layer >= 0; --layer)
structure.c:		for ( height = 0; height < c->heights_count ; ++height )
structure.c:			if( layer == c->heights[height].height_z )
structure.c:				for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
structure.c:					for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
structure.c:						for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
structure.c:							s = &c->heights[height].dbhs[dbh].ages[age].species[species];
structure.c:							c->tree_layers[layer].layer_cover_proj += s->value[CANOPY_COVER_PROJ];
structure.c:							logger(g_debug_log, "layer %d cover_proj         = %f\n", layer, c->tree_layers[layer].layer_cover_proj);
structure.c:	for (layer = c->tree_layers_count - 1; layer >= 0; --layer)
structure.c:		qsort (c->heights, c->heights_count, sizeof (height_t), sort_by_heights_asc);
structure.c:		for ( height = 0; height < c->heights_count ; ++height )
structure.c:			if( layer == c->heights[height].height_z )
structure.c:				for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
structure.c:					for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
structure.c:						for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
structure.c:							s = &c->heights[height].dbhs[dbh].ages[age].species[species];
structure.c:							if ( ( ( c->years[year].year >= g_settings->year_start_management ) && ( MANAGEMENT_VAR == g_settings->management ) )
structure.c:	c->n_trees = 0;
structure.c:	for ( height = 0; height < c->heights_count ; ++height )
structure.c:		for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
structure.c:			for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
structure.c:				for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
structure.c:					s = &c->heights[height].dbhs[dbh].ages[age].species[species];
structure.c:					c->n_trees += s->counter[N_TREE];
structure.c:	logger(g_debug_log,"n_trees = %d \n", c->n_trees);
structure.c:	for ( layer = c->tree_layers_count - 1; layer >= 0; --layer )
structure.c:		c->cell_cover_proj += c->tree_layers[layer].layer_cover_proj;
structure.c:		if ( c->cell_cover_proj > 1 + eps )
structure.c:			c->cell_cover_proj = 1;
structure.c:	c->bare_soil_cover = 1. - c->cell_cover_proj;
structure.c:	logger(g_debug_log, "-Number of trees cell level    = %d trees/cell\n", c->n_trees);
structure.c:	logger(g_debug_log, "-Canopy cover at cell level    = %f %%\n", c->cell_cover_proj * 100.);
structure.c:	logger(g_debug_log, "-Bare soil cover at cell level = %f %%\n", c->bare_soil_cover * 100.);
structure.c:	for (layer = c->tree_layers_count - 1; layer >= 0; --layer)
structure.c:		l = &c->tree_layers[layer];
structure.c:		for ( height = 0; height < c->heights_count ; ++height )
structure.c:			if ( layer == c->heights[height].height_z )
structure.c:				h = &c->heights[height];
structure.c:	for (layer = c->tree_layers_count - 1; layer >= 0; --layer)
structure.c:		l = &c->tree_layers[layer];
structure.c:		logger(g_debug_log, "layers count = %d\n", c->tree_layers_count);
structure.c:			logger(g_debug_log, "-Layer %d minus layer %d = %f\n", layer, layer - 1, c->tree_layers[layer].layer_avg_tree_height - c->tree_layers[layer-1].layer_avg_tree_height);
structure.c:			l->layer_tree_height_modifier = 0.5 * ( 1. + pow ( 2. , ( - c->tree_layers[layer-1].layer_avg_tree_height / c->tree_layers[layer].layer_avg_tree_height ) ) -
structure.c:					( pow ( 2. , ( - c->tree_layers[layer].layer_avg_tree_height / c->tree_layers[layer-1].layer_avg_tree_height ) ) ) );
structure.c:			c->tree_layers[layer-1].layer_tree_height_modifier = 1. - l->layer_tree_height_modifier;
structure.c:			logger(g_debug_log, "-Layer %d light vertical modifier = %f\n", layer - 1, c->tree_layers[layer-1].layer_tree_height_modifier);
structure.c:		if( c->tree_layers_count == 1 )
structure.c:	qsort ( c->heights, c->heights_count, sizeof (height_t), sort_by_heights_desc );
structure.c:	for ( height = 0; height < c->heights_count-1; ++height )
structure.c:		for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
structure.c:			for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
structure.c:				for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
structure.c:					if ( c->heights_count > 1 && c->heights[height+1].dbhs[dbh].ages[age].species[species].value[LAI_PROJ] )
structure.c:						c->heights[height].dbhs[dbh].ages[age].species[species].value[F_LIGHT_VERT] = 0.5 * ( 1. + pow ( 2. , ( - c->heights[height+1].value / c->heights[height].value ) ) -
structure.c:								( pow ( 2. , ( - c->heights[height].value / c->heights[height+1].value ) ) ) );
structure.c:						c->heights[height+1].dbhs[dbh].ages[age].species[species].value[F_LIGHT_VERT] = 1 - c->heights[height].dbhs[dbh].ages[age].species[species].value[F_LIGHT_VERT];
structure.c:						logger(g_debug_log, "-%s light vertical modifier = %f\n", c->heights[height].dbhs[dbh].ages[age].species[species].name, c->heights[height].dbhs[dbh].ages[age].species[species].value[F_LIGHT_VERT]);
structure.c:						logger(g_debug_log, "-%s light vertical modifier = %f\n", c->heights[height+1].dbhs[dbh].ages[age].species[species].name, c->heights[height+1].dbhs[dbh].ages[age].species[species].value[F_LIGHT_VERT]);
structure.c:						c->heights[height].dbhs[dbh].ages[age].species[species].value[F_LIGHT_VERT] = 1.;
structure.c:						logger(g_debug_log, "-Only one Height light vertical modifier = %f\n", c->heights[height].dbhs[dbh].ages[age].species[species].value[F_LIGHT_VERT]);
structure.c:	for (layer = c->tree_layers_count - 1; layer >= 0; --layer)
structure.c:		l = &c->tree_layers[layer];
structure.c:		for ( height = 0; height < c->heights_count ; ++height )
structure.c:			if ( layer == c->heights[height].height_z )
structure.c:				h = &c->heights[height];
structure.c:				for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
structure.c:					for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
structure.c:						for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
structure.c:							s = &c->heights[height].dbhs[dbh].ages[age].species[species];
structure.c:								//if ( layer == c->heights[height].height_z ) s->value[DAILY_CANOPY_COVER_EXP] *= l->layer_tree_height_modifier ;
structure.c:								c->tree_layers[layer].daily_layer_cover_proj += s->value[DAILY_CANOPY_COVER_PROJ];
structure.c:								//c->tree_layers[layer].daily_layer_cover_exp  += s->value[DAILY_CANOPY_COVER_EXP];
structure.c://	for (layer = c->tree_layers_count - 1; layer >= 0; --layer)
structure.c://		l = &c->tree_layers[layer];
structure.c://		for ( height = 0; height < c->heights_count ; ++height )
structure.c://			if ( layer == c->heights[height].height_z )
structure.c://				h = &c->heights[height];
structure.c://				for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
structure.c://					for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
structure.c://						for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
structure.c://								s = &c->heights[height].dbhs[dbh].ages[age].species[species];
structure.c:	for ( height = 0; height < c->heights_count ; ++height )
structure.c:		for ( dbh = 0; dbh < c->heights[height].dbhs_count; ++dbh )
structure.c:			for ( age = 0; age < c->heights[height].dbhs[dbh].ages_count ; ++age )
structure.c:				for ( species = 0; species < c->heights[height].dbhs[dbh].ages[age].species_count; ++species )
structure.c:					s = &c->heights[height].dbhs[dbh].ages[age].species[species];
Binary file structure.o matches
tree_model.c:	if ( ( ! day && ! month && year ) && ( ! c->harvesting ) )
tree_model.c:	qsort ( c->heights, c->heights_count, sizeof (height_t), sort_by_heights_desc );
tree_model.c:	for ( layer = c->tree_layers_count -1 ; layer >= 0; --layer )
tree_model.c:		for ( height = 0; height <  c->heights_count; ++height )
tree_model.c:			c->cell_heights_count ++;
tree_model.c:							if ( ( g_soil_settings->values[SOIL_LAT]    > 0. && c->doy == 1 )  ||
tree_model.c:									( g_soil_settings->values[SOIL_LAT] < 0. && c->doy == 180 ) )
tree_model.c:							if ( c->doy == ( IS_LEAP_YEAR ( c->years[year].year ) ? 366 : 365) )
tree_model.c:								if ( c->years[year].year > g_settings->year_start_management && g_settings->management != MANAGEMENT_VAR )
tree_model.c:								if ( c->doy == ( IS_LEAP_YEAR ( c->years[year].year ) ? 366 : 365) )
tree_model_check_balance.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
tree_model_check_balance.c:		error_log("DOY         = %d\n", c->doy);
tree_model_check_balance.c:		error_log("DOY             = %d\n", c->doy);
tree_model_check_balance.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
tree_model_check_balance.c:		error_log("DOY            = %d\n",           c->doy);
tree_model_check_balance.c:	if ( fabs( balance ) > eps  && c->doy != 1)
tree_model_check_balance.c:		error_log("DOY               = %d\n",             c->doy);
tree_model_check_balance.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
tree_model_check_balance.c:	if ( ( fabs( s->value[TREEC_BALANCE] ) > eps ) && s->counter[DOS] > 1 && c->doy != 1 )
tree_model_check_balance.c:		error_log("DOY                  = %d\n",             c->doy);
tree_model_check_balance.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
tree_model_check_balance.c:		error_log("DOY                   = %d\n",             c->doy);
tree_model_check_balance.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
tree_model_check_balance.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
Binary file tree_model.o matches
turnover.c:	s->value[DAILY_SAPWOOD_TURNOVER] = effective_sapwood_turnover / ( IS_LEAP_YEAR ( c->years[year].year ) ? 366 : 365 );
turnover.c:	s->value[DAILY_LIVEWOOD_TURNOVER] = effective_livewood_turnover / ( IS_LEAP_YEAR ( c->years[year].year ) ? 366 : 365 );
turnover.c:	s->value[DAILY_LIVEWOOD_TURNOVER] = effective_livewood_turnover / ( IS_LEAP_YEAR ( c->years[year].year ) ? 366 : 365 );
utility.c:	c->cell_cover_proj =                0.;
utility.c:	//c->n_trees =                        0;
utility.c:	c->cell_heights_count =             0;
utility.c:	c->apar =                           0.;
utility.c:	c->apar_soil =                      0.;
utility.c:	c->apar_snow =                      0.;
utility.c:	c->par_transm =                     0.;
utility.c:	c->par_refl =                       0.;
utility.c:	c->par_refl_soil =                  0.;
utility.c:	c->par_refl_snow =                  0.;
utility.c:	c->sw_rad_refl =                    0.;
utility.c:	c->sw_rad_refl_soil =               0.;
utility.c:	c->sw_rad_refl_snow =               0.;
utility.c:	c->sw_rad_abs =                     0.;
utility.c:	c->sw_rad_abs_soil =                0.;
utility.c:	c->sw_rad_abs_snow =                0.;
utility.c:	c->net_rad_refl =                   0.;
utility.c:	c->net_rad_refl_soil =              0.;
utility.c:	c->net_rad_refl_snow =              0.;
utility.c:	c->net_rad_abs =                    0.;
utility.c:	c->net_rad_abs_soil =               0.;
utility.c:	c->net_rad_abs_snow =               0.;
utility.c:	c->canopy_temp_k =                  0.;
utility.c:	c->daily_gpp =                      0.;
utility.c:	c->daily_ass =                      0.;
utility.c:	c->daily_gpp_tC =                   0.;
utility.c:	c->daily_npp =                      0.;
utility.c:	c->daily_npp_tC =                   0.;
utility.c:	c->daily_npp_tDM =                  0.;
utility.c:	c->daily_wue =                      0.;
utility.c:	c->daily_iwue =                     0.;
utility.c:	c->daily_leaf_maint_resp =          0.;
utility.c:	c->daily_stem_maint_resp =          0.;
utility.c:	c->daily_froot_maint_resp =         0.;
utility.c:	c->daily_branch_maint_resp =        0.;
utility.c:	c->daily_maint_resp =               0.;
utility.c:	c->daily_croot_maint_resp=          0.;
utility.c:	c->daily_leaf_growth_resp =         0.;
utility.c:	c->daily_stem_growth_resp =         0.;
utility.c:	c->daily_froot_growth_resp =        0.;
utility.c:	c->daily_branch_growth_resp =       0.;
utility.c:	c->daily_croot_growth_resp =        0.;
utility.c:	c->daily_growth_resp =              0.;
utility.c:	c->daily_aut_resp =                 0.;
utility.c:	c->daily_aut_resp_tC =              0.;
utility.c:	c->daily_leaf_aut_resp =            0.;
utility.c:	c->daily_stem_aut_resp =            0.;
utility.c:	c->daily_branch_aut_resp =          0.;
utility.c:	c->daily_froot_aut_resp =           0.;
utility.c:	c->daily_croot_aut_resp =           0.;
utility.c:	c->daily_leaf_carbon =              0.;
utility.c:	c->daily_stem_carbon =              0.;
utility.c:	c->daily_froot_carbon =             0.;
utility.c:	c->daily_croot_carbon =             0.;
utility.c:	c->daily_branch_carbon =            0.;
utility.c:	c->daily_reserve_carbon =           0.;
utility.c:	c->daily_fruit_carbon =             0.;
utility.c:	c->daily_leaf_nitrogen =            0.;
utility.c:	c->daily_stem_nitrogen =            0.;
utility.c:	c->daily_froot_nitrogen =           0.;
utility.c:	c->daily_croot_nitrogen =           0.;
utility.c:	c->daily_root_nitrogen =            0.;
utility.c:	c->daily_branch_nitrogen =          0.;
utility.c:	c->daily_reserve_nitrogen =         0.;
utility.c:	c->daily_fruit_nitrogen =           0.;
utility.c:	c->daily_to_litrC =                 0.;
utility.c:	c->daily_to_litr1C =                0.;
utility.c:	c->daily_to_litr2C =                0.;
utility.c:	c->daily_to_litr3C =                0.;
utility.c:	c->daily_to_litr4C =                0.;
utility.c:	c->daily_leaf_to_litrC =            0.;
utility.c:	c->daily_leaf_to_litr1C =           0.;
utility.c:	c->daily_leaf_to_litr2C =           0.;
utility.c:	c->daily_leaf_to_litr3C =           0.;
utility.c:	c->daily_leaf_to_litr4C =           0.;
utility.c:	c->daily_froot_to_litrC =           0.;
utility.c:	c->daily_froot_to_litr1C =          0.;
utility.c:	c->daily_froot_to_litr2C =          0.;
utility.c:	c->daily_froot_to_litr3C =          0.;
utility.c:	c->daily_froot_to_litr4C =          0.;
utility.c:	c->daily_cwd_to_litrC =             0.;
utility.c:	c->daily_cwd_to_litr2C =            0.;
utility.c:	c->daily_cwd_to_litr3C =            0.;
utility.c:	c->daily_cwd_to_litr4C =            0.;
utility.c:	c->daily_to_soil1C =                0.;
utility.c:	c->daily_to_soil2C =                0.;
utility.c:	c->daily_to_soil3C =                0.;
utility.c:	c->daily_to_soil4C =                0.;
utility.c:	c->daily_to_soilC =                 0.;
utility.c:	c->daily_litr_het_resp =            0.;
utility.c:	c->daily_litr1_het_resp =           0.;
utility.c:	c->daily_litr2_het_resp =           0.;
utility.c:	c->daily_litr4_het_resp =           0.;
utility.c:	c->daily_soil_het_resp =            0.;
utility.c:	c->daily_soil1_het_resp =           0.;
utility.c:	c->daily_soil2_het_resp =           0.;
utility.c:	c->daily_soil3_het_resp =           0.;
utility.c:	c->daily_soil4_het_resp =           0.;
utility.c:	c->daily_to_litrN =                 0.;
utility.c:	c->daily_to_litr1N =                0.;
utility.c:	c->daily_to_litr2N =                0.;
utility.c:	c->daily_to_litr3N =                0.;
utility.c:	c->daily_to_litr4N =                0.;
utility.c:	c->daily_leaf_to_litrN =            0.;
utility.c:	c->daily_leaf_to_litr1N =           0.;
utility.c:	c->daily_leaf_to_litr2N =           0.;
utility.c:	c->daily_leaf_to_litr3N =           0.;
utility.c:	c->daily_leaf_to_litr4N =           0.;
utility.c:	c->daily_froot_to_litrN =           0.;
utility.c:	c->daily_froot_to_litr1N =          0.;
utility.c:	c->daily_froot_to_litr2N =          0.;
utility.c:	c->daily_froot_to_litr3N =          0.;
utility.c:	c->daily_froot_to_litr4N =          0.;
utility.c:	c->daily_cwd_to_litrN =             0.;
utility.c:	c->daily_cwd_to_litr2N =            0.;
utility.c:	c->daily_cwd_to_litr3N =            0.;
utility.c:	c->daily_cwd_to_litr4N =            0.;
utility.c:	c->daily_to_soil1N =                0.;
utility.c:	c->daily_to_soil2N =                0.;
utility.c:	c->daily_to_soil3N =                0.;
utility.c:	c->daily_to_soil4N =                0.;
utility.c:	c->daily_to_soilN =                 0.;
utility.c:	c->daily_snow_melt =                0.;
utility.c:	c->daily_snow_subl =                0.;
utility.c:	c->daily_out_flow =                 0.;
utility.c:	c->daily_canopy_transp =            0.;
utility.c:	c->daily_canopy_rain_int =          0.;
utility.c:	c->daily_canopy_snow_int =          0.;
utility.c:	c->daily_canopy_evapo =             0.;
utility.c:	c->daily_canopy_transp_watt =       0.;
utility.c:	c->daily_canopy_et_watt =           0.;
utility.c:	c->daily_soil_evapo =               0.;
utility.c:	c->daily_soil_evapo_watt =          0.;
utility.c:	c->daily_canopy_et =                0.;
utility.c:	c->daily_et =                       0.;
utility.c:	c->daily_canopy_sh_flux =           0.;
utility.c:	c->daily_soil_lh_flux =             0.;
utility.c:	c->daily_lh_flux =                  0.;
utility.c:	c->daily_sh_flux =                  0.;
utility.c:	c->daily_soil_resp =                0.;
utility.c:	c->daily_soil_respCO2 =             0.;
utility.c:	c->daily_r_eco =                    0.;
utility.c:	c->daily_het_resp =                 0.;
utility.c:	c->daily_nee =                      0.;
utility.c:	c->daily_nep =                      0.;
utility.c:	c->monthly_gpp =                    0.;
utility.c:	c->monthly_ass =                    0.;
utility.c:	c->monthly_gpp_tC =                 0.;
utility.c:	c->monthly_npp =                    0.;
utility.c:	c->monthly_npp_tC =                 0.;
utility.c:	c->monthly_npp_tDM =                0.;
utility.c:	c->monthly_aut_resp =               0.;
utility.c:	c->monthly_aut_resp_tC =            0.;
utility.c:	c->monthly_maint_resp =             0.;
utility.c:	c->monthly_growth_resp =            0.;
utility.c:	c->monthly_r_eco =                  0.;
utility.c:	c->monthly_het_resp =               0.;
utility.c:	c->monthly_gpp =                    0.;
utility.c:	c->monthly_C_flux =                 0.;
utility.c:	c->monthly_nee =                    0.;
utility.c:	c->monthly_tot_w_flux =             0.;
utility.c:	c->monthly_canopy_rain_int =        0.;
utility.c:	c->monthly_canopy_transp =          0.;
utility.c:	c->monthly_canopy_evapo =           0.;
utility.c:	c->monthly_canopy_et =              0.;
utility.c:	c->monthly_soil_evapo =             0.;
utility.c:	c->monthly_et =                     0.;
utility.c:	c->monthly_lh_flux =                0.;
utility.c:	c->monthly_sh_flux =                0.;
utility.c:	c->monthly_out_flow =               0.;
utility.c:	c->monthly_soil_resp =              0.;
utility.c:	c->monthly_soil_respCO2 =           0.;
utility.c:	c->monthly_r_eco =                  0.;
utility.c:	c->monthly_het_resp =               0.;
utility.c:	c->monthly_nee =                    0.;
utility.c:	c->monthly_nep =                    0.;
utility.c:	for ( height = c->heights_count -1 ; height >= 0; --height )
utility.c:		c->heights[height].height_z = 0;
utility.c:	c->cell_cover_proj =                0;
utility.c:	c->doy =                            0;
utility.c:	c->annual_gpp =                     0.;
utility.c:	c->annual_ass =                     0.;
utility.c:	c->annual_gpp_tC =                  0.;
utility.c:	c->annual_npp =                     0.;
utility.c:	c->annual_npp_tC =                  0.;
utility.c:	c->annual_npp_tDM =                 0.;
utility.c:	c->annual_aut_resp =                0.;
utility.c:	c->annual_aut_resp_tC =             0.;
utility.c:	c->annual_maint_resp =              0.;
utility.c:	c->annual_growth_resp =             0.;
utility.c:	c->annual_r_eco =                   0.;
utility.c:	c->annual_het_resp =                0.;
utility.c:	c->annual_canopy_rain_int =         0.;
utility.c:	c->annual_canopy_transp =           0.;
utility.c:	c->annual_canopy_evapo =            0.;
utility.c:	c->annual_canopy_et =               0.;
utility.c:	c->annual_soil_evapo =              0.;
utility.c:	c->annual_et =                      0.;
utility.c:	c->annual_lh_flux =                 0.;
utility.c:	c->annual_sh_flux =                 0.;
utility.c:	c->basal_area =                     0.;
utility.c:	c->agb =                            0.;
utility.c:	c->bgb =                            0.;
utility.c:	c->volume =                         0.;
utility.c:	c->yearly_C_to_wood =               0.;
utility.c:	//c->dead_tree =                    0;
utility.c:	c->annual_soil_evapo =              0.;
utility.c:	c->annual_out_flow =                0.;
utility.c:	c->annual_soil_resp =               0.;
utility.c:	c->annual_soil_respCO2 =            0.;
utility.c:	c->annual_r_eco =                   0.;
utility.c:	c->annual_het_resp =                0.;
utility.c:	c->annual_nee =                     0.;
utility.c:	c->annual_nep =                     0.;
utility.c:	for ( layer = c->tree_layers_count -1 ; layer >= 0; --layer )
utility.c:		l = &c->tree_layers[layer];
utility.c:	//	for ( layer = c->t_layers_count -1 ; layer >= 0; --layer )
utility.c:	if ( c->tree_layers_count )
utility.c:		free(c->tree_layers);
utility.c:		c->tree_layers =       NULL;
utility.c:		c->tree_layers_count =    0;
utility.c:	for ( layer = c->tree_layers_count -1 ; layer >= 0; --layer )
utility.c:		l = &c->tree_layers[layer];
utility.c:	for ( height = c->heights_count - 1; height >= 0; height--)
utility.c:		h = &c->heights[height];
utility.c:	for ( height = c->heights_count - 1; height >= 0; height-- )
utility.c:		h = &c->heights[height];
utility.c:	for ( height = c->heights_count - 1; height >= 0; height-- )
utility.c:		h = &c->heights[height];
wue.c:	s = &c->heights[height].dbhs[dbh].ages[age].species[species];
wue.c:	if ( ( IS_LEAP_YEAR ( c->years[year].year ) ? ( MonthLength_Leap[month] ) : ( MonthLength[month] ) ) == c->doy )
wue.c:	if ( c->doy == ( IS_LEAP_YEAR( c->years[year].year ) ? 366 : 365) )
wue.c:	if ( ( IS_LEAP_YEAR ( c->years[year].year ) ? ( MonthLength_Leap[month] ) : ( MonthLength[month] ) ) == c->doy )
wue.c:	if ( c->doy == ( IS_LEAP_YEAR( c->years[year].year ) ? 366 : 365) )
wue.c:	if( c->daily_ass > 0 && c->daily_et > 0.0 )
wue.c:		c->daily_iwue = c->daily_ass / c->daily_et;
wue.c:		c->daily_iwue = 0.0;
wue.c:	if ( ( IS_LEAP_YEAR( c->years[year].year ) ? (MonthLength_Leap[month] ) : (MonthLength[month] )) == c->doy )
wue.c:		if( c->monthly_ass > 0 && c->monthly_et > 0.0 )
wue.c:			c->monthly_iwue = c->monthly_ass / c->monthly_et;
wue.c:			c->monthly_iwue = 0.0;
wue.c:	if ( c->doy == ( IS_LEAP_YEAR( c->years[year].year ) ? 366 : 365) )
wue.c:		if( c->annual_ass > 0 && c->annual_et > 0.0 )
wue.c:			c->annual_iwue = c->annual_ass / c->annual_et;
wue.c:			c->annual_iwue = 0.0;

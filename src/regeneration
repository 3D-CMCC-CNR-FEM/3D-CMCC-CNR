allometry.c:	logger(g_debug_log,"\n*CROWN ALLOMETRY for %s *\n", s->name);
allometry.c:	old_crown_proj = s->value[CROWN_AREA_PROJ];
allometry.c:	s->value[CROWN_DIAMETER] = d->value * s->value[DBHDC_EFF];
allometry.c:	logger(g_debug_log, "-Crown Projected Diameter = %f m\n", s->value[CROWN_DIAMETER]);
allometry.c:	s->value[CROWN_RADIUS] = s->value[CROWN_DIAMETER] / 2.;
allometry.c:	logger(g_debug_log, "-Crown Projected Radius   = %f m\n", s->value[CROWN_RADIUS]);
allometry.c:	s->value[CROWN_AREA_PROJ] = Pi  * pow (s->value[CROWN_RADIUS], 2 );
allometry.c:	logger(g_debug_log, "-Crown Projected Area     = %f m2\n", s->value[CROWN_AREA_PROJ]);
allometry.c:	if ( s->counter[YOS] && ( old_crown_proj > s->value[CROWN_AREA_PROJ] ) )
allometry.c:		self_pruning ( c, height, dbh, age, species, old_crown_proj, s->value[CROWN_AREA_PROJ] );
allometry.c:	s->value[CROWN_HEIGHT] = s->value[CROWN_A] * pow(h->value, s->value[CROWN_B]);
allometry.c:	logger(g_debug_log, "-Crown Height             = %f m\n", s->value[CROWN_HEIGHT]);
allometry.c:	if ( s->value[CROWN_HEIGHT] > h->value )
allometry.c:		s->value[CROWN_HEIGHT] = h->value;
allometry.c:	CHECK_CONDITION(s->value[CROWN_HEIGHT], >, h->value);
allometry.c:	/* cast s->value[CROWN_FORM_FACTOR] to integer */
allometry.c:	crown_form_factor = (int)s->value[CROWN_FORM_FACTOR];
allometry.c:		//s->value[CROWN_AREA]     = ( 2. * s->value[CROWN_AREA]) + (2 * Pi * s->value[CROWN_RADIUS] * s->value[CROWN_HEIGHT]);
allometry.c:                s->value[CROWN_AREA]     = ( 2. * s->value[CROWN_AREA_PROJ]) + (2 * Pi * s->value[CROWN_RADIUS] * s->value[CROWN_HEIGHT]);
allometry.c:		s->value[CROWN_VOLUME]   = s->value[CROWN_AREA_PROJ] * s->value[CROWN_HEIGHT];
allometry.c:		s->value[CROWN_AREA]     = s->value[CROWN_AREA_PROJ] + (Pi * s->value[CROWN_RADIUS] * (sqrt(pow(s->value[CROWN_RADIUS],2.) + pow(s->value[CROWN_HEIGHT],2.))));
allometry.c:		s->value[CROWN_VOLUME]   = (s->value[CROWN_AREA_PROJ] * s->value[CROWN_HEIGHT])/3.;
allometry.c:		s->value[CROWN_AREA]     = ( s->value[CROWN_AREA_PROJ] * 4 );
allometry.c:		s->value[CROWN_VOLUME]   = 4. / 3. * Pi * pow (s->value[CROWN_RADIUS],3.);
allometry.c:		c_diameter = s->value[CROWN_DIAMETER] / 2.;
allometry.c:		c_height   = s->value[CROWN_HEIGHT]   / 2.;
allometry.c:		s->value[CROWN_AREA]     = 2. * Pi * ( pow(c_diameter, 2.) + ( c_diameter * c_height ) * ( ce / sin(ce) ));
allometry.c:		s->value[CROWN_VOLUME]   = ( 4. / 3. ) * Pi * pow ( c_diameter , 2. ) * c_height;
allometry.c:		c_diameter = s->value[CROWN_DIAMETER] / 2.;
allometry.c:		c_height   = s->value[CROWN_HEIGHT]   / 2.;
allometry.c:		s->value[CROWN_AREA]     = 2. * Pi * ( (pow(c_height, 2.) / sin(ce)) * log ((1. + sin(ce))/(cos(ce))) );
allometry.c:		s->value[CROWN_VOLUME]   = ( 4. / 3. ) * Pi * pow ( c_diameter , 2. ) * c_height;
allometry.c:	//s->value[CROWN_AREA_EXP] = s->value[CROWN_AREA] / 4 ;
allometry.c:	logger(g_debug_log, "-Crown Area               = %f m2\n", s->value[CROWN_AREA]);
allometry.c:	//logger(g_debug_log, "-Crown Area (exp)         = %f m2\n", s->value[CROWN_AREA_EXP]);
allometry.c:	logger(g_debug_log, "-Crown Volume             = %f m3\n", s->value[CROWN_VOLUME]);
allometry.c:	//s->value[CROWN_DENSITY] = (s->value[ALL_LAI_PROJ] / (double)s->counter[N_TREE]) / s->value[CROWN_AREA_EXP];
allometry.c:	//logger(g_debug_log, "-Crown Density = %f 1/m-1\n", s->value[CROWN_DENSITY]);
allometry.c:					s->value[MASS_DENSITY] = s->value[RHO1] + (s->value[RHO0] - s->value[RHO1]) * exp(-LN2 * ((double)a->value / s->value[TRHO]));
allometry.c:					logger(g_debug_log, "-Mass Density = %f (tDM/m3)\n", s->value[MASS_DENSITY]);
allometry.c:						s->value[STEMCONST] = pow (e, -1.6381);
allometry.c:						s->value[STEMCONST] = pow (e, -3.51 + 1.27 * s->value[MASS_DENSITY]);
allometry.c:					logger(g_debug_log, "-Stem const = %f\n", s->value[STEMCONST]);
aut_respiration.c:	if (  ARE_FLOATS_EQUAL(g_settings->Tbase_resp, 0.) )
aut_respiration.c:		Q10_temp = g_settings->Tbase_resp;
aut_respiration.c:	if ( g_settings->Prog_Aut_Resp )
aut_respiration.c:		//if ( g_settings->Resp_accl )
aut_respiration.c:		leaf_N          = (s->value[LEAF_N]            * 1e6 / g_settings->sizeCell);
aut_respiration.c:		leaf_sun_N      = (s->value[LEAF_SUN_N]        * 1e6 / g_settings->sizeCell);
aut_respiration.c:		leaf_shade_N    = (s->value[LEAF_SHADE_N]      * 1e6 / g_settings->sizeCell);
aut_respiration.c:		froot_N         = (s->value[FROOT_N]           * 1e6 / g_settings->sizeCell);
aut_respiration.c:		stem_N          = (s->value[STEM_LIVEWOOD_N]   * 1e6 / g_settings->sizeCell);
aut_respiration.c:		croot_N         = (s->value[CROOT_LIVEWOOD_N]  * 1e6 / g_settings->sizeCell);
aut_respiration.c:		branch_N        = (s->value[BRANCH_LIVEWOOD_N] * 1e6 / g_settings->sizeCell);
aut_respiration.c:		leaf_N          = ((s->value[LEAF_C]                       / leaf_CN)   * 1e6 / g_settings->sizeCell);
aut_respiration.c:		leaf_sun_N      = ((s->value[LEAF_SUN_C]                   / leaf_CN)   * 1e6 / g_settings->sizeCell);
aut_respiration.c:		leaf_shade_N    = ((s->value[LEAF_SHADE_C]                 / leaf_CN)   * 1e6 / g_settings->sizeCell);
aut_respiration.c:		froot_N         = ((s->value[FROOT_C]                      / froot_CN)  * 1e6 / g_settings->sizeCell);
aut_respiration.c:		stem_N          = ((s->value[STEM_C]   * live_stemC_frac   / stem_CN)   * 1e6 / g_settings->sizeCell);
aut_respiration.c:		croot_N         = ((s->value[CROOT_C]  * live_crootC_frac  / croot_CN)  * 1e6 / g_settings->sizeCell);
aut_respiration.c:		branch_N        = ((s->value[BRANCH_C] * live_branchC_frac / branch_CN) * 1e6 / g_settings->sizeCell);
aut_respiration.c:		leaf_N          = (s->value[LEAF_C]            / leaf_CN)   * 1e6 / g_settings->sizeCell;
aut_respiration.c:		leaf_sun_N      = (s->value[LEAF_SUN_C]        / leaf_CN)   * 1e6 / g_settings->sizeCell;
aut_respiration.c:		leaf_shade_N    = (s->value[LEAF_SHADE_C]      / leaf_CN)   * 1e6 / g_settings->sizeCell;
aut_respiration.c:		froot_N         = (s->value[FROOT_C]           / froot_CN)  * 1e6 / g_settings->sizeCell;
aut_respiration.c:		stem_N          = (s->value[STEM_LIVEWOOD_C]   / stem_CN)   * 1e6 / g_settings->sizeCell;
aut_respiration.c:		croot_N         = (s->value[CROOT_LIVEWOOD_C]  / croot_CN)  * 1e6 / g_settings->sizeCell;
aut_respiration.c:		branch_N        = (s->value[BRANCH_LIVEWOOD_C] / branch_CN) * 1e6 / g_settings->sizeCell;
aut_respiration.c:		s->value[NIGHTLY_LEAF_MAINT_RESP]     = ( leaf_N       * MR_ref * pow(q10_tnight, exponent_tnight) * ( 1. - ( meteo_daily->daylength_sec / 86400. ) ) );
aut_respiration.c:		s->value[NIGHTLY_LEAF_SUN_MAINT_RESP]   = ( leaf_sun_N   * MR_ref * pow(q10_tnight, exponent_tnight) * ( 1. - ( meteo_daily->daylength_sec / 86400. ) ) );
aut_respiration.c:		s->value[NIGHTLY_LEAF_SHADE_MAINT_RESP] = ( leaf_shade_N * MR_ref * pow(q10_tnight, exponent_tnight) * ( 1. - ( meteo_daily->daylength_sec / 86400. ) ) );
aut_respiration.c:		if ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 )
aut_respiration.c:		s->value[DAILY_LEAF_MAINT_RESP]       = ( leaf_N       * MR_ref * pow(q10_tday,   exponent_tday)   * ( meteo_daily->daylength_sec / 86400. ) ) * light_inhib;
aut_respiration.c:		s->value[DAILY_LEAF_SUN_MAINT_RESP]   = ( leaf_sun_N   * MR_ref * pow(q10_tday,   exponent_tday)   * ( meteo_daily->daylength_sec / 86400. ) ) * light_inhib_sun;
aut_respiration.c:		s->value[DAILY_LEAF_SHADE_MAINT_RESP] = ( leaf_shade_N * MR_ref * pow(q10_tday,   exponent_tday)   * ( meteo_daily->daylength_sec / 86400. ) ) * light_inhib_shade;
aut_respiration.c:		umol_par       = s->value[PAR]       * 1e6 / 86400.;
aut_respiration.c:		umol_par_sun   = s->value[PAR_SUN]   * 1e6 / 86400.;
aut_respiration.c:		umol_par_shade = s->value[PAR_SHADE] * 1e6 / 86400.;
aut_respiration.c:			printf("par = %g\n", s->value[PAR]);
aut_respiration.c:		s->value[DAILY_LEAF_MAINT_RESP]       = ( ( s->value[NIGHTLY_LEAF_MAINT_RESP]       / ( 86400. - meteo_daily->daylength_sec ) ) * meteo_daily->daylength_sec ) * light_inhib;
aut_respiration.c:		s->value[DAILY_LEAF_SUN_MAINT_RESP]   = ( ( s->value[NIGHTLY_LEAF_SUN_MAINT_RESP]   / ( 86400. - meteo_daily->daylength_sec ) ) * meteo_daily->daylength_sec ) * light_inhib_sun;
aut_respiration.c:		s->value[DAILY_LEAF_SHADE_MAINT_RESP] = ( ( s->value[NIGHTLY_LEAF_SHADE_MAINT_RESP] / ( 86400. - meteo_daily->daylength_sec ) ) * meteo_daily->daylength_sec ) * light_inhib_shade;
aut_respiration.c:		s->value[TOT_LEAF_MAINT_RESP]         = s->value[DAILY_LEAF_MAINT_RESP] + s->value[NIGHTLY_LEAF_MAINT_RESP];
aut_respiration.c:		s->value[FROOT_MAINT_RESP]  = froot_N  * MR_ref * pow( q10_tsoil, exponent_tsoil );
aut_respiration.c:		s->value[CROOT_MAINT_RESP]  = croot_N  * MR_ref * pow( q10_tsoil, exponent_tsoil );
aut_respiration.c:		s->value[STEM_MAINT_RESP]   = stem_N   * MR_ref  * pow( q10_tavg, exponent_tavg );
aut_respiration.c:		s->value[BRANCH_MAINT_RESP] = branch_N * MR_ref * pow( q10_tavg, exponent_tavg );
aut_respiration.c:		if ( g_settings->Resp_accl )
aut_respiration.c:			s->value[DAILY_LEAF_MAINT_RESP]       *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tday   - Q10_temp ) ) );
aut_respiration.c:			s->value[DAILY_LEAF_SUN_MAINT_RESP]   *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tday   - Q10_temp ) ) );
aut_respiration.c:			s->value[DAILY_LEAF_SHADE_MAINT_RESP] *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tday   - Q10_temp ) ) );
aut_respiration.c:			s->value[NIGHTLY_LEAF_MAINT_RESP]     *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tnight - Q10_temp ) ) );
aut_respiration.c:			s->value[TOT_LEAF_MAINT_RESP]          = s->value[DAILY_LEAF_MAINT_RESP] + s->value[NIGHTLY_LEAF_MAINT_RESP];
aut_respiration.c:			s->value[FROOT_MAINT_RESP]            *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tsoil - Q10_temp ) ) );
aut_respiration.c:			s->value[CROOT_MAINT_RESP]            *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tsoil - Q10_temp ) ) );
aut_respiration.c:			s->value[STEM_MAINT_RESP]             *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tavg - Q10_temp ) ) );
aut_respiration.c:			s->value[BRANCH_MAINT_RESP]           *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tavg - Q10_temp ) ) );
aut_respiration.c:			s->value[DAILY_LEAF_MAINT_RESP]         *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tday   - Q10_temp ) ) );
aut_respiration.c:			s->value[DAILY_LEAF_SUN_MAINT_RESP]     *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tday   - Q10_temp ) ) );
aut_respiration.c:			s->value[DAILY_LEAF_SHADE_MAINT_RESP]   *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tday   - Q10_temp ) ) );
aut_respiration.c:			s->value[NIGHTLY_LEAF_MAINT_RESP]       *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tnight - Q10_temp ) ) );
aut_respiration.c:			s->value[NIGHTLY_LEAF_SUN_MAINT_RESP]   *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tnight - Q10_temp ) ) );
aut_respiration.c:			s->value[NIGHTLY_LEAF_SHADE_MAINT_RESP] *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tnight - Q10_temp ) ) );
aut_respiration.c:			s->value[TOT_LEAF_MAINT_RESP]          = s->value[DAILY_LEAF_MAINT_RESP] + s->value[NIGHTLY_LEAF_MAINT_RESP];
aut_respiration.c:			s->value[FROOT_MAINT_RESP]            *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tsoil - Q10_temp ) ) );
aut_respiration.c:			s->value[CROOT_MAINT_RESP]            *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tsoil - Q10_temp ) ) );
aut_respiration.c:			s->value[STEM_MAINT_RESP]             *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tavg - Q10_temp ) ) );
aut_respiration.c:			s->value[BRANCH_MAINT_RESP]           *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tavg - Q10_temp ) ) );
aut_respiration.c:		s->value[TOTAL_MAINT_RESP] = (s->value[TOT_LEAF_MAINT_RESP]    +
aut_respiration.c:				s->value[FROOT_MAINT_RESP]                             +
aut_respiration.c:				s->value[STEM_MAINT_RESP]                              +
aut_respiration.c:				s->value[CROOT_MAINT_RESP]                             +
aut_respiration.c:				s->value[BRANCH_MAINT_RESP])                           ;
aut_respiration.c:				//printf("mant respirs  in aut_resp            = %g \n", s->value[TOTAL_MAINT_RESP]);
aut_respiration.c:		c->daily_leaf_maint_resp   += s->value[TOT_LEAF_MAINT_RESP];
aut_respiration.c:		c->daily_stem_maint_resp   += s->value[STEM_MAINT_RESP];
aut_respiration.c:		c->daily_froot_maint_resp  += s->value[FROOT_MAINT_RESP];
aut_respiration.c:		c->daily_branch_maint_resp += s->value[BRANCH_MAINT_RESP];
aut_respiration.c:		c->daily_croot_maint_resp  += s->value[CROOT_MAINT_RESP];
aut_respiration.c:		s->value[TOTAL_MAINT_RESP]     = s->value[GPP] * ( 1. - g_settings->Fixed_Aut_Resp_rate ) * ( 1. - GRPERC );
aut_respiration.c:	s->value[TOTAL_MAINT_RESP_tC] = s->value[TOTAL_MAINT_RESP] / 1e6 * g_settings->sizeCell;
aut_respiration.c:	s->value[MONTHLY_TOTAL_MAINT_RESP] += s->value[TOTAL_MAINT_RESP];
aut_respiration.c:	s->value[YEARLY_TOTAL_MAINT_RESP]  += s->value[TOTAL_MAINT_RESP];
aut_respiration.c:	c->daily_maint_resp                += s->value[TOTAL_MAINT_RESP];
aut_respiration.c:	c->monthly_maint_resp              += s->value[TOTAL_MAINT_RESP];
aut_respiration.c:	c->annual_maint_resp               += s->value[TOTAL_MAINT_RESP];
aut_respiration.c:	CHECK_CONDITION(s->value[DAILY_LEAF_MAINT_RESP],   < , ZERO );
aut_respiration.c:	CHECK_CONDITION(s->value[NIGHTLY_LEAF_MAINT_RESP], < , ZERO );
aut_respiration.c:	CHECK_CONDITION(s->value[FROOT_MAINT_RESP],        < , ZERO );
aut_respiration.c:	CHECK_CONDITION(s->value[STEM_MAINT_RESP],         < , ZERO );
aut_respiration.c:	CHECK_CONDITION(s->value[CROOT_MAINT_RESP],        < , ZERO );
aut_respiration.c:	CHECK_CONDITION(s->value[BRANCH_MAINT_RESP],       < , ZERO );
aut_respiration.c:	CHECK_CONDITION(s->value[TOTAL_MAINT_RESP],        < , ZERO );
aut_respiration.c:	if ( g_settings->Prog_Aut_Resp )
aut_respiration.c:		if ( s->value[C_TO_LEAF]   > 0. ) s->value[LEAF_GROWTH_RESP]   = ( ( s->value[C_TO_LEAF]   * 1e6 / g_settings->sizeCell ) * s->value[EFF_GRPERC] );
aut_respiration.c:		if ( s->value[C_TO_FROOT]  > 0. ) s->value[FROOT_GROWTH_RESP]  = ( ( s->value[C_TO_FROOT]  * 1e6 / g_settings->sizeCell ) * s->value[EFF_GRPERC] );
aut_respiration.c:		if ( s->value[C_TO_STEM]   > 0. ) s->value[STEM_GROWTH_RESP]   = ( ( s->value[C_TO_STEM]   * 1e6 / g_settings->sizeCell ) * s->value[EFF_GRPERC] );
aut_respiration.c:		if ( s->value[C_TO_CROOT]  > 0. ) s->value[CROOT_GROWTH_RESP]  = ( ( s->value[C_TO_CROOT]  * 1e6 / g_settings->sizeCell ) * s->value[EFF_GRPERC] );
aut_respiration.c:		if ( s->value[C_TO_BRANCH] > 0. ) s->value[BRANCH_GROWTH_RESP] = ( ( s->value[C_TO_BRANCH] * 1e6 / g_settings->sizeCell ) * s->value[EFF_GRPERC] );
aut_respiration.c:		s->value[TOTAL_GROWTH_RESP] = (s->value[LEAF_GROWTH_RESP] +
aut_respiration.c:				s->value[FROOT_GROWTH_RESP]                       +
aut_respiration.c:				s->value[STEM_GROWTH_RESP]                        +
aut_respiration.c:				s->value[CROOT_GROWTH_RESP]                       +
aut_respiration.c:				s->value[BRANCH_GROWTH_RESP])                     ;
aut_respiration.c:		c->daily_leaf_growth_resp   += s->value[LEAF_GROWTH_RESP];
aut_respiration.c:		c->daily_stem_growth_resp   += s->value[STEM_GROWTH_RESP];
aut_respiration.c:		c->daily_froot_growth_resp  += s->value[FROOT_GROWTH_RESP];
aut_respiration.c:		c->daily_branch_growth_resp += s->value[BRANCH_GROWTH_RESP];
aut_respiration.c:		c->daily_croot_growth_resp  += s->value[CROOT_GROWTH_RESP];
aut_respiration.c:		s->value[TOTAL_GROWTH_RESP] = s->value[GPP] * ( 1. - g_settings->Fixed_Aut_Resp_rate ) * GRPERC;
aut_respiration.c:	s->value[TOTAL_GROWTH_RESP_tC] = (s->value[TOTAL_GROWTH_RESP] / 1e6 * g_settings->sizeCell);
aut_respiration.c:	s->value[MONTHLY_TOTAL_GROWTH_RESP] += s->value[TOTAL_GROWTH_RESP];
aut_respiration.c:	s->value[YEARLY_TOTAL_GROWTH_RESP]  += s->value[TOTAL_GROWTH_RESP];
aut_respiration.c:	c->daily_growth_resp                += s->value[TOTAL_GROWTH_RESP];
aut_respiration.c:	c->monthly_growth_resp              += s->value[TOTAL_GROWTH_RESP];
aut_respiration.c:	c->annual_growth_resp               += s->value[TOTAL_GROWTH_RESP];
aut_respiration.c:	CHECK_CONDITION(s->value[TOTAL_GROWTH_RESP], < , ZERO );
aut_respiration.c:	if ( g_settings->Prog_Aut_Resp )
aut_respiration.c:		s->value[LEAF_AUT_RESP]            = (s->value[TOT_LEAF_MAINT_RESP]     + s->value[LEAF_GROWTH_RESP]);
aut_respiration.c:		s->value[FROOT_AUT_RESP]           = (s->value[FROOT_MAINT_RESP]        + s->value[FROOT_GROWTH_RESP]);
aut_respiration.c:		s->value[STEM_AUT_RESP]            = (s->value[STEM_MAINT_RESP]         + s->value[STEM_GROWTH_RESP]);
aut_respiration.c:		s->value[CROOT_AUT_RESP]           = (s->value[CROOT_MAINT_RESP]        + s->value[CROOT_GROWTH_RESP]);
aut_respiration.c:		s->value[BRANCH_AUT_RESP]          = (s->value[BRANCH_MAINT_RESP]       + s->value[BRANCH_GROWTH_RESP]);
aut_respiration.c:		s->value[MONTHLY_LEAF_AUT_RESP]   += s->value[LEAF_AUT_RESP];
aut_respiration.c:		s->value[MONTHLY_FROOT_AUT_RESP]  += s->value[FROOT_AUT_RESP];
aut_respiration.c:		s->value[MONTHLY_STEM_AUT_RESP]   += s->value[STEM_AUT_RESP];
aut_respiration.c:		s->value[MONTHLY_CROOT_AUT_RESP]  += s->value[CROOT_AUT_RESP];
aut_respiration.c:		s->value[MONTHLY_BRANCH_AUT_RESP] += s->value[BRANCH_AUT_RESP];
aut_respiration.c:		s->value[YEARLY_LEAF_AUT_RESP]    += s->value[LEAF_AUT_RESP];
aut_respiration.c:		s->value[YEARLY_FROOT_AUT_RESP]   += s->value[FROOT_AUT_RESP];
aut_respiration.c:		s->value[YEARLY_STEM_AUT_RESP]    += s->value[STEM_AUT_RESP];
aut_respiration.c:		s->value[YEARLY_CROOT_AUT_RESP]   += s->value[CROOT_AUT_RESP];
aut_respiration.c:		s->value[YEARLY_BRANCH_AUT_RESP]  += s->value[BRANCH_AUT_RESP];
aut_respiration.c:		c->daily_leaf_aut_resp            += (s->value[TOT_LEAF_MAINT_RESP]     + s->value[LEAF_GROWTH_RESP]);
aut_respiration.c:		c->daily_stem_aut_resp            += (s->value[STEM_MAINT_RESP]         + s->value[STEM_GROWTH_RESP]);
aut_respiration.c:		c->daily_branch_aut_resp          += (s->value[BRANCH_MAINT_RESP]       + s->value[BRANCH_GROWTH_RESP]);
aut_respiration.c:		c->daily_froot_aut_resp           += (s->value[FROOT_MAINT_RESP]        + s->value[FROOT_GROWTH_RESP]);
aut_respiration.c:		c->daily_croot_aut_resp           += (s->value[CROOT_MAINT_RESP]        + s->value[CROOT_GROWTH_RESP]);
aut_respiration.c:	s->value[TOTAL_AUT_RESP]               = ( s->value[TOTAL_GROWTH_RESP] + s->value[TOTAL_MAINT_RESP] );
aut_respiration.c:	s->value[TOTAL_AUT_RESP_tC]            = ( s->value[TOTAL_AUT_RESP] / 1e6 * g_settings->sizeCell );
aut_respiration.c:	s->value[MONTHLY_TOTAL_AUT_RESP]      += s->value[TOTAL_AUT_RESP];
aut_respiration.c:	s->value[YEARLY_TOTAL_AUT_RESP]       += s->value[TOTAL_AUT_RESP];
aut_respiration.c:	logger(g_debug_log, "daily total autotrophic respiration (%s) = %g gC/m2/day\n",   s->name, s->value[TOTAL_AUT_RESP]);
aut_respiration.c:	logger(g_debug_log, "daily total autotrophic respiration (%s) = %g tC/cell/day\n", s->name, s->value[TOTAL_AUT_RESP_tC]);
aut_respiration.c:	c->daily_aut_resp                     += s->value[TOTAL_AUT_RESP];
aut_respiration.c:	c->monthly_aut_resp                   += s->value[TOTAL_AUT_RESP];
aut_respiration.c:	c->annual_aut_resp                    += s->value[TOTAL_AUT_RESP];
aut_respiration.c:	c->daily_aut_resp_tC                  += (s->value[TOTAL_AUT_RESP] / 1e6 * g_settings->sizeCell);
aut_respiration.c:	c->monthly_aut_resp_tC                += (s->value[TOTAL_AUT_RESP] / 1e6 * g_settings->sizeCell);
aut_respiration.c:	c->annual_aut_resp_tC                 += (s->value[TOTAL_AUT_RESP] / 1e6 * g_settings->sizeCell);
aut_respiration.c:	CHECK_CONDITION( s->value[TOTAL_AUT_RESP], < , ZERO );
aut_respiration.c:	max_age = (int)s->value[MAXAGE];
aut_respiration.c:	s->value[EFF_GRPERC] = ( GRPERCMIN - GRPERCMAX ) / ( max_age - min_age ) * ( a->value - min_age ) + GRPERCMAX;
aut_respiration.c:	if( a->value > s->value[MAXAGE]) s->value[EFF_GRPERC] = GRPERCMIN;
biomass.c:	max_age = (int)s->value[MAXAGE];
biomass.c:	max_live_total_ratio = s->value[LIVE_TOTAL_WOOD];
biomass.c:	s->value[EFF_LIVE_TOTAL_WOOD_FRAC] = (t1/t2)*(max_age - a->value) + min_live_total_ratio;
biomass.c:	s->value[EFF_LIVE_TOTAL_WOOD_FRAC] = s->value[LIVE_TOTAL_WOOD];
biomass.c:	logger(g_debug_log, "Effective live:total wood fraction based on stand age = %g\n", s->value[EFF_LIVE_TOTAL_WOOD_FRAC]);
biomass.c:	s->value[OLD_AGB]      = s->value[AGB];
biomass.c:	s->value[OLD_BGB]      = s->value[BGB];
biomass.c:	s->value[TREE_OLD_AGB] = s->value[TREE_AGB];
biomass.c:	s->value[TREE_OLD_BGB] = s->value[TREE_BGB];
biomass.c:	s->value[AGB]            = s->value[LEAF_C]  + s->value[STEM_C] + s->value[BRANCH_C] +s->value[FRUIT_C];
biomass.c:	logger(g_debug_log, "AGB              = %f tC/cell\n", s->value[AGB]);
biomass.c:	s->value[BGB]            = s->value[FROOT_C] + s->value[CROOT_C];
biomass.c:	logger(g_debug_log, "BGB              = %f tC/cell\n", s->value[BGB]);
biomass.c:	s->value[STANDING_WOOD]  = s->value[STEM_C] + s->value[BRANCH_C] + s->value[CROOT_C];
biomass.c:	logger(g_debug_log, "STANDING_WOOD    = %f tC/cell\n", s->value[STANDING_WOOD]);
biomass.c:	s->value[DELTA_AGB]      = s->value[AGB] - s->value[OLD_AGB];
biomass.c:	logger(g_debug_log, "DELTA_AGB        = %f tC/cell/year\n", s->value[DELTA_AGB]);
biomass.c:	s->value[DELTA_BGB]      = s->value[BGB] - s->value[OLD_BGB];
biomass.c:	logger(g_debug_log, "DELTA_BGB        = %f tC/cell/year\n", s->value[DELTA_BGB]);
biomass.c:	s->value[TREE_AGB]       = s->value[AGB] / (double)s->counter[N_TREE];
biomass.c:	logger(g_debug_log, "Yearly Class AGB = %f tC/tree\n", s->value[TREE_AGB]);
biomass.c:	s->value[TREE_BGB]       = s->value[BGB] / (double)s->counter[N_TREE];
biomass.c:	logger(g_debug_log, "Yearly Class BGB = %f tC/tree\n", s->value[TREE_BGB]);
biomass.c:	s->value[DELTA_TREE_AGB] = s->value[TREE_AGB] - s->value[TREE_OLD_AGB];
biomass.c:	logger(g_debug_log, "DELTA_TREE_AGB   = %f tC/tree/year\n", s->value[DELTA_TREE_AGB]);
biomass.c:	s->value[DELTA_TREE_BGB] = s->value[TREE_BGB] - s->value[TREE_OLD_BGB];
biomass.c:	logger(g_debug_log, "DELTA_TREE_BGB   = %f tC/tree/year\n", s->value[DELTA_TREE_BGB]);
biomass.c:					logger(g_debug_log,  "N_TREE = %d\n", s->counter[N_TREE]);
biomass.c:					s->value[TREE_LEAF_C]                = (s->value[LEAF_C]             / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_STEM_C]                = (s->value[STEM_C]             / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_FROOT_C]               = (s->value[FROOT_C]            / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_CROOT_C]               = (s->value[CROOT_C]            / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_RESERVE_C]             = (s->value[RESERVE_C]          / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_BRANCH_C]              = (s->value[BRANCH_C]           / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_FRUIT_C]               = (s->value[FRUIT_C]            / (double)s->counter[N_TREE]);
biomass.c:				//	s->value[TREE_SEEDS_C]               = (s->value[SEEDS_C]            / (double)s->counter[N_TREE]);
biomass.c:				//  s->value[TREE_SEEDLINGS_C]           = (s->value[SEEDLINGS_C]        / (double)s->counter[N_TREE]);
biomass.c:				//  s->value[TREE_SAPLINGS_C]            = (s->value[SAPLINGS_C]         / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_STEM_SAPWOOD_C]        = (s->value[STEM_SAPWOOD_C]     / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_STEM_HEARTWOOD_C]      = (s->value[STEM_HEARTWOOD_C]   / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_CROOT_SAPWOOD_C]       = (s->value[CROOT_SAPWOOD_C]    / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_CROOT_HEARTWOOD_C]     = (s->value[CROOT_HEARTWOOD_C]  / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_BRANCH_SAPWOOD_C]      = (s->value[BRANCH_SAPWOOD_C]   / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_BRANCH_HEARTWOOD_C]    = (s->value[BRANCH_HEARTWOOD_C] / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_SAPWOOD_C]             = (s->value[TOT_SAPWOOD_C]      / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_HEARTWOOD_C]           = (s->value[TOT_HEARTWOOD_C]    / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_STEM_LIVEWOOD_C]       = (s->value[STEM_LIVEWOOD_C]    / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_STEM_DEADWOOD_C]       = (s->value[STEM_DEADWOOD_C]    / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_CROOT_LIVEWOOD_C]      = (s->value[CROOT_LIVEWOOD_C]   / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_CROOT_DEADWOOD_C]      = (s->value[CROOT_DEADWOOD_C]   / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_BRANCH_LIVEWOOD_C]     = (s->value[BRANCH_LIVEWOOD_C]  / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_BRANCH_DEADWOOD_C]     = (s->value[BRANCH_DEADWOOD_C]  / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_TOT_LIVEWOOD_C]        = (s->value[TOT_LIVEWOOD_C]     / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_TOT_DEADWOOD_C]        = (s->value[TOT_DEADWOOD_C]     / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_LEAF_N]                = (s->value[LEAF_N]             / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_STEM_N]                = (s->value[STEM_N]             / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_FROOT_N]               = (s->value[FROOT_N]            / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_CROOT_N]               = (s->value[CROOT_N]            / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_BRANCH_N]              = (s->value[BRANCH_N]           / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_RESERVE_N]             = (s->value[RESERVE_N]          / (double)s->counter[N_TREE]);
biomass.c:					s->value[TREE_FRUIT_N]               = (s->value[FRUIT_N]            / (double)s->counter[N_TREE]);
biomass.c:	if ( !s->value[FRACBB0] ) s->value[FRACBB0] = s->value[FRACBB1];
biomass.c:	else s->value[FRACBB] = s->value[FRACBB1] + ( s->value[FRACBB0] - s->value[FRACBB1] )* exp( -LN2 * ( (double)a->value / s->value[TBB] ) );
biomass.c:	s->value[C_LEAF_TO_LITR]     += (s->value[TREE_LEAF_C]    * tree_remove);
biomass.c:	s->value[C_FROOT_TO_LITR]    += (s->value[TREE_FROOT_C]   * tree_remove);
biomass.c:	//s->value[C_SEEDS_TO_CWD]     += (s->value[TREE_SEEDS_C] * tree_remove);
biomass.c:	//s->value[C_SEEDLINGS_TO_CWD]     += (s->value[TREE_SEEDLINGS_C] * tree_remove);
biomass.c:	//s->value[C_SAPLINGS_TO_CWD]     += (s->value[TREE_SAPLINGS_C] * tree_remove);
biomass.c:	s->value[C_TO_LITR]          += s->value[C_LEAF_TO_LITR] + s->value[C_FROOT_TO_LITR];
biomass.c:	s->value[C_STEM_TO_CWD]      += (s->value[TREE_STEM_C]    * tree_remove);
biomass.c:	s->value[C_CROOT_TO_CWD]     += (s->value[TREE_CROOT_C]   * tree_remove);
biomass.c:	s->value[C_BRANCH_TO_CWD]    += (s->value[TREE_BRANCH_C]  * tree_remove);
biomass.c:	s->value[C_RESERVE_TO_CWD]   += (s->value[TREE_RESERVE_C] * tree_remove);
biomass.c:	s->value[C_FRUIT_TO_CWD]     += (s->value[TREE_FRUIT_C]   * tree_remove);
biomass.c:	s->value[C_STEM_SAPWOOD_TO_CWD]     += (s->value[TREE_STEM_SAPWOOD_C]     * tree_remove);
biomass.c:	s->value[C_CROOT_SAPWOOD_TO_CWD]    += (s->value[TREE_CROOT_SAPWOOD_C]    * tree_remove);
biomass.c:	s->value[C_BRANCH_SAPWOOD_TO_CWD]   += (s->value[TREE_BRANCH_SAPWOOD_C]   * tree_remove);
biomass.c:	s->value[C_STEM_HEARTWOOD_TO_CWD]   += (s->value[TREE_STEM_HEARTWOOD_C]   * tree_remove);
biomass.c:	s->value[C_CROOT_HEARTWOOD_TO_CWD]  += (s->value[TREE_CROOT_HEARTWOOD_C]  * tree_remove);
biomass.c:	s->value[C_BRANCH_HEARTWOOD_TO_CWD] += (s->value[TREE_BRANCH_HEARTWOOD_C] * tree_remove);
biomass.c:	s->value[C_STEM_LIVEWOOD_TO_CWD]    += (s->value[TREE_STEM_LIVEWOOD_C]     * tree_remove);
biomass.c:	s->value[C_CROOT_LIVEWOOD_TO_CWD]   += (s->value[TREE_CROOT_LIVEWOOD_C]    * tree_remove);
biomass.c:	s->value[C_BRANCH_LIVEWOOD_TO_CWD]  += (s->value[TREE_BRANCH_LIVEWOOD_C]   * tree_remove);
biomass.c:	s->value[C_STEM_DEADWOOD_TO_CWD]    += (s->value[TREE_STEM_DEADWOOD_C]     * tree_remove);
biomass.c:	s->value[C_CROOT_DEADWOOD_TO_CWD]   += (s->value[TREE_CROOT_DEADWOOD_C]    * tree_remove);
biomass.c:	s->value[C_BRANCH_DEADWOOD_TO_CWD]  += (s->value[TREE_BRANCH_DEADWOOD_C]   * tree_remove);
biomass.c:		if ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 )
biomass.c:			s->value[C_TO_CWD]                += s->value[C_STEM_TO_CWD] +
biomass.c:					s->value[C_CROOT_TO_CWD]       +
biomass.c:					s->value[C_BRANCH_TO_CWD]      +
biomass.c:					s->value[C_RESERVE_TO_CWD]     +
biomass.c:					s->value[C_FRUIT_TO_CWD]       ;
biomass.c:			s->value[C_TO_CWD]                += s->value[C_STEM_TO_CWD] +
biomass.c:					s->value[C_CROOT_TO_CWD]       +
biomass.c:					s->value[C_BRANCH_TO_CWD]      +
biomass.c:					s->value[C_RESERVE_TO_CWD]     +
biomass.c:					s->value[C_FRUIT_TO_CWD]       +
biomass.c:					s->value[C_LEAF_TO_LITR]       +
biomass.c:					s->value[C_FROOT_TO_LITR]      ;
biomass.c:		if ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 )
biomass.c:			s->value[C_TO_CWD]                += s->value[C_CROOT_TO_CWD]  +
biomass.c:					s->value[C_BRANCH_TO_CWD] +
biomass.c:					s->value[C_RESERVE_TO_CWD]+
biomass.c:					s->value[C_FRUIT_TO_CWD] ;
biomass.c:			s->value[C_TO_CWD]                += s->value[C_CROOT_TO_CWD]  +
biomass.c:					s->value[C_BRANCH_TO_CWD] +
biomass.c:					s->value[C_RESERVE_TO_CWD]+
biomass.c:					s->value[C_FRUIT_TO_CWD]  +
biomass.c:					s->value[C_LEAF_TO_LITR]  +
biomass.c:					s->value[C_FROOT_TO_LITR] ;
biomass.c:	if ( s->counter[HARVESTING_HAPPENS] == 1 )
biomass.c:		/*** compute class-level Coarse Woody Debris carbon fluxes (tC/sizecell/day) ****/
biomass.c:		s->value[CWD_TO_LITRC]           = s->value[C_TO_CWD];
biomass.c:		s->value[CWD_TO_LITR2C]          = s->value[C_TO_CWD] * s->value[DEADWOOD_USCEL_FRAC];
biomass.c:		s->value[CWD_TO_LITR3C]          = s->value[C_TO_CWD] * s->value[DEADWOOD_SCEL_FRAC];
biomass.c:		s->value[CWD_TO_LITR4C]          = s->value[C_TO_CWD] * s->value[DEADWOOD_LIGN_FRAC];
biomass.c:		CHECK_CONDITION ( s->value[CWD_TO_LITR2C] + s->value[CWD_TO_LITR3C] + s->value[CWD_TO_LITR4C] , == , s->value[CWD_TO_LITRC] + eps );
biomass.c:		/*** compute class-level Coarse Woody Debris carbon pools (tC/sizecell) ****/
biomass.c:		s->value[CWD_LITRC]             += s->value[C_TO_CWD];
biomass.c:		s->value[CWD_LITR2C]            += s->value[CWD_TO_LITR2C];
biomass.c:		s->value[CWD_LITR3C]            += s->value[CWD_TO_LITR3C];
biomass.c:		s->value[CWD_LITR4C]            += s->value[CWD_TO_LITR4C];
biomass.c:		CHECK_CONDITION ( s->value[CWD_LITR2C] + s->value[CWD_LITR3C] + s->value[CWD_LITR4C] , == , s->value[CWD_LITRC] + eps );
biomass.c:		c->daily_cwd_to_litrC           += s->value[CWD_LITRC]  * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr2C          += s->value[CWD_LITR2C] * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr3C          += s->value[CWD_LITR3C] * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr4C          += s->value[CWD_LITR4C] * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_C                        += s->value[CWD_LITRC]  * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_2C                       += s->value[CWD_LITR2C] * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_3C                       += s->value[CWD_LITR3C] * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_4C                       += s->value[CWD_LITR4C] * 1e6 / g_settings->sizeCell;
biomass.c:	if ( s->counter[THINNING_HAPPENS] == 1 || s->counter[HARVESTING_HAPPENS] == 1 )   // TODO include the condition nat_man=1
biomass.c:		s->value[C_HWP]          += s->value[C_STEM_TO_CWD] + s->value[C_CROOT_TO_CWD] + s->value[C_BRANCH_TO_CWD] ;
biomass.c:		s->value[CUM_C_HWP]      += s->value[C_HWP];
biomass.c:		s->value[VOLUME_HWP]     += s->value[TREE_VOLUME] * tree_remove;
biomass.c:		s->value[CUM_VOLUME_HWP] += s->value[TREE_VOLUME] * tree_remove;
biomass.c://	s->value[YEARLY_C_TO_STEM]            -= ((s->value[YEARLY_C_TO_STEM]            / s->counter[N_TREE]) * tree_remove);
biomass.c://	s->value[YEARLY_C_TO_CROOT]           -= ((s->value[YEARLY_C_TO_CROOT]           / s->counter[N_TREE]) * tree_remove);
biomass.c://	s->value[YEARLY_C_TO_BRANCH]          -= ((s->value[YEARLY_C_TO_BRANCH]          / s->counter[N_TREE]) * tree_remove);
biomass.c://	s->value[YEARLY_C_TO_STEM_SAPWOOD]    -= ((s->value[YEARLY_C_TO_STEM_SAPWOOD]    / s->counter[N_TREE]) * tree_remove);
biomass.c://	s->value[YEARLY_C_TO_CROOT_SAPWOOD]   -= ((s->value[YEARLY_C_TO_CROOT_SAPWOOD]   / s->counter[N_TREE]) * tree_remove);
biomass.c://	s->value[YEARLY_C_TO_BRANCH_SAPWOOD]  -= ((s->value[YEARLY_C_TO_BRANCH_SAPWOOD]  / s->counter[N_TREE]) * tree_remove);
biomass.c://	s->value[YEARLY_C_TO_STEM_LIVEWOOD]   -= ((s->value[YEARLY_C_TO_STEM_LIVEWOOD]   / s->counter[N_TREE]) * tree_remove);
biomass.c://	s->value[YEARLY_C_TO_CROOT_LIVEWOOD]  -= ((s->value[YEARLY_C_TO_CROOT_LIVEWOOD]  / s->counter[N_TREE]) * tree_remove);
biomass.c://	s->value[YEARLY_C_TO_BRANCH_LIVEWOOD] -= ((s->value[YEARLY_C_TO_BRANCH_LIVEWOOD] / s->counter[N_TREE]) * tree_remove);
biomass.c:	s->value[N_LEAF_TO_LITR]          += (s->value[TREE_LEAF_N]       * tree_remove);
biomass.c:	s->value[N_FROOT_TO_LITR]         += (s->value[TREE_FROOT_N]      * tree_remove);
biomass.c:	s->value[N_TO_LITR]               += s->value[N_LEAF_TO_LITR] +	s->value[N_FROOT_TO_LITR];
biomass.c:	s->value[LITR_N]                  += s->value[N_TO_LITR];
biomass.c:	s->value[N_STEM_TO_CWD]           += (s->value[TREE_STEM_N]       * tree_remove);
biomass.c:	s->value[N_CROOT_TO_CWD]          += (s->value[TREE_CROOT_N]      * tree_remove);
biomass.c:	s->value[N_BRANCH_TO_CWD]         += (s->value[TREE_BRANCH_N]     * tree_remove);
biomass.c:	s->value[N_BRANCH_TO_CWD]         += (s->value[TREE_RESERVE_N]    * tree_remove);
biomass.c:	s->value[N_FRUIT_TO_CWD]          += (s->value[TREE_FRUIT_N]      * tree_remove);
biomass.c:	s->value[N_RESERVE_TO_CWD]        += (s->value[TREE_RESERVE_N]    * tree_remove);
biomass.c:		if ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 )
biomass.c:			s->value[N_TO_CWD]                += s->value[N_STEM_TO_CWD] +
biomass.c:					s->value[N_CROOT_TO_CWD]  +
biomass.c:					s->value[N_BRANCH_TO_CWD] +
biomass.c:					s->value[N_RESERVE_TO_CWD]+
biomass.c:					s->value[N_FRUIT_TO_CWD]  ;
biomass.c:			s->value[N_TO_CWD]                += s->value[N_STEM_TO_CWD] +
biomass.c:					s->value[N_CROOT_TO_CWD]  +
biomass.c:					s->value[N_BRANCH_TO_CWD] +
biomass.c:					s->value[N_RESERVE_TO_CWD]+
biomass.c:					s->value[N_FRUIT_TO_CWD]  +
biomass.c:					s->value[N_LEAF_TO_LITR]       +
biomass.c:					s->value[N_FROOT_TO_LITR]      ;
biomass.c:		if ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 )
biomass.c:			s->value[N_TO_CWD]                += s->value[N_CROOT_TO_CWD]  +
biomass.c:					s->value[N_BRANCH_TO_CWD] +
biomass.c:					s->value[N_RESERVE_TO_CWD]+
biomass.c:					s->value[N_FRUIT_TO_CWD] ;
biomass.c:			s->value[N_TO_CWD]                += s->value[N_CROOT_TO_CWD]  +
biomass.c:					s->value[N_BRANCH_TO_CWD] +
biomass.c:					s->value[N_RESERVE_TO_CWD]+
biomass.c:					s->value[N_FRUIT_TO_CWD]  +
biomass.c:					s->value[N_LEAF_TO_LITR]       +
biomass.c:					s->value[N_FROOT_TO_LITR]      ;
biomass.c:	if ( s->counter[HARVESTING_HAPPENS] == 1 )
biomass.c:		/*** compute class-level deadwood nitrogen fluxes (tN/sizecell/day) ****/
biomass.c:		s->value[CWD_TO_LITRN]           = s->value[N_TO_CWD];
biomass.c:		s->value[CWD_TO_LITR2N]          = s->value[N_TO_CWD] * s->value[DEADWOOD_USCEL_FRAC];
biomass.c:		s->value[CWD_TO_LITR3N]          = s->value[N_TO_CWD] * s->value[DEADWOOD_SCEL_FRAC];
biomass.c:		s->value[CWD_TO_LITR4N]          = s->value[N_TO_CWD] * s->value[DEADWOOD_LIGN_FRAC];
biomass.c:		CHECK_CONDITION ( s->value[CWD_TO_LITR2N] + s->value[CWD_TO_LITR3N] + s->value[CWD_TO_LITR4N] , == , s->value[CWD_TO_LITRN] + eps );
biomass.c:		/*** compute class-level deadwood nitrogen pools (tN/sizecell) ****/
biomass.c:		s->value[CWD_LITRN]             += s->value[N_TO_CWD];
biomass.c:		s->value[CWD_LITR2N]            += s->value[CWD_TO_LITR2N];
biomass.c:		s->value[CWD_LITR3N]            += s->value[CWD_TO_LITR3N];
biomass.c:		s->value[CWD_LITR4N]            += s->value[CWD_TO_LITR4N];
biomass.c:		CHECK_CONDITION ( s->value[CWD_LITR2N] + s->value[CWD_LITR3N] + s->value[CWD_LITR4N] , == , s->value[CWD_LITRN] + eps );
biomass.c:		c->daily_cwd_to_litrN           += s->value[CWD_LITRN]  * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr2N          += s->value[CWD_LITR2N] * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr3N          += s->value[CWD_LITR3N] * 1e6 / g_settings->sizeCell;
biomass.c:		c->daily_cwd_to_litr4N          += s->value[CWD_LITR4N] * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_N                        += s->value[CWD_LITRN]  * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_2N                       += s->value[CWD_LITR2N] * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_3N                       += s->value[CWD_LITR3N] * 1e6 / g_settings->sizeCell;
biomass.c:		c->cwd_4N                       += s->value[CWD_LITR4N] * 1e6 / g_settings->sizeCell;
canopy_cover.c:	logger(g_debug_log,"\n*DBHDC FUNCTION for %s for %d*\n", s->name, year);
canopy_cover.c:	previous_dbhdc_eff  = s->value[DBHDC_EFF];
canopy_cover.c:	logger(g_debug_log,"-DBHDC (old)         = %f\n", s->value[DBHDC_EFF]);
canopy_cover.c:	temp_crown_area     = ( s->value[MAX_LAYER_COVER] * g_settings->sizeCell ) / ( c->tree_layers[layer].layer_density * g_settings->sizeCell );
canopy_cover.c:	s->value[DBHDC_EFF] = temp_crown_diameter / d->value;
canopy_cover.c:	logger(g_debug_log,"-DBHDC (new)         = %f\n", s->value[DBHDC_EFF]);
canopy_cover.c:    //printf("-temp_crown_area     = %f\n", s->value[MAX_LAYER_COVER]);
canopy_cover.c:    //printf("DBHDC_EFF     = %f\n", s->value[DBHDC_EFF]);
canopy_cover.c:	if ( ( s->counter[YOS] ) && ( s->value[DBHDC_EFF] > ( previous_dbhdc_eff + ( previous_dbhdc_eff * max_dbhdc_incr ) ) ) )
canopy_cover.c:		s->value[DBHDC_EFF] = previous_dbhdc_eff + ( previous_dbhdc_eff * max_dbhdc_incr );
canopy_cover.c:    //printf("DBHDC_EFF after check    = %f\n", s->value[DBHDC_EFF]);
canopy_cover.c:	if ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 )
canopy_cover.c:		s->value[DBHDCMAX] = 0.9667 * pow ( d->value , -0.287 );
canopy_cover.c:		s->value[DBHDCMAX] = 0.8543 * pow ( d->value , -0.254 );
canopy_cover.c:	if ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 )
canopy_cover.c:		s->value[DBHDCMAX] = 2.3298 * pow ( d->value , -0.643 );  //  the canopy_cover_projection increase less compared to the parameters set above
canopy_cover.c:		s->value[DBHDCMAX] = 0.9667* pow ( d->value , -0.287);
canopy_cover.c:	//s->value[DBHDCMAX] = 0.5045 * pow ( d->value , -0.309 );  // Ritter's equation for conifer
canopy_cover.c:	s->value[DBHDCMAX] = 0.55 * pow ( d->value , -0.309 );  // Ritter's equation for conifer
canopy_cover.c:	//	s->value[DBHDCMAX] = 0.8543 * pow ( d->value , -0.254 );  // correct this one for conifers
canopy_cover.c:	if ( s->value[DBHDC_EFF] > s->value[DBHDCMAX] )
canopy_cover.c:		logger(g_debug_log,"-DBHDC effective (%f) > DBHDCMAX (%f) \n", s->value[DBHDC_EFF] , s->value[DBHDCMAX]);
canopy_cover.c:		s->value[DBHDC_EFF] = s->value[DBHDCMAX];
canopy_cover.c:    //printf("DBHDC_EFF after check2    = %f\n", s->value[DBHDC_EFF]);
canopy_cover.c:	if ( s->counter[YOS] && ( previous_dbhdc_eff > s->value[DBHDC_EFF] ) )
canopy_cover.c:		self_pruning ( c, height, dbh, age, species, previous_dbhdc_eff, s->value[DBHDC_EFF] );
canopy_cover.c:	logger(g_debug_log,"-DBHDC effective     = %f\n", s->value[DBHDC_EFF]);
canopy_cover.c:	CHECK_CONDITION (s->value[DBHDC_EFF], < , ZERO);
canopy_cover.c:	logger(g_debug_log,"\n*CANOPY COVER for %s *\n", s->name);
canopy_cover.c:	s->value[CANOPY_COVER_PROJ] = s->value[CROWN_AREA_PROJ] * s->counter[N_TREE] / g_settings->sizeCell;
canopy_cover.c:	logger(g_debug_log, "-Canopy Projected Cover   = %f %%\n", s->value[CANOPY_COVER_PROJ] * 100.);
canopy_cover.c:	CHECK_CONDITION( s->value[CANOPY_COVER_PROJ] ,  > , s->value[CANOPY_COVER_PROJ] + eps );
canopy_cover.c:	//s->value[CANOPY_COVER_EXP] = (s->value[CROWN_AREA_EXP] * s->counter[N_TREE]) / g_settings->sizeCell ;
canopy_cover.c:	//logger(g_debug_log, "-Canopy Exposed Cover     = %f %%\n", s->value[CANOPY_COVER_EXP]  * 100.);
canopy_cover.c:	//printf("CANOPY_COVER_EXP = %f\n", s->value[CANOPY_COVER_EXP]);
canopy_cover.c:	//if (s->value[CANOPY_COVER_EXP] > 1)s->value[CANOPY_COVER_EXP] = 1.;
canopy_evapotranspiration.c:	m_final       = s->value[F_LIGHT]       * s->value[F_SW] * s->value[F_T] * s->value[F_VPD] * s->value[F_AGE];
canopy_evapotranspiration.c:	m_final_sun   = s->value[F_LIGHT_SUN]   * s->value[F_SW] * s->value[F_T] * s->value[F_VPD] * s->value[F_AGE];
canopy_evapotranspiration.c:	m_final_shade = s->value[F_LIGHT_SHADE] * s->value[F_SW] * s->value[F_T] * s->value[F_VPD] * s->value[F_AGE];
canopy_evapotranspiration.c:	s->value[STOMATAL_CONDUCTANCE]       = gl_x * m_final       * g_corr;
canopy_evapotranspiration.c:	s->value[STOMATAL_SUN_CONDUCTANCE]   = gl_x * m_final_sun   * g_corr;
canopy_evapotranspiration.c:	s->value[STOMATAL_SHADE_CONDUCTANCE] = gl_x * m_final_shade * g_corr;
canopy_evapotranspiration.c:	gl_bl = s->value[BLCOND] * g_corr;
canopy_evapotranspiration.c:	s->value[CANOPY_BLCOND] = gl_bl * s->value[LAI_PROJ];
canopy_evapotranspiration.c:	gl_c = s->value[CUTCOND] * g_corr;
canopy_evapotranspiration.c:	if ( g_settings->PSN_mod != 2 )
canopy_evapotranspiration.c:		gl_x = (s->value[F_CO2_TR] / 0.9116) * s->value[MAXCOND];
canopy_evapotranspiration.c:	s->value[LEAF_CONDUCTANCE]       = (gl_bl * (s->value[STOMATAL_CONDUCTANCE]       + gl_c)) / (gl_bl + s->value[STOMATAL_CONDUCTANCE]       + gl_c);
canopy_evapotranspiration.c:	s->value[LEAF_SUN_CONDUCTANCE]   = (gl_bl * (s->value[STOMATAL_SUN_CONDUCTANCE]   + gl_c)) / (gl_bl + s->value[STOMATAL_SUN_CONDUCTANCE]   + gl_c);
canopy_evapotranspiration.c:	s->value[LEAF_SHADE_CONDUCTANCE] = (gl_bl * (s->value[STOMATAL_SHADE_CONDUCTANCE] + gl_c)) / (gl_bl + s->value[STOMATAL_SHADE_CONDUCTANCE] + gl_c);
canopy_evapotranspiration.c:	gc_e_wv       = gl_e_wv * s->value[LAI_PROJ];
canopy_evapotranspiration.c:	gc_sh         = gl_sh   * s->value[LAI_PROJ];
canopy_evapotranspiration.c:	if( s->value[LAI_PROJ] > 0. )
canopy_evapotranspiration.c:		if( s->value[CANOPY_WATER] > 0. )
canopy_evapotranspiration.c:			net_rad = s->value[SW_RAD_ABS];
canopy_evapotranspiration.c:			net_rad = s->value[NET_RAD_ABS];
canopy_evapotranspiration.c:			s->value[CANOPY_EVAPO] = evapo;
canopy_evapotranspiration.c:			evap_daylength_sec     = s->value[CANOPY_WATER] / s->value[CANOPY_EVAPO];
canopy_evapotranspiration.c:				++ s->counter[DAYS_WITH_CANOPY_WET];
canopy_evapotranspiration.c:				s->value[CANOPY_FRAC_DAY_TRANSP] = 0.;
canopy_evapotranspiration.c:				s->value[CANOPY_TRANSP] = 0.;
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO] = evapo;
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO_TRANSP] = s->value[CANOPY_EVAPO] + s->value[CANOPY_TRANSP];
canopy_evapotranspiration.c:				s->value[CANOPY_WATER] -= s->value[CANOPY_EVAPO];
canopy_evapotranspiration.c:				s->counter[DAYS_WITH_CANOPY_WET] = 0;
canopy_evapotranspiration.c:				evapo = s->value[CANOPY_WATER];
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO]  = evapo;
canopy_evapotranspiration.c:				s->value[CANOPY_WATER] -= s->value[CANOPY_EVAPO];
canopy_evapotranspiration.c:				s->value[CANOPY_FRAC_DAY_TRANSP] = transp_daylength_sec / meteo_daily->daylength_sec;
canopy_evapotranspiration.c:				rv = 1. / s->value[LEAF_SUN_CONDUCTANCE];
canopy_evapotranspiration.c:				net_rad = ( s->value[SW_RAD_ABS_SUN]  / s->value[LAI_SUN_PROJ] ) * s->value[F_LIGHT_SUN_MAKELA];
canopy_evapotranspiration.c:				net_rad = ( s->value[NET_RAD_ABS_SUN] / s->value[LAI_SUN_PROJ] ) * s->value[F_LIGHT_SUN_MAKELA];
canopy_evapotranspiration.c:				s->value[CANOPY_TRANSP_SUN] = leaf_transp *  ( transp_daylength_sec * s->value[LAI_SUN_PROJ] * s->value[DAILY_CANOPY_COVER_PROJ] );
canopy_evapotranspiration.c:				rv = 1. / s->value[LEAF_SHADE_CONDUCTANCE];
canopy_evapotranspiration.c:				net_rad = ( s->value[SW_RAD_ABS_SHADE]  / s->value[LAI_SHADE_PROJ] ) * s->value[F_LIGHT_SHADE_MAKELA];
canopy_evapotranspiration.c:				net_rad = ( s->value[NET_RAD_ABS_SHADE] / s->value[LAI_SHADE_PROJ] ) * s->value[F_LIGHT_SHADE_MAKELA];
canopy_evapotranspiration.c:				s->value[CANOPY_TRANSP_SHADE] = leaf_transp * ( transp_daylength_sec * s->value[LAI_SHADE_PROJ] * s->value[DAILY_CANOPY_COVER_PROJ] );
canopy_evapotranspiration.c:				s->value[CANOPY_TRANSP] = s->value[CANOPY_TRANSP_SUN] + s->value[CANOPY_TRANSP_SHADE];
canopy_evapotranspiration.c:				if( s->value[CANOPY_TRANSP] < 0. ) s->value[CANOPY_TRANSP]  = 0.;
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO_TRANSP] = s->value[CANOPY_EVAPO] + s->value[CANOPY_TRANSP];
canopy_evapotranspiration.c:			if ( ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 ) &&
canopy_evapotranspiration.c:					( s->counter[DAYS_LEAFFALL] == s->counter[LEAF_FALL_COUNTER] ) )
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO]       += s->value[CANOPY_WATER];
canopy_evapotranspiration.c:				s->value[CANOPY_WATER]        = 0.;
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO_TRANSP] = s->value[CANOPY_EVAPO] + s->value[CANOPY_TRANSP];
canopy_evapotranspiration.c:			c->canopy_water_stored           += ( s->value[CANOPY_INT_RAIN] - s->value[CANOPY_EVAPO] );
canopy_evapotranspiration.c:		else if ( s->value[CANOPY_SNOW] > 0. )
canopy_evapotranspiration.c:			net_rad = s->value[SW_RAD_ABS]  * SNOW_ABS * 0.001 ;
canopy_evapotranspiration.c:			net_rad = s->value[NET_RAD_ABS] * SNOW_ABS * 0.001 ;
canopy_evapotranspiration.c:			s->value[CANOPY_EVAPO] = subl_melt;
canopy_evapotranspiration.c:			subl_melt_daylength_sec     = s->value[CANOPY_SNOW] / s->value[CANOPY_EVAPO];
canopy_evapotranspiration.c:				++s->counter[DAYS_WITH_CANOPY_SNOW];
canopy_evapotranspiration.c:				s->value[CANOPY_FRAC_DAY_TRANSP] = 0.;
canopy_evapotranspiration.c:				s->value[CANOPY_TRANSP] = 0.;
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO] = subl_melt;
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO_TRANSP] = s->value[CANOPY_EVAPO] + s->value[CANOPY_TRANSP];
canopy_evapotranspiration.c:				s->value[CANOPY_SNOW] -= s->value[CANOPY_EVAPO];
canopy_evapotranspiration.c:				s->counter[DAYS_WITH_CANOPY_SNOW] = 0;
canopy_evapotranspiration.c:				subl_melt = s->value[CANOPY_SNOW];
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO]  = subl_melt;
canopy_evapotranspiration.c:				s->value[CANOPY_SNOW]  -= s->value[CANOPY_EVAPO];
canopy_evapotranspiration.c:				s->value[CANOPY_FRAC_DAY_TRANSP] = subl_melt_daylength_sec / meteo_daily->daylength_sec;
canopy_evapotranspiration.c:				rv = 1. / s->value[LEAF_SUN_CONDUCTANCE];
canopy_evapotranspiration.c:				net_rad = ( s->value[SW_RAD_ABS_SUN]  / s->value[LAI_SUN_PROJ] ) * s->value[F_LIGHT_SUN_MAKELA];
canopy_evapotranspiration.c:				net_rad = ( s->value[NET_RAD_ABS_SUN] / s->value[LAI_SUN_PROJ] ) * s->value[F_LIGHT_SUN_MAKELA];
canopy_evapotranspiration.c:				s->value[CANOPY_TRANSP_SUN] = leaf_transp * ( transp_daylength_sec * s->value[LAI_SUN_PROJ] * s->value[DAILY_CANOPY_COVER_PROJ] );
canopy_evapotranspiration.c:				rv = 1. / s->value[LEAF_SHADE_CONDUCTANCE];
canopy_evapotranspiration.c:				net_rad = ( s->value[SW_RAD_ABS_SHADE]  / s->value[LAI_SHADE_PROJ] ) * s->value[F_LIGHT_SHADE_MAKELA];
canopy_evapotranspiration.c:				net_rad = ( s->value[NET_RAD_ABS_SHADE] / s->value[LAI_SHADE_PROJ] ) * s->value[F_LIGHT_SHADE_MAKELA];
canopy_evapotranspiration.c:				s->value[CANOPY_TRANSP_SHADE] = leaf_transp * ( transp_daylength_sec * s->value[LAI_SHADE_PROJ] * s->value[DAILY_CANOPY_COVER_PROJ] );
canopy_evapotranspiration.c:				s->value[CANOPY_TRANSP] = s->value[CANOPY_TRANSP_SUN] + s->value[CANOPY_TRANSP_SHADE];
canopy_evapotranspiration.c:				if( s->value[CANOPY_TRANSP] < 0. ) s->value[CANOPY_TRANSP]  = 0.;
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO_TRANSP] = s->value[CANOPY_EVAPO] + s->value[CANOPY_TRANSP];
canopy_evapotranspiration.c:			if ( ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 ) &&
canopy_evapotranspiration.c:					( s->counter[DAYS_LEAFFALL] == s->counter[LEAF_FALL_COUNTER] ) )
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO]       += s->value[CANOPY_SNOW];
canopy_evapotranspiration.c:				s->value[CANOPY_SNOW]         = 0.;
canopy_evapotranspiration.c:				s->value[CANOPY_EVAPO_TRANSP] = s->value[CANOPY_EVAPO] + s->value[CANOPY_TRANSP];
canopy_evapotranspiration.c:			c->canopy_snow_stored                += ( s->value[CANOPY_INT_SNOW] - s->value[CANOPY_EVAPO] );
canopy_evapotranspiration.c:			s->value[CANOPY_EVAPO] = evapo + subl + melt;
canopy_evapotranspiration.c:			s->value[CANOPY_FRAC_DAY_TRANSP] = 1.;
canopy_evapotranspiration.c:			rv = 1. / s->value[LEAF_SUN_CONDUCTANCE];
canopy_evapotranspiration.c:			net_rad = ( s->value[SW_RAD_ABS_SUN] / s->value[LAI_SUN_PROJ] ) * s->value[F_LIGHT_SUN_MAKELA];
canopy_evapotranspiration.c:			net_rad = ( s->value[NET_RAD_ABS_SUN] / s->value[LAI_SUN_PROJ] ) * s->value[F_LIGHT_SUN_MAKELA];
canopy_evapotranspiration.c:			s->value[CANOPY_TRANSP_SUN] = leaf_transp * ( transp_daylength_sec * s->value[LAI_SUN_PROJ] * s->value[DAILY_CANOPY_COVER_PROJ] );
canopy_evapotranspiration.c:			rv = 1. / s->value[LEAF_SHADE_CONDUCTANCE];
canopy_evapotranspiration.c:			net_rad = ( s->value[SW_RAD_ABS_SHADE] / s->value[LAI_SHADE_PROJ] ) * s->value[F_LIGHT_SHADE_MAKELA];
canopy_evapotranspiration.c:			net_rad = ( s->value[NET_RAD_ABS_SHADE] / s->value[LAI_SHADE_PROJ] ) * s->value[F_LIGHT_SHADE_MAKELA];
canopy_evapotranspiration.c:			s->value[CANOPY_TRANSP_SHADE] = leaf_transp * ( transp_daylength_sec * s->value[LAI_SHADE_PROJ] * s->value[DAILY_CANOPY_COVER_PROJ] );
canopy_evapotranspiration.c:			s->value[CANOPY_TRANSP] = s->value[CANOPY_TRANSP_SUN] + s->value[CANOPY_TRANSP_SHADE];
canopy_evapotranspiration.c:			if(s->value[CANOPY_TRANSP] < 0.) s->value[CANOPY_TRANSP] = 0.;
canopy_evapotranspiration.c:			s->value[CANOPY_EVAPO_TRANSP] = s->value[CANOPY_EVAPO] + s->value[CANOPY_TRANSP];
canopy_evapotranspiration.c:		s->value[CANOPY_INT_RAIN]     = 0.;
canopy_evapotranspiration.c:		s->value[CANOPY_WATER]        = 0.;
canopy_evapotranspiration.c:		s->value[CANOPY_INT_SNOW]     = 0.;
canopy_evapotranspiration.c:		s->value[CANOPY_SNOW]         = 0.;
canopy_evapotranspiration.c:		s->value[CANOPY_TRANSP]       = 0.;
canopy_evapotranspiration.c:		s->value[CANOPY_TRANSP_SHADE] = 0.;
canopy_evapotranspiration.c:		s->value[CANOPY_EVAPO]        = 0.;
canopy_evapotranspiration.c:		s->value[CANOPY_EVAPO_TRANSP] = 0.;
canopy_evapotranspiration.c:	if ( s->value[CANOPY_TRANSP] > c->asw )
canopy_evapotranspiration.c:		s->value[CANOPY_TRANSP] *= s->value[F_SW];
canopy_evapotranspiration.c:		if ( s->value[CANOPY_TRANSP] > c->asw )
canopy_evapotranspiration.c:			s->value[CANOPY_TRANSP] = 0.;
canopy_evapotranspiration.c:		CHECK_CONDITION ( s->value[CANOPY_TRANSP] , > , c->asw );
canopy_evapotranspiration.c:	s->value[MONTHLY_CANOPY_TRANSP]       += s->value[CANOPY_TRANSP];
canopy_evapotranspiration.c:	s->value[MONTHLY_CANOPY_TRANSP_SUN]   += s->value[CANOPY_TRANSP_SUN];
canopy_evapotranspiration.c:	s->value[MONTHLY_CANOPY_TRANSP_SHADE] += s->value[CANOPY_TRANSP_SHADE];
canopy_evapotranspiration.c:	s->value[MONTHLY_CANOPY_EVAPO_TRANSP] += s->value[CANOPY_EVAPO_TRANSP];
canopy_evapotranspiration.c:	s->value[YEARLY_CANOPY_TRANSP]        += s->value[CANOPY_TRANSP];
canopy_evapotranspiration.c:	s->value[YEARLY_CANOPY_TRANSP_SUN]    += s->value[CANOPY_TRANSP_SUN];
canopy_evapotranspiration.c:	s->value[YEARLY_CANOPY_TRANSP_SHADE]  += s->value[CANOPY_TRANSP_SHADE];
canopy_evapotranspiration.c:	s->value[YEARLY_CANOPY_EVAPO_TRANSP]  += s->value[CANOPY_EVAPO_TRANSP];
canopy_evapotranspiration.c:	c->daily_canopy_evapo                 += s->value[CANOPY_EVAPO];
canopy_evapotranspiration.c:	c->daily_canopy_transp                += s->value[CANOPY_TRANSP];
canopy_evapotranspiration.c:	c->daily_canopy_et                    += s->value[CANOPY_EVAPO_TRANSP];
canopy_interception.c:	if( ( meteo_daily->prcp > 0.) && ( s->value[LAI_PROJ] > 0. ) && ( ! s->value[CANOPY_WATER] ) && ( ! s->value[CANOPY_SNOW] ) )
canopy_interception.c:			s->value[CANOPY_INT]      = s->value[INT_COEFF] * meteo_daily->rain * ( 1. - exp(-0.5 * s->value[LAI_PROJ])) * s->value[DAILY_CANOPY_COVER_PROJ];
canopy_interception.c:			Int_max_rain              = 0.3 * s->value[ALL_LAI_PROJ];
canopy_interception.c:			s->value[CANOPY_INT_RAIN] = MIN( Int_max_rain , meteo_daily->rain );
canopy_interception.c:				Int_max_rain = 0.284 + 0.092 * s->value[LAI_PROJ] * ( 1. - exp ( -0.231 * meteo_daily->rain ) );
canopy_interception.c:				s->value[CANOPY_INT_RAIN] = MIN( Int_max_rain , meteo_daily->rain );
canopy_interception.c:			s->value[CANOPY_WATER]    = s->value[CANOPY_INT_RAIN];
canopy_interception.c:			s->value[CANOPY_INT_SNOW] = 0.;
canopy_interception.c:			CHECK_CONDITION( s->value[CANOPY_INT_RAIN], > , meteo_daily->rain );
canopy_interception.c:			Int_max_snow              = 4.4 * s->value[LAI_PROJ];
canopy_interception.c:			s->value[CANOPY_INT_SNOW] = 0.;
canopy_interception.c:			//s->value[CANOPY_INT_SNOW] = s->value[CANOPY_SNOW] + 0.7 * ( Int_max_snow - s->value[CANOPY_SNOW] ) * (1. - exp( - ( meteo_daily->snow / Int_max_snow ) ) ) * s->value[DAILY_CANOPY_COVER_PROJ];
canopy_interception.c:			s->value[CANOPY_INT_SNOW] = s->value[CANOPY_SNOW] + 0.7 * ( Int_max_snow - s->value[CANOPY_SNOW] ) * (1. - exp( - ( meteo_daily->snow / Int_max_snow ) ) ) ;
canopy_interception.c:			s->value[CANOPY_SNOW]     = s->value[CANOPY_INT_SNOW];
canopy_interception.c:			s->value[CANOPY_INT_RAIN] = 0.;
canopy_interception.c:			CHECK_CONDITION(s->value[CANOPY_INT_SNOW], > , meteo_daily->snow);
canopy_interception.c:                 s->value[CANOPY_SNOW]  = s->value[CANOPY_SNOW]  * s->value[DAILY_CANOPY_COVER_PROJ];
canopy_interception.c:                 s->value[CANOPY_WATER] = s->value[CANOPY_WATER] * s->value[DAILY_CANOPY_COVER_PROJ];
canopy_interception.c:	c->temp_int_rain += s->value[CANOPY_INT_RAIN]* s->value[DAILY_CANOPY_COVER_PROJ];
canopy_interception.c:	c->temp_int_snow += s->value[CANOPY_INT_SNOW]* s->value[DAILY_CANOPY_COVER_PROJ];
canopy_interception.c:	//c->temp_int_rain += s->value[CANOPY_INT_RAIN];
canopy_interception.c:	//c->temp_int_snow += s->value[CANOPY_INT_SNOW];
canopy_interception.c:		//c->daily_canopy_rain_int += s->value[CANOPY_INT_RAIN];
canopy_interception.c:		c->daily_canopy_rain_int += s->value[CANOPY_INT_RAIN]* s->value[DAILY_CANOPY_COVER_PROJ];
canopy_interception.c:		//c->daily_canopy_snow_int += s->value[CANOPY_INT_SNOW];
canopy_interception.c:		c->daily_canopy_snow_int += s->value[CANOPY_INT_SNOW]* s->value[DAILY_CANOPY_COVER_PROJ];
canopy_interception.c:	s->value[MONTHLY_CANOPY_INT] += (s->value[CANOPY_INT_RAIN] + s->value[CANOPY_INT_SNOW]);
canopy_interception.c:	s->value[YEARLY_CANOPY_INT]  += (s->value[CANOPY_INT_RAIN] + s->value[CANOPY_INT_SNOW]);
canopy_interception.c:        s->value[CANOPY_INT_SNOW] = s->value[CANOPY_INT_SNOW] * s->value[DAILY_CANOPY_COVER_PROJ];
canopy_interception.c:        s->value[CANOPY_INT_RAIN] = s->value[CANOPY_INT_RAIN] * s->value[DAILY_CANOPY_COVER_PROJ];
canopy_net_radiation.c:	s->value[NET_RAD] = s->value[SW_RAD] + s->value[NET_LW_RAD];
canopy_net_radiation.c:	logger(g_debug_log, "Net SW Radiation for canopy = %g W/m2\n", s->value[SW_RAD]);
canopy_net_radiation.c:	logger(g_debug_log, "Net LW Radiation for canopy = %g W/m2\n", s->value[NET_LW_RAD]);
canopy_net_radiation.c:	logger(g_debug_log, "Net Radiation for canopy    = %g W/m2\n", s->value[NET_RAD]);
canopy_radiation_lw_band.c://	if(s->value[LAI] < 1.0) leaf_cell_cover_eff = s->value[LAI] * s->value[CANOPY_COVER_EXP];
canopy_radiation_lw_band.c://	else leaf_cell_cover_eff = s->value[CANOPY_COVER_EXP];
canopy_radiation_lw_band.c:	LW_emis_canopy_frac = (1. - exp(- s->value[LAI_PROJ]));
canopy_radiation_lw_band.c:	LW_abs_canopy_frac = (1. - exp(- s->value[LAI_PROJ] * s->value[K]));
canopy_radiation_lw_band.c:	s->value[LW_RAD_EMIT] = (LW_emis_canopy_frac * SBC_W * pow(s->value[CANOPY_TEMP_K], 4.)) * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_PROJ];
canopy_radiation_lw_band.c:	logger(g_debug_log, "canopy emitted long wave fluxes to atmosphere = %g (W/m2)\n", s->value[LW_RAD_EMIT]);
canopy_radiation_lw_band.c:	s->value[NET_LW_RAD] =
canopy_radiation_lw_band.c:			s->value[LW_RAD_EMIT] -
canopy_radiation_lw_band.c:	logger(g_debug_log, "net canopy long wave fluxes (CLM 4.5) = %g (W/m2)\n", s->value[NET_LW_RAD]);
canopy_radiation_lw_band.c:	s->value[LW_RAD_TRANSM] = (((1. - LW_emis_canopy_frac) * meteo_daily->atm_lw_downward_W) +
canopy_radiation_lw_band.c:			s->value[LW_RAD_EMIT]  + (4. * LW_emis_canopy_frac * SBC_W * pow (s->value[CANOPY_TEMP_K], 3.) *
canopy_radiation_lw_band.c:			(s->value[CANOPY_TEMP_K_OLD] - s->value[CANOPY_TEMP_K])) * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_PROJ]) +
canopy_radiation_lw_band.c:			(meteo_daily->atm_lw_downward_W * (1. - /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_PROJ]));
canopy_radiation_lw_band.c:	logger(g_debug_log, "long wave fluxes below the canopy (CLM 4.5) = %g (W/m2)\n", s->value[LW_RAD_TRANSM]);
canopy_radiation_lw_band.c:	c->net_lw_rad_for_soil = c->soil_long_wave_emitted - (EMSOIL * s->value[LW_RAD_TRANSM]) - (EMSOIL * meteo_daily->atm_lw_downward_W);
canopy_radiation_lw_band.c://	s->value[LW_RAD_ABS] = LW_abs_canopy_frac * (meteo_daily->atm_lw_downward_W + lw_soil_emit - (2. * s->value[LW_RAD_EMIT]));
canopy_radiation_lw_band.c://	//logger(g_debug_log, "abs canopy long wave fluxes (Gouttevin)= %g (W/m2)\n", s->value[LW_RAD_ABS]);
canopy_radiation_lw_band.c://	s->value[LW_RAD_ABS] = LW_abs_canopy_frac *(meteo_daily->atm_lw_downward_W + lw_soil_emit - (2. * s->value[LW_RAD_EMIT])) * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP];
canopy_radiation_lw_band.c://	logger(g_debug_log, "abs canopy long wave fluxes (Gouttevin-modified)= %g (W/m2)\n", s->value[LW_RAD_ABS]);
canopy_radiation_lw_band.c://	lw_atm_temp = (lw_atm_trasm_canopy_to_soil * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]) + (meteo_daily->atm_lw_downward_W * (1. - /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]));
canopy_radiation_lw_band.c://	lw_atm_trasm_canopy_to_soil_reflected_soil_transm_canopy_to_atm = (lw_atm_trasm_canopy_to_soil_reflected_soil * LW_transm_canopy_frac * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]) +
canopy_radiation_lw_band.c://			((lw_atm_trasm_canopy_to_soil_reflected_soil) * (1. - /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]));
canopy_radiation_lw_band.c://	lw_canopy_emit_to_atm = (LW_emis_canopy_frac * SBC_W * pow(s->value[CANOPY_TEMP_K], 4.) * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]);
canopy_radiation_lw_band.c://	lw_canopy_emit_to_soil = (LW_emis_canopy_frac * SBC_W * pow(s->value[CANOPY_TEMP_K], 4.) * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]);
canopy_radiation_lw_band.c://	lw_canopy_emit_to_soil_reflected_to_soil_transm_canopy_to_atm = (lw_canopy_emit_to_soil_reflected_to_soil * LW_emis_canopy_frac * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]) +
canopy_radiation_lw_band.c://			((lw_canopy_emit_to_soil_reflected_to_soil ) * (1. - /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]));
canopy_radiation_lw_band.c://	lw_canopy_emit_to_atm_delta =  4. * LW_emis_canopy_frac * SBC_W * pow(s->value[CANOPY_TEMP_K_OLD], 3) * (s->value[CANOPY_TEMP_K_OLD] - s->value[CANOPY_TEMP_K]) * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP];
canopy_radiation_lw_band.c://	lw_canopy_emit_to_soil_delta =  (4. * LW_emis_canopy_frac * SBC_W * pow(s->value[CANOPY_TEMP_K_OLD], 3) * (s->value[CANOPY_TEMP_K_OLD] - s->value[CANOPY_TEMP_K])) * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP];
canopy_radiation_lw_band.c://	lw_canopy_emit_to_soil_delta_refl_soil_transm_canopy_to_atm = (lw_canopy_emit_to_soil_delta_refl_soil * LW_emis_canopy_frac * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]) +
canopy_radiation_lw_band.c://			((lw_canopy_emit_to_soil_delta_refl_soil ) * (1. - /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]));
canopy_radiation_lw_band.c://	lw_soil_emit_to_canopy_trasm_canopy_to_atm = (lw_soil_emit_to_canopy * LW_emis_canopy_frac * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]) +
canopy_radiation_lw_band.c://			((lw_soil_emit_to_canopy ) * (1. - /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]));
canopy_radiation_lw_band.c://	if(s->value[LAI] < 1.0) /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP] = s->value[LAI] * s->value[CANOPY_COVER_DBHDC];
canopy_radiation_lw_band.c://	else leaf_cell_cover_eff = s->value[CANOPY_COVER_DBHDC];
canopy_radiation_lw_band.c://	if(leaf_cell_cover_eff > 1.0) /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP] = 1.0;
canopy_radiation_sw_band.c:	s->value[PAR]             = meteo_daily->par  * s->value[DAILY_CANOPY_COVER_PROJ];
canopy_radiation_sw_band.c:	s->value[PAR_REFL_SUN]     = s->value[PAR]     * Light_refl_par_frac_sun;
canopy_radiation_sw_band.c:	s->value[PAR_SUN]          = s->value[PAR]     - s->value[PAR_REFL_SUN];
canopy_radiation_sw_band.c:	s->value[APAR_SUN]         = s->value[PAR_SUN] * Light_abs_frac_sun;
canopy_radiation_sw_band.c:	s->value[TRANSM_PAR_SUN]   = s->value[PAR_SUN] - s->value[APAR_SUN];
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[PAR_SUN] - s->value[TRANSM_PAR_SUN] ) - s->value[APAR_SUN] ), >, eps );
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[PAR]     - s->value[TRANSM_PAR_SUN] ) - ( s->value[PAR_REFL_SUN] + s->value[APAR_SUN] ) ), >, eps );
canopy_radiation_sw_band.c:	s->value[PAR_REFL_SHADE]   = s->value[TRANSM_PAR_SUN] * Light_refl_par_frac_shade;
canopy_radiation_sw_band.c:	s->value[PAR_SHADE]        = s->value[TRANSM_PAR_SUN] - s->value[PAR_REFL_SHADE];
canopy_radiation_sw_band.c:	s->value[APAR_SHADE]       = s->value[PAR_SHADE]      * Light_abs_frac_shade;
canopy_radiation_sw_band.c:	s->value[TRANSM_PAR_SHADE] = s->value[PAR_SHADE]      - s->value[APAR_SHADE];
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[PAR_SHADE]      - s->value[TRANSM_PAR_SHADE] ) - s->value[APAR_SHADE] ), >, eps );
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[TRANSM_PAR_SUN] - s->value[TRANSM_PAR_SHADE] ) - ( s->value[PAR_REFL_SHADE] + s->value[APAR_SHADE] ) ), >, eps );
canopy_radiation_sw_band.c:	s->value[APAR]             = s->value[APAR_SUN]     + s->value[APAR_SHADE];
canopy_radiation_sw_band.c:	s->value[PAR_REFL]         = s->value[PAR_REFL_SUN] + s->value[PAR_REFL_SHADE];
canopy_radiation_sw_band.c:	s->value[TRANSM_PAR]       = s->value[TRANSM_PAR_SHADE];
canopy_radiation_sw_band.c:	logger(g_debug_log,"APAR = %f par/m2\n", s->value[APAR]);
canopy_radiation_sw_band.c:	if ( s->value[PAR] )
canopy_radiation_sw_band.c:		s->value[fAPAR]        = s->value[APAR] / s->value[PAR];
canopy_radiation_sw_band.c:		s->value[fAPAR]        = 0.;
canopy_radiation_sw_band.c:	s->value[YEARLY_APAR]     += s->value[APAR];
canopy_radiation_sw_band.c:	CHECK_CONDITION(s->value[APAR],       <, ZERO );
canopy_radiation_sw_band.c:	CHECK_CONDITION(s->value[TRANSM_PAR], <, ZERO );
canopy_radiation_sw_band.c:	CHECK_CONDITION(s->value[APAR] + s->value[TRANSM_PAR], <, ZERO );
canopy_radiation_sw_band.c:	CHECK_CONDITION(fabs((s->value[APAR] + s->value[TRANSM_PAR] + s->value[PAR_REFL] )-s->value[PAR]), >, eps);
canopy_radiation_sw_band.c:	s->value[SW_RAD]              = meteo_daily->sw_downward_W * s->value[DAILY_CANOPY_COVER_PROJ];
canopy_radiation_sw_band.c:	s->value[SW_RAD_REFL_SUN]     = s->value[SW_RAD]     * Light_refl_sw_frac_sun;
canopy_radiation_sw_band.c:	s->value[SW_RAD_SUN]          = s->value[SW_RAD]     - s->value[SW_RAD_REFL_SUN];
canopy_radiation_sw_band.c:	s->value[SW_RAD_ABS_SUN]      = s->value[SW_RAD_SUN] * Light_abs_frac_sun;
canopy_radiation_sw_band.c:	s->value[SW_RAD_TRANSM_SUN]   = s->value[SW_RAD_SUN] - s->value[SW_RAD_ABS_SUN];
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[SW_RAD_SUN] - s->value[SW_RAD_TRANSM_SUN] ) - s->value[SW_RAD_ABS_SUN] ), >, eps );
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[SW_RAD]     - s->value[SW_RAD_TRANSM_SUN] ) - ( s->value[SW_RAD_REFL_SUN] + s->value[SW_RAD_ABS_SUN] ) ), >, eps );
canopy_radiation_sw_band.c:	s->value[SW_RAD_REFL_SHADE]   = s->value[SW_RAD_TRANSM_SUN] * Light_refl_sw_frac_shade;
canopy_radiation_sw_band.c:	s->value[SW_RAD_SHADE]        = s->value[SW_RAD_TRANSM_SUN] - s->value[SW_RAD_REFL_SHADE];
canopy_radiation_sw_band.c:	s->value[SW_RAD_ABS_SHADE]    = s->value[SW_RAD_SHADE]      * Light_abs_frac_shade;
canopy_radiation_sw_band.c:	s->value[SW_RAD_TRANSM_SHADE] = s->value[SW_RAD_SHADE]      - s->value[SW_RAD_ABS_SHADE];
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[SW_RAD_SHADE]      - s->value[SW_RAD_TRANSM_SHADE] ) - s->value[SW_RAD_ABS_SHADE] ), >, eps );
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[SW_RAD_TRANSM_SUN] - s->value[SW_RAD_TRANSM_SHADE] ) - ( s->value[SW_RAD_REFL_SHADE] + s->value[SW_RAD_ABS_SHADE] ) ), >, eps );
canopy_radiation_sw_band.c:	s->value[SW_RAD_ABS]          = s->value[SW_RAD_ABS_SUN]  + s->value[SW_RAD_ABS_SHADE];
canopy_radiation_sw_band.c:	s->value[SW_RAD_REFL]         = s->value[SW_RAD_REFL_SUN] + s->value[SW_RAD_REFL_SHADE];
canopy_radiation_sw_band.c:	s->value[SW_RAD_TRANSM]       = s->value[SW_RAD_TRANSM_SHADE];
canopy_radiation_sw_band.c:	logger(g_debug_log,"SW_RAD_ABS = %f W/m2\n", s->value[SW_RAD_ABS]);
canopy_radiation_sw_band.c:	CHECK_CONDITION(s->value[SW_RAD_ABS],    <, ZERO );
canopy_radiation_sw_band.c:	CHECK_CONDITION(s->value[SW_RAD_TRANSM], <, ZERO);
canopy_radiation_sw_band.c:	CHECK_CONDITION(s->value[SW_RAD_ABS] + s->value[SW_RAD_TRANSM], <, ZERO );
canopy_radiation_sw_band.c:	CHECK_CONDITION(fabs((s->value[SW_RAD_ABS] + s->value[SW_RAD_TRANSM] + s->value[SW_RAD_REFL] ) - s->value[SW_RAD]), >, eps);
canopy_radiation_sw_band.c:	s->value[NET_RAD]              = meteo_daily->Net_rad_threePG * s->value[DAILY_CANOPY_COVER_PROJ];
canopy_radiation_sw_band.c:        if ( s->value[NET_RAD] <= 0. )
canopy_radiation_sw_band.c:				s->value[NET_RAD] = 0.;
canopy_radiation_sw_band.c:	s->value[NET_RAD_REFL_SUN]     = 0.  ; // s->value[NET_RAD] * Light_refl_sw_frac_sun;
canopy_radiation_sw_band.c:	s->value[NET_RAD_SUN]          = s->value[NET_RAD]     - s->value[NET_RAD_REFL_SUN];
canopy_radiation_sw_band.c:	s->value[NET_RAD_ABS_SUN]      = s->value[NET_RAD_SUN] * Light_abs_frac_sun;
canopy_radiation_sw_band.c:	s->value[NET_RAD_TRANSM_SUN]   = s->value[NET_RAD_SUN] - s->value[NET_RAD_ABS_SUN];
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[NET_RAD_SUN] - s->value[NET_RAD_TRANSM_SUN] ) - s->value[NET_RAD_ABS_SUN] ), >, eps );
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[NET_RAD]     - s->value[NET_RAD_TRANSM_SUN] ) - ( s->value[NET_RAD_REFL_SUN] + s->value[NET_RAD_ABS_SUN] ) ), >, eps );
canopy_radiation_sw_band.c:	s->value[NET_RAD_REFL_SHADE]   = 0. ; // s->value[NET_RAD_TRANSM_SUN] * Light_refl_sw_frac_shade;
canopy_radiation_sw_band.c:	s->value[NET_RAD_SHADE]        = s->value[NET_RAD_TRANSM_SUN] - s->value[NET_RAD_REFL_SHADE];
canopy_radiation_sw_band.c:	s->value[NET_RAD_ABS_SHADE]    = s->value[NET_RAD_SHADE]      * Light_abs_frac_shade;
canopy_radiation_sw_band.c:	s->value[NET_RAD_TRANSM_SHADE] = s->value[NET_RAD_SHADE]      - s->value[NET_RAD_ABS_SHADE];
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[NET_RAD_SHADE]      - s->value[NET_RAD_TRANSM_SHADE] ) - s->value[NET_RAD_ABS_SHADE] ), >, eps );
canopy_radiation_sw_band.c:	CHECK_CONDITION ( fabs ( ( s->value[NET_RAD_TRANSM_SUN] - s->value[NET_RAD_TRANSM_SHADE] ) - ( s->value[NET_RAD_REFL_SHADE] + s->value[NET_RAD_ABS_SHADE] ) ), >, eps );
canopy_radiation_sw_band.c:	s->value[NET_RAD_ABS]          = s->value[NET_RAD_ABS_SUN]  + s->value[NET_RAD_ABS_SHADE];
canopy_radiation_sw_band.c:	s->value[NET_RAD_REFL]         = s->value[NET_RAD_REFL_SUN] + s->value[NET_RAD_REFL_SHADE];
canopy_radiation_sw_band.c:	s->value[NET_RAD_TRANSM]       = s->value[NET_RAD_TRANSM_SHADE];
canopy_radiation_sw_band.c:	logger(g_debug_log,"NET_RAD_ABS = %f W/m2\n", s->value[NET_RAD_ABS]);
canopy_radiation_sw_band.c:	CHECK_CONDITION(s->value[NET_RAD_ABS],    <, ZERO );   // NET_RAD forced to 0 if negative to avoid Transpiration values <0 
canopy_radiation_sw_band.c:	CHECK_CONDITION(s->value[NET_RAD_TRANSM], <, ZERO);
canopy_radiation_sw_band.c:	CHECK_CONDITION(s->value[NET_RAD_ABS] + s->value[NET_RAD_TRANSM], <, ZERO );
canopy_radiation_sw_band.c:	CHECK_CONDITION(fabs((s->value[NET_RAD_ABS] + s->value[NET_RAD_TRANSM] + s->value[NET_RAD_REFL] )-s->value[NET_RAD]), >, eps);
canopy_radiation_sw_band.c:	if(s->value[PPFD_ABS_SHADE] < 0.0)
canopy_radiation_sw_band.c:		s->value[PPFD_ABS_SHADE]  = 0.0;
canopy_radiation_sw_band.c:	if(s->value[LAI_SUN] > 0.0 && s->value[LAI_SHADE] > 0.0)
canopy_radiation_sw_band.c:		s->value[PPFD_ABS_SUN] /= s->value[LAI_SUN];
canopy_radiation_sw_band.c:		s->value[PPFD_ABS_SHADE] /= s->value[LAI_SHADE];
canopy_radiation_sw_band.c:		s->value[PPFD_ABS_SUN] = s->value[PPFD_ABS_SHADE] = 0.0;
canopy_radiation_sw_band.c:	s->value[PPFD_ABS] = s->value[PPFD_ABS_SUN] + s->value[PPFD_ABS_SHADE];
canopy_radiation_sw_band.c:	k = s->value[K];
canopy_radiation_sw_band.c:	Light_trasm_frac       = exp ( - k * s->value[LAI_PROJ]) * s->value[DAILY_CANOPY_COVER_PROJ];
canopy_radiation_sw_band.c:	Light_trasm_frac_sun   = exp ( - k * s->value[LAI_SUN_PROJ]) * s->value[DAILY_CANOPY_COVER_PROJ];
canopy_radiation_sw_band.c:	Light_trasm_frac_shade = exp ( - k * s->value[LAI_SHADE_PROJ]) * s->value[DAILY_CANOPY_COVER_PROJ] ;
canopy_radiation_sw_band.c:	Light_trasm_frac       = exp ( - k * s->value[LAI_PROJ]);
canopy_radiation_sw_band.c:	Light_trasm_frac_sun   = exp ( - k * s->value[LAI_SUN_PROJ]);
canopy_radiation_sw_band.c:	Light_trasm_frac_shade = exp ( - k * s->value[LAI_SHADE_PROJ]);
canopy_radiation_sw_band.c:	Light_refl_sw_frac             = s->value[ALBEDO];
canopy_radiation_sw_band.c:	Light_refl_sw_frac_sun         = s->value[ALBEDO]         /* * Light_abs_frac_sun */;
canopy_radiation_sw_band.c:	Light_refl_sw_frac_shade       = s->value[ALBEDO]         /* * Light_abs_frac_shade */;
canopy_radiation_sw_band.c:	Light_refl_net_rad_frac        = s->value[ALBEDO];
canopy_radiation_sw_band.c:	Light_refl_net_rad_frac_sun    = s->value[ALBEDO]         /* * Light_abs_frac_sun */;
canopy_radiation_sw_band.c:	Light_refl_net_rad_frac_shade  = s->value[ALBEDO]         /* * Light_abs_frac_shade */;
canopy_radiation_sw_band.c:	Light_refl_par_frac            = (s->value[ALBEDO] / 3. );
canopy_radiation_sw_band.c:	Light_refl_par_frac_sun        = (s->value[ALBEDO] / 3. ) /* * Light_abs_frac_sun */;
canopy_radiation_sw_band.c:	Light_refl_par_frac_shade      = (s->value[ALBEDO] / 3. ) /* * Light_abs_frac_shade */;
canopy_radiation_sw_band.c:	c->temp_apar       += s->value[APAR];
canopy_radiation_sw_band.c:	c->apar            += s->value[APAR];
canopy_radiation_sw_band.c:	c->temp_par_refl   += s->value[PAR_REFL];
canopy_radiation_sw_band.c:	c->par_refl        += s->value[PAR_REFL];
canopy_radiation_sw_band.c:	c->temp_sw_rad_abs  += s->value[SW_RAD_ABS];
canopy_radiation_sw_band.c:	c->sw_rad_abs       += s->value[SW_RAD_ABS];
canopy_radiation_sw_band.c:	c->temp_sw_rad_refl += s->value[SW_RAD_REFL];
canopy_radiation_sw_band.c:	c->sw_rad_refl      += s->value[SW_RAD_REFL];
canopy_radiation_sw_band.c:	c->temp_net_rad_abs += s->value[NET_RAD_ABS];
canopy_radiation_sw_band.c:	c->net_rad_abs      += s->value[NET_RAD_ABS];
canopy_radiation_sw_band.c:	c->temp_net_rad_refl += s->value[NET_RAD_REFL];
canopy_radiation_sw_band.c:	c->net_rad_refl      += s->value[NET_RAD_REFL];
canopy_temperature.c:	gl_bl = s->value[BLCOND] * g_corr;
canopy_temperature.c:	gc_sh = gl_sh * s->value[LAI_PROJ];
canopy_temperature.c:	gc_e_wv = gl_e_wv * s->value[LAI_PROJ];
canopy_temperature.c:	if(s->counter[VEG_DAYS] == 1)
canopy_temperature.c:		s->value[CANOPY_TEMP_K] = TairK;
canopy_temperature.c:		logger(g_debug_log, "difference Tavg Tcanopy temperature = %g (K)\n",TairK - s->value[CANOPY_TEMP_K]);
canopy_temperature.c:	else if (s->counter[VEG_DAYS] > 1)
canopy_temperature.c:		s->value[CANOPY_TEMP_K] =
canopy_temperature.c:				((s->value[NET_RAD] * ra)/(meteo_daily->rho_air * CP)) *
canopy_temperature.c:		s->value[CANOPY_TEMP_K_OLD] = s->value[CANOPY_TEMP_K];
canopy_temperature.c:		logger(g_debug_log, "difference Tavg Tcanopy temperature = %g (K)\n",TairK - s->value[CANOPY_TEMP_K]);
canopy_temperature.c:		s->value[CANOPY_TEMP_K] = 0.;
canopy_temperature.c:	c->canopy_temp = s->value[CANOPY_TEMP_K] - TempAbs;
canopy_temperature.c:	c->canopy_temp_k = s->value[CANOPY_TEMP_K];
C-assimilation.c:	s->value[NPP]    = s->value[GPP] - s->value[TOTAL_AUT_RESP];
C-assimilation.c:	s->value[NPP_tC] = s->value[NPP] / 1e6 * g_settings->sizeCell;
C-assimilation.c:	s->value[MONTHLY_NPP]    += s->value[NPP];
C-assimilation.c:	s->value[YEARLY_NPP]     += s->value[NPP];
C-assimilation.c:	s->value[MONTHLY_NPP_tC] += s->value[NPP_tC];
C-assimilation.c:	s->value[YEARLY_NPP_tC]  += s->value[NPP_tC];
C-assimilation.c:	s->value[MONTHLY_BP]     += s->value[BP];
C-assimilation.c:	s->value[YEARLY_BP]      += s->value[BP];
C-assimilation.c:	c->daily_npp             += s->value[NPP];
C-assimilation.c:	c->monthly_npp           += s->value[NPP];
C-assimilation.c:	c->annual_npp            += s->value[NPP];
C-assimilation.c:	c->daily_npp_tC          += s->value[NPP_tC];
C-assimilation.c:	c->monthly_npp_tC        += s->value[NPP_tC];
C-assimilation.c:	c->annual_npp_tC         += s->value[NPP_tC];
C-deciduous-partitioning.c:#include "C-deciduous-partitioning.h"
C-deciduous-partitioning.c:	s0    = s->value[S0CTEM];        /* parameter controlling allocation to stem (minimum ratio to stem pool */
C-deciduous-partitioning.c:	r0    = s->value[R0CTEM];        /* parameter controlling allocation to roots (minimum ratio to root pools */
C-deciduous-partitioning.c:	omega = s->value[OMEGA_CTEM];    /* controls the sensitivity of allocation to changes in water and light availability */
C-deciduous-partitioning.c:	Light_trasm = exp ( - s->value[K] * s->value[LAI_PROJ] );
C-deciduous-partitioning.c:	pR = ( r0 + ( omega * ( 1. - s->value[F_SW] ) ) ) / ( 1. + (omega * ( 2. - Light_trasm - s->value[F_SW] ) ) );
C-deciduous-partitioning.c:	pS = ( s0 + ( omega * ( 1. - Light_trasm ) ) ) / ( 1. + ( omega * ( 2. - Light_trasm - s->value[F_SW] ) ) );
C-deciduous-partitioning.c:	if (s->counter[VEG_DAYS] == 1)
C-deciduous-partitioning.c:		s->counter[BUD_BURST_COUNTER] = (int)s->value[BUD_BURST];
C-deciduous-partitioning.c:	if (s->counter[VEG_DAYS] > 1 && s->counter[VEG_DAYS] <= s->value[BUD_BURST])
C-deciduous-partitioning.c:		s->counter[BUD_BURST_COUNTER] --;
C-deciduous-partitioning.c:	if (s->counter[VEG_DAYS] > s->value[BUD_BURST])
C-deciduous-partitioning.c:		s->counter[BUD_BURST_COUNTER] = 0;
C-deciduous-partitioning.c:	if ( g_settings->Prog_Aut_Resp )
C-deciduous-partitioning.c:		npp_to_alloc = s->value[GPP_tC] - s->value[TOTAL_MAINT_RESP_tC] ;
C-deciduous-partitioning.c:		npp_to_alloc = s->value[GPP_tC] * ( 1. - g_settings->Fixed_Aut_Resp_rate );
C-deciduous-partitioning.c:	/* "...species-specific minimum pool (of NSC) sizes of stored C may be necessary to avoid catastrophic xylem failure"
C-deciduous-partitioning.c:	switch ( s->phenology_phase )
C-deciduous-partitioning.c:		if ( ! s->counter[THINNING_HAPPENS] )
C-deciduous-partitioning.c:			s->counter[DAYS_FOR_BUDBURST] = s->value[BUD_BURST] - 1.;
C-deciduous-partitioning.c:			if ( ! s->counter[BUD_BURST_DAY_COUNTER] )
C-deciduous-partitioning.c:				s->counter[BUDBURST_A]       = 0;
C-deciduous-partitioning.c:				s->counter[BUDBURST_B]       = 0;
C-deciduous-partitioning.c:				s->counter[BUD_BURST_WEIGHT] = 0;
C-deciduous-partitioning.c:				for ( i = 0; i < s->counter[DAYS_FOR_BUDBURST]; ++i )
C-deciduous-partitioning.c:					s->counter[BUDBURST_A]       += 1;
C-deciduous-partitioning.c:					s->counter[BUDBURST_B]       += s->counter[BUDBURST_A];
C-deciduous-partitioning.c:					s->counter[BUD_BURST_WEIGHT] += s->counter[BUDBURST_B];
C-deciduous-partitioning.c:				s->counter[BUDBURST_A] = 0;
C-deciduous-partitioning.c:				s->counter[BUDBURST_B] = 0;
C-deciduous-partitioning.c:				s->value[TOT_C_RESERVE_TO_LEAF_BUDBURST]  = ( s->value[MAX_LEAF_C]   + ( s->value[MAX_LEAF_C]  * s->value[EFF_GRPERC] ) );
C-deciduous-partitioning.c:				s->value[TOT_C_RESERVE_TO_FROOT_BUDBURST] = ( s->value[MAX_FROOT_C]  + ( s->value[MAX_FROOT_C] * s->value[EFF_GRPERC] ) );
C-deciduous-partitioning.c:			s->counter[BUDBURST_A] +=1;
C-deciduous-partitioning.c:			s->counter[BUDBURST_B] += s->counter[BUDBURST_A];
C-deciduous-partitioning.c:			s->value[C_RESERVE_TO_LEAF_BUDBURST]  = s->value[TOT_C_RESERVE_TO_LEAF_BUDBURST]  * ( s->counter[BUDBURST_B] / (double)s->counter[BUD_BURST_WEIGHT] );
C-deciduous-partitioning.c:			s->value[C_RESERVE_TO_FROOT_BUDBURST] = s->value[TOT_C_RESERVE_TO_FROOT_BUDBURST] * ( s->counter[BUDBURST_B] / (double)s->counter[BUD_BURST_WEIGHT] );
C-deciduous-partitioning.c:			s->counter[BUD_BURST_DAY_COUNTER] ++;
C-deciduous-partitioning.c:			daily_reserve_to_leaf_budburst   = ( s->value[MAX_LEAF_C]   + ( s->value[MAX_LEAF_C]  * s->value[EFF_GRPERC] ) )  / days_for_budburst;
C-deciduous-partitioning.c:			daily_reserve_to_froot_budburst  = ( s->value[MAX_FROOT_C]  + ( s->value[MAX_FROOT_C] * s->value[EFF_GRPERC] ) )  / days_for_budburst;
C-deciduous-partitioning.c:			s->value[C_RESERVE_TO_BUDBURST]  = s->value[C_RESERVE_TO_LEAF_BUDBURST] + s->value[C_RESERVE_TO_FROOT_BUDBURST];
C-deciduous-partitioning.c:			s->value[C_TO_LEAF]        = s->value[C_RESERVE_TO_LEAF_BUDBURST];
C-deciduous-partitioning.c:			s->value[C_TO_FROOT]       = s->value[C_RESERVE_TO_FROOT_BUDBURST];
C-deciduous-partitioning.c:			s->value[C_TO_RESERVE]     = npp_to_alloc - s->value[C_RESERVE_TO_BUDBURST];
C-deciduous-partitioning.c:			if ( ( ( s->value[C_TO_LEAF] * ( 1. - s->value[EFF_GRPERC] ) ) + s->value[LEAF_C]) > s->value[MAX_LEAF_C] )
C-deciduous-partitioning.c:				max_leafC = s->value[MAX_LEAF_C] - s->value[LEAF_C];
C-deciduous-partitioning.c:				s->value[C_TO_LEAF]     = max_leafC + ( max_leafC * s->value[EFF_GRPERC] );
C-deciduous-partitioning.c:				s->value[C_TO_RESERVE] += ( s->value[C_RESERVE_TO_LEAF_BUDBURST] - ( max_leafC + ( max_leafC * s->value[EFF_GRPERC] ) ) );
C-deciduous-partitioning.c:			if ( ( (s->value[C_TO_FROOT] * ( 1. - s->value[EFF_GRPERC] ) ) + s->value[FROOT_C] ) > s->value[MAX_FROOT_C] )
C-deciduous-partitioning.c:				max_frootC = s->value[MAX_FROOT_C] - s->value[FROOT_C];
C-deciduous-partitioning.c:				s->value[C_TO_FROOT]    = max_frootC + ( max_frootC * s->value[EFF_GRPERC] );
C-deciduous-partitioning.c:				s->value[C_TO_RESERVE] += ( s->value[C_RESERVE_TO_FROOT_BUDBURST]  - ( max_frootC + ( max_frootC * s->value[EFF_GRPERC] ) ) );
C-deciduous-partitioning.c:			s->value[C_TO_RESERVE] = npp_to_alloc;
C-deciduous-partitioning.c:		s->counter[BUD_BURST_DAY_COUNTER] = 0.;
C-deciduous-partitioning.c:			if( s->value[RESERVE_C] >= s->value[MIN_RESERVE_C] )
C-deciduous-partitioning.c:				if ( a->value >= s->value[SEXAGE] )
C-deciduous-partitioning.c:					//s->value[C_TO_FRUIT] = npp_to_alloc * s->value[FRUIT_PERC];
C-deciduous-partitioning.c:					//s->value[C_TO_FRUIT] = npp_to_alloc * (-0.00004 * pow(a->value, 2) + (0.0098 * a->value) - 0.3872); //SAPONARO
C-deciduous-partitioning.c:					s->value[C_TO_FRUIT] = npp_to_alloc * (-0.00001 * pow(a->value, 2) + (0.0036 * a->value) -0.0651); //SAPONARO(H.Genet,2015)
C-deciduous-partitioning.c:					npp_to_alloc        -= s->value[C_TO_FRUIT];
C-deciduous-partitioning.c:					s->value[C_TO_FRUIT] = 0.;
C-deciduous-partitioning.c:				s->value[C_TO_RESERVE]   = (npp_to_alloc * pL);
C-deciduous-partitioning.c:				s->value[C_TO_CROOT]     = (npp_to_alloc * pR);
C-deciduous-partitioning.c:				s->value[C_TO_STEM]      = (npp_to_alloc * pS) * ( 1. - s->value[FRACBB] );
C-deciduous-partitioning.c:				s->value[C_TO_BRANCH]    = (npp_to_alloc * pS) * s->value[FRACBB];
C-deciduous-partitioning.c:				s->value[C_TO_RESERVE]     = npp_to_alloc;
C-deciduous-partitioning.c:			if ( s->value[RESERVE_C] >= s->value[MIN_RESERVE_C] )
C-deciduous-partitioning.c:				s->value[C_TO_RESERVE]     = npp_to_alloc;
C-deciduous-partitioning.c:				s->value[C_TO_RESERVE]     = npp_to_alloc;
C-deciduous-partitioning.c:				leaf_froot_ratio = s->value[LEAF_C] / ( s->value[LEAF_C] + s->value[FROOT_C] );
C-deciduous-partitioning.c:				if ( ( s->value[LEAF_C] > leaf_to_remove ) && ( s->value[FROOT_C] > froot_to_remove ) )
C-deciduous-partitioning.c:					s->value[C_LEAF_TO_RESERVE]  += leaf_reserve_to_remove;
C-deciduous-partitioning.c:					s->value[C_LEAF_TO_LITR]     += leaf_litter_to_remove;
C-deciduous-partitioning.c:					s->value[C_FROOT_TO_RESERVE] += froot_reserve_to_remove;
C-deciduous-partitioning.c:					s->value[C_FROOT_TO_LITR]    += froot_litter_to_remove;
C-deciduous-partitioning.c:					s->value[C_TO_RESERVE]       += s->value[C_LEAF_TO_RESERVE] + s->value[C_FROOT_TO_RESERVE];
C-deciduous-partitioning.c:		s->value[C_TO_RESERVE] = npp_to_alloc ;
C-deciduous-partitioning.c:		s->value[C_TO_RESERVE] = npp_to_alloc;
C-deciduous-partitioning.c:		s->value[C_TO_BRANCH]    += s->value[C_TO_STEM];
C-deciduous-partitioning.c:		s->value[C_TO_STEM]       = 0.;
C-deciduous-partitioning.c:	if ( s->value[C_TO_LEAF]     > 0. ) delta_leaf     = s->value[C_TO_LEAF];
C-deciduous-partitioning.c:	if ( s->value[C_TO_FROOT]    > 0. ) delta_froot    = s->value[C_TO_FROOT];
C-deciduous-partitioning.c:	if ( s->value[C_TO_STEM]     > 0. ) delta_stem     = s->value[C_TO_STEM];
C-deciduous-partitioning.c:	if ( s->value[C_TO_CROOT]    > 0. ) delta_croot    = s->value[C_TO_CROOT];
C-deciduous-partitioning.c:	if ( s->value[C_TO_BRANCH]   > 0. ) delta_branch   = s->value[C_TO_BRANCH];
C-deciduous-partitioning.c:	if ( s->value[C_TO_FRUIT]    > 0. ) delta_fruit    = s->value[C_TO_FRUIT];
C-deciduous-partitioning.c:	if ( s->value[C_TO_RESERVE]  > 0. ) delta_reserve_alloc  = s->value[C_TO_RESERVE];
C-deciduous-partitioning.c:	else delta_reserve_deple  = fabs(s->value[C_TO_RESERVE]);
C-deciduous-partitioning.c:	s->value[YEARLY_RESERVE_ALLOC] += ( delta_reserve_alloc * 1e6 / g_settings->sizeCell );
C-deciduous-partitioning.c:	s->value[YEARLY_RESERVE_DEPLE] += ( delta_reserve_deple * 1e6 / g_settings->sizeCell );
C-deciduous-partitioning.c:	s->value[YEARLY_RESERVE_USAGE] += ( s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell );
C-deciduous-partitioning.c:	s->value[BP] += ( ( delta_leaf + delta_froot + delta_stem + delta_branch + delta_croot + delta_fruit ) * 1e6 / g_settings->sizeCell );
C-deciduous-partitioning.c:	s->value[BP] *= ( 1. - s->value[EFF_GRPERC] );
C-deciduous-partitioning.h:/* C-deciduous-partitioning.h */
C-evergreen-partitioning.c:	s0    = s->value[S0CTEM];        /* parameter controlling allocation to stem (minimum ratio to stem pool) */
C-evergreen-partitioning.c:	r0    = s->value[R0CTEM];        /* parameter controlling allocation to roots (minimum ratio to root pools) */
C-evergreen-partitioning.c:	omega = s->value[OMEGA_CTEM];    /* controls the sensitivity of allocation to changes in water and light availability */
C-evergreen-partitioning.c:	Light_trasm = exp( - s->value[K] * s->value[LAI_PROJ] );
C-evergreen-partitioning.c:	pR = ( r0 + ( omega * ( 1. - s->value[F_SW] ) ) ) / ( 1. + ( omega * ( 2. - Light_trasm - s->value[F_SW] ) ) );
C-evergreen-partitioning.c:	pS = ( s0 + ( omega * ( 1. - Light_trasm ) ) ) / ( 1. + ( omega * ( 2. - Light_trasm - s->value[F_SW] ) ) );
C-evergreen-partitioning.c:	logger(g_debug_log, "PHENOLOGICAL PHASE = %d\n", s->phenology_phase);
C-evergreen-partitioning.c:	logger(g_debug_log, "LAI_PROJ = %g\n", s->value[LAI_PROJ]);
C-evergreen-partitioning.c:	logger(g_debug_log, "PEAK_LAI_PROJ = %g \n", s->value[PEAK_LAI_PROJ]);
C-evergreen-partitioning.c:	if ( g_settings->Prog_Aut_Resp )
C-evergreen-partitioning.c:		npp_to_alloc = s->value[GPP_tC] - s->value[TOTAL_MAINT_RESP_tC] ;
C-evergreen-partitioning.c:		npp_to_alloc = s->value[GPP_tC] * ( 1. - g_settings->Fixed_Aut_Resp_rate );
C-evergreen-partitioning.c:	logger(g_debug_log, "s->value[GPP_tC] = %g\n", s->value[GPP_tC]);
C-evergreen-partitioning.c:	logger(g_debug_log, "s->value[TOTAL_MAINT_RESP_tC]  = %g\n", s->value[TOTAL_MAINT_RESP_tC]);
C-evergreen-partitioning.c:	/* "...species-specific minimum pool (of NSC) sizes of stored C may be necessary to avoid catastrophic xylem failure" 
C-evergreen-partitioning.c:	switch ( s->phenology_phase )
C-evergreen-partitioning.c:			if(s->value[RESERVE_C] >= s->value[MIN_RESERVE_C])
C-evergreen-partitioning.c:				s->value[C_TO_LEAF]    = npp_to_alloc * (1. - s->value[FROOT_LEAF_FRAC]);
C-evergreen-partitioning.c:				s->value[C_TO_FROOT]   = npp_to_alloc * s->value[FROOT_LEAF_FRAC];
C-evergreen-partitioning.c:				if ( ( ( s->value[C_TO_LEAF] * ( 1. - s->value[EFF_GRPERC] ) ) + s->value[LEAF_C]) > s->value[MAX_LEAF_C])
C-evergreen-partitioning.c:					max_leafC       = s->value[MAX_LEAF_C] - s->value[LEAF_C];
C-evergreen-partitioning.c:					exceeding_leafC = ( ( npp_to_alloc * ( 1. - s->value[FROOT_LEAF_FRAC] )) - ( max_leafC + ( max_leafC * s->value[EFF_GRPERC] ) ) );
C-evergreen-partitioning.c:					s->value[C_TO_LEAF] = max_leafC + ( max_leafC * s->value[EFF_GRPERC] );
C-evergreen-partitioning.c:				if ( ( (s->value[C_TO_FROOT] * ( 1. - s->value[EFF_GRPERC] ) ) + s->value[FROOT_C] ) > s->value[MAX_FROOT_C])
C-evergreen-partitioning.c:					max_frootC       = s->value[MAX_FROOT_C] - s->value[FROOT_C];
C-evergreen-partitioning.c:					exceeding_frootC = ( ( npp_to_alloc * s->value[FROOT_LEAF_FRAC] ) - ( max_frootC + ( max_frootC * s->value[EFF_GRPERC] ) ) );
C-evergreen-partitioning.c:					s->value[C_TO_FROOT] = max_frootC + ( max_frootC * s->value[EFF_GRPERC] );
C-evergreen-partitioning.c:				s->value[C_TO_CROOT]     = (exceeding_C * pR1);
C-evergreen-partitioning.c:				s->value[C_TO_STEM]      = (exceeding_C * pS1) * (1. - s->value[FRACBB]);
C-evergreen-partitioning.c:				s->value[C_TO_BRANCH]    = (exceeding_C * pS1) * s->value[FRACBB];
C-evergreen-partitioning.c:				s->value[C_TO_RESERVE] = npp_to_alloc;
C-evergreen-partitioning.c:			s->value[C_TO_RESERVE]     = npp_to_alloc;
C-evergreen-partitioning.c:			if(s->value[RESERVE_C] >= s->value[MIN_RESERVE_C])
C-evergreen-partitioning.c:				if ( g_settings->regeneration && ( a->value > s->value[SEXAGE] ) )
C-evergreen-partitioning.c:					s->value[C_TO_FRUIT] = npp_to_alloc * s->value[FRUIT_PERC];
C-evergreen-partitioning.c:					npp_to_alloc        -= s->value[C_TO_FRUIT];
C-evergreen-partitioning.c:				s->value[C_TO_CROOT]     = (npp_to_alloc * pR);
C-evergreen-partitioning.c:				s->value[C_TO_RESERVE]   = (npp_to_alloc * pL);
C-evergreen-partitioning.c:				s->value[C_TO_STEM]      = (npp_to_alloc * pS) * ( 1. - s->value[FRACBB] );
C-evergreen-partitioning.c:				s->value[C_TO_BRANCH]    = (npp_to_alloc * pS) * s->value[FRACBB];
C-evergreen-partitioning.c:				s->value[C_TO_RESERVE]   = npp_to_alloc;
C-evergreen-partitioning.c:			s->value[C_TO_RESERVE]       = npp_to_alloc;
C-evergreen-partitioning.c:		if( s->value[RESERVE_C] >= s->value[MIN_RESERVE_C] )
C-evergreen-partitioning.c:				if ( ! s->counter[THINNING_HAPPENS] )
C-evergreen-partitioning.c:					s->value[C_TO_LEAF]      = npp_to_alloc * ( 1. - s->value[FROOT_LEAF_FRAC] );
C-evergreen-partitioning.c:					s->value[C_TO_FROOT]     = npp_to_alloc * s->value[FROOT_LEAF_FRAC];
C-evergreen-partitioning.c:					if ( ( ( s->value[C_TO_LEAF] * ( 1. - s->value[EFF_GRPERC] ) ) + s->value[LEAF_C] ) > s->value[MAX_LEAF_C] )
C-evergreen-partitioning.c:						max_leafC           = s->value[MAX_LEAF_C] - s->value[LEAF_C];
C-evergreen-partitioning.c:						exceeding_leafC     = ( ( npp_to_alloc * ( 1. - s->value[FROOT_LEAF_FRAC] ) ) - ( max_leafC + ( max_leafC * s->value[EFF_GRPERC] ) ) );
C-evergreen-partitioning.c:						s->value[C_TO_LEAF] = max_leafC + ( max_leafC * s->value[EFF_GRPERC] );
C-evergreen-partitioning.c:					if ( ( ( s->value[C_TO_FROOT] * ( 1. - s->value[EFF_GRPERC] ) ) + s->value[FROOT_C] ) > s->value[MAX_FROOT_C] )
C-evergreen-partitioning.c:						max_frootC           = s->value[MAX_FROOT_C] - s->value[FROOT_C];
C-evergreen-partitioning.c:						exceeding_frootC     = ( ( npp_to_alloc * s->value[FROOT_LEAF_FRAC] ) - ( max_frootC + ( max_frootC * s->value[EFF_GRPERC] ) ) );
C-evergreen-partitioning.c:						s->value[C_TO_FROOT] = max_frootC + ( max_frootC * s->value[EFF_GRPERC] );
C-evergreen-partitioning.c:					s->value[C_TO_CROOT]     = (exceeding_C * pR1);
C-evergreen-partitioning.c:					s->value[C_TO_STEM]      = (exceeding_C * pS1) * (1. - s->value[FRACBB]);
C-evergreen-partitioning.c:					s->value[C_TO_BRANCH]    = (exceeding_C * pS1) * s->value[FRACBB];
C-evergreen-partitioning.c:					s->value[C_TO_RESERVE] = npp_to_alloc;
C-evergreen-partitioning.c:				if ( a->value > s->value[SEXAGE] )
C-evergreen-partitioning.c:					s->value[C_TO_FRUIT] = npp_to_alloc * s->value[FRUIT_PERC];
C-evergreen-partitioning.c:					npp_to_alloc        -= s->value[C_TO_FRUIT];
C-evergreen-partitioning.c:				s->value[C_TO_CROOT]     = (npp_to_alloc * pR);
C-evergreen-partitioning.c:				s->value[C_TO_LEAF]      = (npp_to_alloc * pL) * ( 1. - s->value[FROOT_LEAF_FRAC] );
C-evergreen-partitioning.c:				s->value[C_TO_FROOT]     = (npp_to_alloc * pL) * s->value[FROOT_LEAF_FRAC];
C-evergreen-partitioning.c:				s->value[C_TO_STEM]      = (npp_to_alloc * pS) * ( 1. - s->value[FRACBB] );
C-evergreen-partitioning.c:				s->value[C_TO_BRANCH]    = (npp_to_alloc * pS) * s->value[FRACBB];
C-evergreen-partitioning.c:				if ( ( ( s->value[C_TO_LEAF] * ( 1. - s->value[EFF_GRPERC] ) ) + s->value[LEAF_C] ) > s->value[MAX_LEAF_C] )
C-evergreen-partitioning.c:					max_leafC       = s->value[MAX_LEAF_C] - s->value[LEAF_C];
C-evergreen-partitioning.c:					exceeding_leafC = ( ( ( npp_to_alloc * pL ) * ( 1. - s->value[FROOT_LEAF_FRAC] ) ) - ( max_leafC + ( max_leafC * s->value[EFF_GRPERC] ) ) );
C-evergreen-partitioning.c:					s->value[C_TO_LEAF] = max_leafC + ( max_leafC * s->value[EFF_GRPERC] );
C-evergreen-partitioning.c:				if ( ( (s->value[C_TO_FROOT] * ( 1. - s->value[EFF_GRPERC] ) ) + s->value[FROOT_C] ) > s->value[MAX_FROOT_C])
C-evergreen-partitioning.c:					max_frootC       = s->value[MAX_FROOT_C] - s->value[FROOT_C];
C-evergreen-partitioning.c:					exceeding_frootC = ( ( ( npp_to_alloc * pL ) * s->value[FROOT_LEAF_FRAC] )  - ( max_frootC + ( max_frootC * s->value[EFF_GRPERC] ) ) );
C-evergreen-partitioning.c:					s->value[C_TO_FROOT] = max_frootC + ( max_frootC * s->value[EFF_GRPERC] );
C-evergreen-partitioning.c:				s->value[C_TO_CROOT]    += (exceeding_C * pR1);
C-evergreen-partitioning.c:				s->value[C_TO_STEM]     += (exceeding_C * pS1) * ( 1. - s->value[FRACBB] );
C-evergreen-partitioning.c:				s->value[C_TO_BRANCH]   += (exceeding_C * pS1) * s->value[FRACBB];
C-evergreen-partitioning.c:			s->value[C_TO_RESERVE] = npp_to_alloc;
C-evergreen-partitioning.c:		s->value[C_TO_RESERVE]     = npp_to_alloc;
C-evergreen-partitioning.c:		if ( s->value[RESERVE_C] >= s->value[MIN_RESERVE_C] )
C-evergreen-partitioning.c:			s->value[C_TO_RESERVE]     = npp_to_alloc;
C-evergreen-partitioning.c:			s->value[C_TO_RESERVE]     = npp_to_alloc;
C-evergreen-partitioning.c:			leaf_froot_ratio = s->value[LEAF_C] / ( s->value[LEAF_C] + s->value[FROOT_C] );
C-evergreen-partitioning.c:			if ( ( s->value[LEAF_C] > leaf_to_remove ) && ( s->value[FROOT_C] > froot_to_remove ) )
C-evergreen-partitioning.c:				s->value[C_LEAF_TO_RESERVE]  += leaf_reserve_to_remove;
C-evergreen-partitioning.c:				s->value[C_LEAF_TO_LITR]     += leaf_litter_to_remove;
C-evergreen-partitioning.c:				s->value[C_FROOT_TO_RESERVE] += froot_reserve_to_remove;
C-evergreen-partitioning.c:				s->value[C_FROOT_TO_LITR]    += froot_litter_to_remove;
C-evergreen-partitioning.c:				s->value[C_TO_RESERVE]       += s->value[C_LEAF_TO_RESERVE] + s->value[C_FROOT_TO_RESERVE];
C-evergreen-partitioning.c:		s->value[C_TO_BRANCH]    += s->value[C_TO_STEM];
C-evergreen-partitioning.c:		s->value[C_TO_STEM]       = 0.;
C-evergreen-partitioning.c:	logger(g_debug_log, "C_TO_LEAF    = %f tC/cell\n", s->value[C_TO_LEAF]);
C-evergreen-partitioning.c:	logger(g_debug_log, "C_TO_FROOT   = %f tC/cell\n", s->value[C_TO_FROOT]);
C-evergreen-partitioning.c:	logger(g_debug_log, "C_TO_STEM    = %f tC/cell\n", s->value[C_TO_STEM]);
C-evergreen-partitioning.c:	logger(g_debug_log, "C_TO_CROOT   = %f tC/cell\n", s->value[C_TO_CROOT]);
C-evergreen-partitioning.c:	logger(g_debug_log, "C_TO_BRANCH  = %f tC/cell\n", s->value[C_TO_BRANCH]);
C-evergreen-partitioning.c:	logger(g_debug_log, "C_TO_RESERVE = %f tC/cell\n", s->value[C_TO_RESERVE]);
C-evergreen-partitioning.c:	if ( s->value[C_TO_LEAF]     > 0. ) delta_leaf     = s->value[C_TO_LEAF];
C-evergreen-partitioning.c:	if ( s->value[C_TO_FROOT]    > 0. ) delta_froot    = s->value[C_TO_FROOT];
C-evergreen-partitioning.c:	if ( s->value[C_TO_STEM]     > 0. ) delta_stem     = s->value[C_TO_STEM];
C-evergreen-partitioning.c:	if ( s->value[C_TO_CROOT]    > 0. ) delta_croot    = s->value[C_TO_CROOT];
C-evergreen-partitioning.c:	if ( s->value[C_TO_BRANCH]   > 0. ) delta_branch   = s->value[C_TO_BRANCH];
C-evergreen-partitioning.c:	if ( s->value[C_TO_FRUIT]    > 0. ) delta_fruit    = s->value[C_TO_FRUIT];
C-evergreen-partitioning.c:	if ( s->value[C_TO_RESERVE]  > 0. ) delta_reserve_alloc  = s->value[C_TO_RESERVE];
C-evergreen-partitioning.c:	else delta_reserve_deple  = fabs(s->value[C_TO_RESERVE]);
C-evergreen-partitioning.c:	s->value[YEARLY_RESERVE_ALLOC] += ( delta_reserve_alloc * 1e6 / g_settings->sizeCell );
C-evergreen-partitioning.c:	s->value[YEARLY_RESERVE_DEPLE] += ( delta_reserve_deple * 1e6 / g_settings->sizeCell );
C-evergreen-partitioning.c:	s->value[YEARLY_RESERVE_USAGE] += ( s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell );
C-evergreen-partitioning.c:	s->value[BP] += ( ( delta_leaf + delta_froot + delta_stem + delta_branch + delta_croot + delta_fruit ) * 1e6 / g_settings->sizeCell );
C-evergreen-partitioning.c:	s->value[BP] *= ( 1. - s->value[EFF_GRPERC] );
C-fruit-partitioning.c:	PopNumberSeeds = NumberSeed * s->counter[N_TREE];
C-fruit-partitioning.c:	WseedLE = ((double)PopNumberSeeds * s->value[WEIGHTSEED]) / 1000000 /* to convert in tonnes*/;
C-fruit-partitioning.c:	//Log("Fraction of NPP allocated for Seed from Logistic Equation = %.4g %%\n", (WseedLE * 100) /s->value[YEARLY_NPP_tC] );
C-fruit-partitioning.c:	heigthdependence = s->value[LAI_PROJ] / s->value[PEAK_LAI_PROJ];
C-fruit-partitioning.c:	NumberSeed = (double)s->counter[N_TREE] * s->value[MAXSEED] * heigthdependence * 0.51 *
C-fruit-partitioning.c:			( 1 + sin((2 * Pi * (double)a->value ) / s->value[MASTSEED]));
C-fruit-partitioning.c:	WseedT = (double)NumberSeed * s->value[WEIGHTSEED] / 1000000;  //per convertire in tonnellate biomassa allocata per i semi
C-fruit-partitioning.c:	//Log("Fraction of NPP allocated for Seed from TREEMIG = %.4f %%\n", (WseedT * 100) /s->value[YEARLY_NPP_tDM] );
C-fruit-partitioning.c: carbon_tank = s->value[CARBON_TANK];
C-fruit-partitioning.c: tank_seeds = s->counter[TANK_SEEDS];
C-fruit-partitioning.c:   if (a->value > s->value[SEXAGE]) //MAX_FRUIT_C expressed as (tC/cell/year)
C-fruit-partitioning.c:       s->value[CARBON_TANK] += (s->value[MAX_FRUIT_C] * 1000000); // convert tC(fruit) to gC/cell/year(fruit)
C-fruit-partitioning.c:        if ( s->value[CARBON_TANK] >= s->value[MAX_CS]) {
C-fruit-partitioning.c:            NumberFruit = (s->value[CARBON_TANK] / s->value[WEIGHTFRUIT]);
C-fruit-partitioning.c:            NumberSeed = (NumberFruit / s->value[WEIGHTSHELL]);
C-fruit-partitioning.c:            s->counter[N_SEED] = NumberSeed;
C-fruit-partitioning.c:            s->value[CARBON_TANK] = 0.;
C-fruit-partitioning.c:            s->counter[TANK_SEEDS] += s->counter[N_SEED];
C-fruit-partitioning.c:       s->counter[N_SEED] = 0.;
C-fruit-partitioning.c: //printf("MAX_FRUIT_C = %f\n", s->value[MAX_FRUIT_C]);
C-fruit-partitioning.c: //printf("CARBON_TANK = %f\n", s->value[CARBON_TANK]);
C-fruit-partitioning.c: //printf("N_SEED = %d\n", s->counter[N_SEED]);
C-fruit-partitioning.c:           if (a->value >= s->value[SEXAGE]) {
C-fruit-partitioning.c:               carbon_tank = (s->value[MAX_FRUIT_C] * 1e6); //Convert tC(fruit) to gC/cell(fruit);
C-fruit-partitioning.c:              //printf("MAX_FRUIT_C = %f\n", s->value[MAX_FRUIT_C]);
C-fruit-partitioning.c:               NumberFruit = (carbon_tank / s->value[WEIGHTFRUIT]);
C-fruit-partitioning.c:               NumberSeed = (NumberFruit / s->value[WEIGHTSHELL]);
C-fruit-partitioning.c:               s->counter[N_SEED] = NumberSeed;
C-fruit-partitioning.c:               //printf("N_SEED = %ld\n", s->counter[N_SEED]);
C-fruit-partitioning.c:       s->counter[TANK_SEEDS] += NumberSeed;
C-fruit-partitioning.c:       s->counter[N_SEED] = 0.;
C-fruit-partitioning.c:    if (a->value >= s->value[SEXAGE] && s->counter[N_TREE] <= 1500) {
C-fruit-partitioning.c:        NumberSeed = coeff_a + (coeff_b * (s->counter[N_TREE])) + (coeff_c * (d->value)) + (coeff_d * pow(s->counter[N_TREE], 2)) + (coeff_e * pow(d->value, 2));
C-fruit-partitioning.c:      } else if (a->value >= s->value[SEXAGE] && s->counter[N_TREE] > 1500) {
C-fruit-partitioning.c:      NumberSeed = coeff_f + (coeff_g * (s->counter[N_TREE])) + (coeff_h * (d->value)) + (coeff_i * pow(s->counter[N_TREE], 2)) + (coeff_l * pow(d->value, 2));
C-fruit-partitioning.c:  s->counter[N_SEED] = NumberSeed;
C-fruit-partitioning.c:    if (a->value >= s->value[SEXAGE]) {
C-fruit-partitioning.c:  s->counter[N_SEED] = NumberSeed;
CN-allocation.c:	s->value[OLD_RESERVE_C] = s->value[RESERVE_C];
CN-allocation.c:	s->value[C_TO_LEAF]    -= (s->value[LEAF_GROWTH_RESP]   / 1e6 * g_settings->sizeCell);
CN-allocation.c:	s->value[C_TO_FROOT]   -= (s->value[FROOT_GROWTH_RESP]  / 1e6 * g_settings->sizeCell);
CN-allocation.c:	s->value[C_TO_STEM]    -= (s->value[STEM_GROWTH_RESP]   / 1e6 * g_settings->sizeCell);
CN-allocation.c:	s->value[C_TO_CROOT]   -= (s->value[CROOT_GROWTH_RESP]  / 1e6 * g_settings->sizeCell);
CN-allocation.c:	s->value[C_TO_BRANCH]  -= (s->value[BRANCH_GROWTH_RESP] / 1e6 * g_settings->sizeCell);
CN-allocation.c:	s->value[STEM_SAPWOOD_C]          += s->value[C_TO_STEM] - s->value[C_STEM_SAPWOOD_TO_CWD];
CN-allocation.c:	s->value[STEM_LIVEWOOD_C]          = s->value[STEM_SAPWOOD_C] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC];
CN-allocation.c:	if ( day && month ) s->value[YEARLY_C_TO_STEM] += s->value[C_TO_STEM];
CN-allocation.c:	s->value[CROOT_SAPWOOD_C]         += s->value[C_TO_CROOT] - s->value[C_CROOT_SAPWOOD_TO_CWD];
CN-allocation.c:	s->value[CROOT_LIVEWOOD_C]         = s->value[CROOT_SAPWOOD_C] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC];
CN-allocation.c:	if ( day && month ) s->value[YEARLY_C_TO_CROOT] += s->value[C_TO_CROOT];
CN-allocation.c:	s->value[BRANCH_SAPWOOD_C]        += s->value[C_TO_BRANCH] - s->value[C_BRANCH_SAPWOOD_TO_CWD];
CN-allocation.c:	s->value[BRANCH_LIVEWOOD_C]        = s->value[BRANCH_SAPWOOD_C] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC];
CN-allocation.c:	if ( day && month ) s->value[YEARLY_C_TO_BRANCH]      += s->value[C_TO_BRANCH];
CN-allocation.c:	s->value[C_TO_LEAF]    -= s->value[C_LEAF_TO_LITR]  + s->value[C_LEAF_TO_RESERVE];
CN-allocation.c:	s->value[C_TO_FROOT]   -= s->value[C_FROOT_TO_LITR] + s->value[C_FROOT_TO_RESERVE];
CN-allocation.c:	s->value[C_TO_STEM]    -= s->value[C_STEM_TO_CWD];
CN-allocation.c:	s->value[C_TO_CROOT]   -= s->value[C_CROOT_TO_CWD];
CN-allocation.c:	s->value[C_TO_BRANCH]  -= s->value[C_BRANCH_TO_CWD];
CN-allocation.c:	s->value[C_TO_FRUIT]   -= s->value[C_FRUIT_TO_CWD];
CN-allocation.c:	s->value[C_TO_RESERVE] -= s->value[C_RESERVE_TO_CWD];
CN-allocation.c:	if ( s->value[C_TO_STEM]   > 0. ) s->value[YEARLY_C_TO_WOOD]     += s->value[C_TO_STEM];
CN-allocation.c:	if ( s->value[C_TO_CROOT]  > 0. ) s->value[YEARLY_C_TO_WOOD]     += s->value[C_TO_BRANCH];
CN-allocation.c:	if ( s->value[C_TO_BRANCH] > 0. ) s->value[YEARLY_C_TO_WOOD]     += s->value[C_TO_CROOT];
CN-allocation.c:	if ( s->value[C_TO_STEM]   > 0. ) s->value[CUM_YEARLY_C_TO_WOOD] += s->value[C_TO_STEM];
CN-allocation.c:	if ( s->value[C_TO_CROOT]  > 0. ) s->value[CUM_YEARLY_C_TO_WOOD] += s->value[C_TO_BRANCH];
CN-allocation.c:	if ( s->value[C_TO_BRANCH] > 0. ) s->value[CUM_YEARLY_C_TO_WOOD] += s->value[C_TO_CROOT];
CN-allocation.c:	s->value[LEAF_C]      += s->value[C_TO_LEAF];
CN-allocation.c:	s->value[FROOT_C]     += s->value[C_TO_FROOT];
CN-allocation.c:	s->value[STEM_C]      += s->value[C_TO_STEM];
CN-allocation.c:	s->value[CROOT_C]     += s->value[C_TO_CROOT];
CN-allocation.c:	s->value[BRANCH_C]    += s->value[C_TO_BRANCH];
CN-allocation.c:	s->value[RESERVE_C]   += s->value[C_TO_RESERVE];
CN-allocation.c:	s->value[FRUIT_C]     += s->value[C_TO_FRUIT];
CN-allocation.c:      //printf("reserve in CN_allocation            = %g tC/cell/day\n", s->value[RESERVE_C]);
CN-allocation.c:	s->value[TOT_LIVEWOOD_C]           = ( s->value[STEM_LIVEWOOD_C] + s->value[CROOT_LIVEWOOD_C] + s->value[BRANCH_LIVEWOOD_C] );
CN-allocation.c:	s->value[TOT_SAPWOOD_C]            = ( s->value[STEM_SAPWOOD_C]  + s->value[CROOT_SAPWOOD_C]  + s->value[BRANCH_SAPWOOD_C] );
CN-allocation.c:	s->value[STEM_HEARTWOOD_C]         = s->value[STEM_C]   - s->value[STEM_SAPWOOD_C];
CN-allocation.c:	s->value[STEM_DEADWOOD_C]          = s->value[STEM_C]   - s->value[STEM_LIVEWOOD_C];
CN-allocation.c:	s->value[CROOT_HEARTWOOD_C]        = s->value[CROOT_C]  - s->value[CROOT_SAPWOOD_C];
CN-allocation.c:	s->value[CROOT_DEADWOOD_C]         = s->value[CROOT_C]  - s->value[CROOT_LIVEWOOD_C];
CN-allocation.c:	s->value[BRANCH_HEARTWOOD_C]       = s->value[BRANCH_C] - s->value[BRANCH_SAPWOOD_C];
CN-allocation.c:	s->value[BRANCH_DEADWOOD_C]        = s->value[BRANCH_C] - s->value[BRANCH_LIVEWOOD_C];
CN-allocation.c:	s->value[TOT_HEARTWOOD_C]          = (s->value[STEM_HEARTWOOD_C] + s->value[CROOT_HEARTWOOD_C] + s->value[BRANCH_HEARTWOOD_C] );
CN-allocation.c:	s->value[TOT_DEADWOOD_C]           = (s->value[STEM_DEADWOOD_C]  + s->value[CROOT_DEADWOOD_C]  + s->value[BRANCH_DEADWOOD_C] );
CN-allocation.c:	CHECK_CONDITION(fabs((s->value[STEM_SAPWOOD_C]   + s->value[STEM_HEARTWOOD_C])  - s->value[STEM_C]),  >,eps);
CN-allocation.c:	CHECK_CONDITION(fabs((s->value[CROOT_SAPWOOD_C]  + s->value[CROOT_HEARTWOOD_C]) - s->value[CROOT_C]), >,eps);
CN-allocation.c:	CHECK_CONDITION(fabs((s->value[BRANCH_SAPWOOD_C] + s->value[BRANCH_HEARTWOOD_C])- s->value[BRANCH_C]),>,eps);
CN-allocation.c:	CHECK_CONDITION ( s->value[LEAF_C],     < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[FROOT_C],    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[STEM_C],     < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[BRANCH_C],   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[CROOT_C],    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[FRUIT_C],    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[STEM_SAPWOOD_C],     < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[STEM_HEARTWOOD_C],   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[CROOT_SAPWOOD_C],    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[CROOT_HEARTWOOD_C],  < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[BRANCH_SAPWOOD_C],   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[BRANCH_HEARTWOOD_C], < , ZERO );
CN-allocation.c:	s->value[TOTAL_C] = s->value[LEAF_C] +
CN-allocation.c:			s->value[FROOT_C]            +
CN-allocation.c:			s->value[STEM_C]             +
CN-allocation.c:			s->value[BRANCH_C]           +
CN-allocation.c:			s->value[CROOT_C]            +
CN-allocation.c:			s->value[FRUIT_C]            +
CN-allocation.c:			s->value[RESERVE_C]          ;
CN-allocation.c:	if ( s->value[C_TO_FRUIT] > 0. )
CN-allocation.c:		s->value[MAX_FRUIT_C] += s->value[C_TO_FRUIT];
CN-allocation.c:	if ( s->value[RESERVE_C] > s->value[OLD_RESERVE_C] )
CN-allocation.c:		s->value[MAX_ANN_RESERVE_C]      = s->value[RESERVE_C];
CN-allocation.c:		s->value[MAX_RESERVE_C_CONC] = ( s->value[MAX_ANN_RESERVE_C] / (s->value[TOT_SAPWOOD_C] * GC_GDM ) ) * 100.;
CN-allocation.c:		s->value[MIN_RESERVE_C_CONC] = ( s->value[RESERVE_C]     / (s->value[TOT_SAPWOOD_C] * GC_GDM ) ) * 100.;
CN-allocation.c:	c->daily_leaf_carbon        += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_froot_carbon       += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_stem_carbon        += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_croot_carbon       += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_branch_carbon      += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_reserve_carbon     += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_fruit_carbon       += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->leaf_carbon              += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->froot_carbon             += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->stem_carbon              += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->branch_carbon            += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->croot_carbon             += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->reserve_carbon           += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->fruit_carbon             += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	s->value[OLD_RESERVE_C] = s->value[RESERVE_C];
CN-allocation.c:	s->value[C_TO_LEAF]    -= (s->value[LEAF_GROWTH_RESP]   / 1e6 * g_settings->sizeCell);
CN-allocation.c:	s->value[C_TO_FROOT]   -= (s->value[FROOT_GROWTH_RESP]  / 1e6 * g_settings->sizeCell);
CN-allocation.c:	s->value[C_TO_STEM]    -= (s->value[STEM_GROWTH_RESP]   / 1e6 * g_settings->sizeCell);
CN-allocation.c:	s->value[C_TO_CROOT]   -= (s->value[CROOT_GROWTH_RESP]  / 1e6 * g_settings->sizeCell);
CN-allocation.c:	s->value[C_TO_BRANCH]  -= (s->value[BRANCH_GROWTH_RESP] / 1e6 * g_settings->sizeCell);
CN-allocation.c:	s->value[STEM_SAPWOOD_C]          += ( s->value[C_TO_STEM] - s->value[C_STEM_SAPWOOD_TO_CWD] );
CN-allocation.c:         s->value[YEARLY_C_TO_STEM_SAPWOOD] += (s->value[C_TO_STEM]) - s->value[C_STEM_SAPWOOD_TO_CWD];
CN-allocation.c:	s->value[STEM_LIVEWOOD_C]         += ( ( s->value[C_TO_STEM] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC] ) - s->value[C_STEM_LIVEWOOD_TO_CWD] ) ;
CN-allocation.c:          s->value[YEARLY_C_TO_STEM_LIVEWOOD] += ( ( s->value[C_TO_STEM] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC] ) - s->value[C_STEM_LIVEWOOD_TO_CWD]);
CN-allocation.c:	s->value[CROOT_SAPWOOD_C]         += ( s->value[C_TO_CROOT] - s->value[C_CROOT_SAPWOOD_TO_CWD] );
CN-allocation.c:         s->value[YEARLY_C_TO_CROOT_SAPWOOD] += (s->value[C_TO_CROOT] - s->value[C_CROOT_SAPWOOD_TO_CWD]);
CN-allocation.c:	s->value[CROOT_LIVEWOOD_C]        += ( ( s->value[C_TO_CROOT] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC] ) - s->value[C_CROOT_LIVEWOOD_TO_CWD] );
CN-allocation.c:         s->value[YEARLY_C_TO_CROOT_LIVEWOOD] += ( ( s->value[C_TO_CROOT] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC] ) - s->value[C_CROOT_LIVEWOOD_TO_CWD] );
CN-allocation.c:	s->value[BRANCH_SAPWOOD_C]        += ( s->value[C_TO_BRANCH] - s->value[C_BRANCH_SAPWOOD_TO_CWD] );
CN-allocation.c:         s->value[YEARLY_C_TO_BRANCH_SAPWOOD]      += (s->value[C_TO_BRANCH] - s->value[C_BRANCH_SAPWOOD_TO_CWD]);
CN-allocation.c:	s->value[BRANCH_LIVEWOOD_C]       += ( ( s->value[C_TO_BRANCH] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC] ) - s->value[C_BRANCH_LIVEWOOD_TO_CWD] );
CN-allocation.c:         s->value[YEARLY_C_TO_BRANCH_LIVEWOOD] += ( ( s->value[C_TO_BRANCH] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC] ) - s->value[C_BRANCH_LIVEWOOD_TO_CWD] );
CN-allocation.c:	s->value[C_TO_LEAF]    -= s->value[C_LEAF_TO_LITR]  + s->value[C_LEAF_TO_RESERVE];
CN-allocation.c:	s->value[C_TO_FROOT]   -= s->value[C_FROOT_TO_LITR] + s->value[C_FROOT_TO_RESERVE];
CN-allocation.c:	s->value[C_TO_STEM]    -= s->value[C_STEM_TO_CWD];
CN-allocation.c:	s->value[C_TO_CROOT]   -= s->value[C_CROOT_TO_CWD];
CN-allocation.c:	s->value[C_TO_BRANCH]  -= s->value[C_BRANCH_TO_CWD];
CN-allocation.c:	s->value[C_TO_FRUIT]   -= s->value[C_FRUIT_TO_CWD];
CN-allocation.c:	s->value[C_TO_RESERVE] -= s->value[C_RESERVE_TO_CWD];
CN-allocation.c:	if ( s->value[C_TO_STEM]   > 0. ) s->value[YEARLY_C_TO_WOOD]     += s->value[C_TO_STEM];
CN-allocation.c:	if ( s->value[C_TO_CROOT]  > 0. ) s->value[YEARLY_C_TO_WOOD]     += s->value[C_TO_BRANCH];
CN-allocation.c:	if ( s->value[C_TO_BRANCH] > 0. ) s->value[YEARLY_C_TO_WOOD]     += s->value[C_TO_CROOT];
CN-allocation.c:	if ( s->value[C_TO_STEM]   > 0. ) s->value[CUM_YEARLY_C_TO_WOOD] += s->value[C_TO_STEM];
CN-allocation.c:	if ( s->value[C_TO_CROOT]  > 0. ) s->value[CUM_YEARLY_C_TO_WOOD] += s->value[C_TO_BRANCH];
CN-allocation.c:	if ( s->value[C_TO_BRANCH] > 0. ) s->value[CUM_YEARLY_C_TO_WOOD] += s->value[C_TO_CROOT];
CN-allocation.c:	s->value[LEAF_C]      += s->value[C_TO_LEAF];
CN-allocation.c:	s->value[FROOT_C]     += s->value[C_TO_FROOT];
CN-allocation.c:	s->value[STEM_C]      += s->value[C_TO_STEM];
CN-allocation.c:	s->value[CROOT_C]     += s->value[C_TO_CROOT];
CN-allocation.c:	s->value[BRANCH_C]    += s->value[C_TO_BRANCH];
CN-allocation.c:	s->value[RESERVE_C]   += s->value[C_TO_RESERVE];
CN-allocation.c:	s->value[FRUIT_C]     += s->value[C_TO_FRUIT];
CN-allocation.c:	s->value[TOT_LIVEWOOD_C]           = ( s->value[STEM_LIVEWOOD_C] + s->value[CROOT_LIVEWOOD_C] + s->value[BRANCH_LIVEWOOD_C] );
CN-allocation.c:	s->value[TOT_SAPWOOD_C]            = ( s->value[STEM_SAPWOOD_C]  + s->value[CROOT_SAPWOOD_C]  + s->value[BRANCH_SAPWOOD_C] );
CN-allocation.c:	s->value[STEM_HEARTWOOD_C]         = s->value[STEM_C]   - s->value[STEM_SAPWOOD_C];
CN-allocation.c:	s->value[STEM_DEADWOOD_C]          = s->value[STEM_C]   - s->value[STEM_LIVEWOOD_C];
CN-allocation.c:	s->value[CROOT_HEARTWOOD_C]        = s->value[CROOT_C]  - s->value[CROOT_SAPWOOD_C];
CN-allocation.c:	s->value[CROOT_DEADWOOD_C]         = s->value[CROOT_C]  - s->value[CROOT_LIVEWOOD_C];
CN-allocation.c:	s->value[BRANCH_HEARTWOOD_C]       = s->value[BRANCH_C] - s->value[BRANCH_SAPWOOD_C];
CN-allocation.c:	s->value[BRANCH_DEADWOOD_C]        = s->value[BRANCH_C] - s->value[BRANCH_LIVEWOOD_C];
CN-allocation.c:	s->value[TOT_DEADWOOD_C]           = (s->value[STEM_DEADWOOD_C]  + s->value[CROOT_DEADWOOD_C]  + s->value[BRANCH_DEADWOOD_C] );
CN-allocation.c:	s->value[TOT_HEARTWOOD_C]          = (s->value[STEM_HEARTWOOD_C] + s->value[CROOT_HEARTWOOD_C] + s->value[BRANCH_HEARTWOOD_C] );
CN-allocation.c:	CHECK_CONDITION(fabs((s->value[STEM_SAPWOOD_C]   + s->value[STEM_HEARTWOOD_C])  - s->value[STEM_C]),  >,eps);
CN-allocation.c:	CHECK_CONDITION(fabs((s->value[CROOT_SAPWOOD_C]  + s->value[CROOT_HEARTWOOD_C]) - s->value[CROOT_C]), >,eps);
CN-allocation.c:	CHECK_CONDITION(fabs((s->value[BRANCH_SAPWOOD_C] + s->value[BRANCH_HEARTWOOD_C])- s->value[BRANCH_C]),>,eps);
CN-allocation.c:	CHECK_CONDITION ( s->value[LEAF_C],     < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[FROOT_C],    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[STEM_C],     < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[BRANCH_C],   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[CROOT_C],    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[FRUIT_C],    < , ZERO );
CN-allocation.c:	if ( s->value[STEM_SAPWOOD_C] <  ZERO )
CN-allocation.c:		s->value[STEM_SAPWOOD_C]   = 0.;
CN-allocation.c:		s->value[STEM_HEARTWOOD_C] = s->value[STEM_C];
CN-allocation.c:		printf("Warning: s->value[STEM_SAPWOOD_C] < ZERO\n");
CN-allocation.c:	if ( s->value[STEM_HEARTWOOD_C] < ZERO )
CN-allocation.c:		s->value[STEM_HEARTWOOD_C]   = 0.;
CN-allocation.c:		s->value[STEM_SAPWOOD_C] = s->value[STEM_C];
CN-allocation.c:		printf("Warning: s->value[STEM_HEARTWOOD_C] < ZERO\n");
CN-allocation.c:	if ( s->value[CROOT_SAPWOOD_C] <  ZERO )
CN-allocation.c:		s->value[CROOT_SAPWOOD_C]   = 0.;
CN-allocation.c:		s->value[CROOT_HEARTWOOD_C] = s->value[CROOT_C];
CN-allocation.c:		printf("Warning: s->value[CROOT_SAPWOOD_C] < ZERO\n");
CN-allocation.c:	if ( s->value[CROOT_HEARTWOOD_C] < ZERO )
CN-allocation.c:		s->value[CROOT_HEARTWOOD_C]   = 0.;
CN-allocation.c:		s->value[CROOT_SAPWOOD_C] = s->value[CROOT_C];
CN-allocation.c:		printf("Warning: s->value[CROOT_HEARTWOOD_C] < ZERO\n");
CN-allocation.c:	if ( s->value[BRANCH_SAPWOOD_C] <  ZERO )
CN-allocation.c:		s->value[BRANCH_SAPWOOD_C]   = 0.;
CN-allocation.c:		s->value[BRANCH_HEARTWOOD_C] = s->value[BRANCH_C];
CN-allocation.c:		printf("Warning: s->value[BRANCH_SAPWOOD_C] < ZERO\n");
CN-allocation.c:	if ( s->value[BRANCH_HEARTWOOD_C] < ZERO )
CN-allocation.c:		s->value[BRANCH_HEARTWOOD_C]   = 0.;
CN-allocation.c:		s->value[BRANCH_SAPWOOD_C] = s->value[BRANCH_C];
CN-allocation.c:		printf("Warning: s->value[BRANCH_HEARTWOOD_C] < ZERO\n");
CN-allocation.c:	CHECK_CONDITION ( s->value[STEM_SAPWOOD_C],     < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[STEM_HEARTWOOD_C],   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[CROOT_SAPWOOD_C],    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[CROOT_HEARTWOOD_C],  < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[BRANCH_SAPWOOD_C],   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[BRANCH_HEARTWOOD_C], < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[STEM_LIVEWOOD_C],    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[STEM_DEADWOOD_C],    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[CROOT_LIVEWOOD_C],   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[CROOT_DEADWOOD_C],   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[BRANCH_LIVEWOOD_C],  < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[BRANCH_DEADWOOD_C],  < , ZERO );
CN-allocation.c:	s->value[TOTAL_C] = s->value[LEAF_C] +
CN-allocation.c:			s->value[FROOT_C]            +
CN-allocation.c:			s->value[STEM_C]             +
CN-allocation.c:			s->value[BRANCH_C]           +
CN-allocation.c:			s->value[CROOT_C]            +
CN-allocation.c:			s->value[FRUIT_C]            +
CN-allocation.c:			s->value[RESERVE_C]          ;
CN-allocation.c:	if ( s->value[C_TO_FRUIT] > 0. )
CN-allocation.c:		s->value[MAX_FRUIT_C] += s->value[C_TO_FRUIT];
CN-allocation.c:        if ( s->value[RESERVE_C] > s->value[MAX_ANN_RESERVE_C])
CN-allocation.c:		s->value[MAX_ANN_RESERVE_C]               = s->value[RESERVE_C];
CN-allocation.c:                s->value[TREE_MAX_ANN_RESERVE_C]          = s->value[RESERVE_C] / (double)s->counter[N_TREE];
CN-allocation.c:	if ( s->value[RESERVE_C] <= s->value[MIN_ANN_RESERVE_C])
CN-allocation.c:                s->value[MIN_ANN_RESERVE_C]               = s->value[RESERVE_C];
CN-allocation.c:                s->value[TREE_MIN_ANN_RESERVE_C]          = s->value[RESERVE_C] / (double)s->counter[N_TREE];
CN-allocation.c:        RESERVE_C_CONC = ( s->value[RESERVE_C] / (s->value[TOT_SAPWOOD_C] * GC_GDM ) ) * 100.;
CN-allocation.c:        if ( RESERVE_C_CONC > s->value[MAX_RESERVE_C_CONC])
CN-allocation.c:        	s->value[MAX_RESERVE_C_CONC] =  RESERVE_C_CONC ;
CN-allocation.c:	if ( RESERVE_C_CONC <= s->value[MIN_RESERVE_C_CONC])
CN-allocation.c:		s->value[MIN_RESERVE_C_CONC] = RESERVE_C_CONC ;
CN-allocation.c:	c->daily_leaf_carbon        += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_froot_carbon       += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_stem_carbon        += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_croot_carbon       += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_branch_carbon      += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_reserve_carbon     += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->daily_fruit_carbon       += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->leaf_carbon              += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->froot_carbon             += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->stem_carbon              += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->branch_carbon            += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->croot_carbon             += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->reserve_carbon           += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
CN-allocation.c:	c->fruit_carbon             += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
CN-allocation.c:        if ( (s->value[LEAF_C]) < CRIT_PREC)
CN-allocation.c:            s->value[C_LEAF_TO_LITR]     += s->value[LEAF_C];
CN-allocation.c:            s->value[TOTAL_C]             = s->value[TOTAL_C] - s->value[LEAF_C];
CN-allocation.c:            c-> leaf_carbon               = c-> leaf_carbon - (s->value[LEAF_C] * 1e6 / g_settings->sizeCell);
CN-allocation.c:            s->value[LEAF_C]              = 0. ;
CN-allocation.c:            //   s->value[C_FROOT_TO_LITR]  += s->value[FROOT_C];
CN-allocation.c:            //   s->value[TOTAL_C]           = s->value[TOTAL_C] - s->value[FROOT_C];
CN-allocation.c:            //   c-> froot_carbon            = c-> froot_carbon - (s->value[FROOT_C]* 1e6 / g_settings->sizeCell);
CN-allocation.c:            //   s->value[FROOT_C]           = 0. ;
CN-allocation.c:	s->value[N_TO_LEAF]   = s->value[C_TO_LEAF]   / s->value[CN_LEAVES];
CN-allocation.c:	if ( s->value[N_TO_LEAF]   > 0. ) n_to_leaf   = s->value[N_TO_LEAF];
CN-allocation.c:	s->value[N_TO_FROOT]  = s->value[C_TO_FROOT]  / s->value[CN_FINE_ROOTS];
CN-allocation.c:	if ( s->value[N_TO_FROOT]  > 0. ) n_to_froot  = s->value[N_TO_FROOT];
CN-allocation.c:	s->value[N_TO_FRUIT]   = s->value[C_TO_FRUIT] / s->value[CN_LEAVES];//FIXME IT USES CN_LEAVES INSTEAD A CN_FRUITS
CN-allocation.c:	if ( s->value[N_TO_FRUIT]  > 0. ) n_to_fruit  = s->value[N_TO_FRUIT];
CN-allocation.c:	s->value[N_TO_RESERVE] = s->value[N_LEAF_TO_RESERVE] +
CN-allocation.c:			s->value[N_FROOT_TO_RESERVE] +
CN-allocation.c:			s->value[N_CROOT_TO_RESERVE] +
CN-allocation.c:			s->value[N_BRANCH_TO_RESERVE];
CN-allocation.c:	if ( s->value[C_TO_STEM] > 0. )
CN-allocation.c:		s->value[N_TO_STEM] = s->value[C_TO_STEM] / s->value[CN_LIVEWOOD];
CN-allocation.c:		n_to_stem  = s->value[N_TO_STEM];
CN-allocation.c:		s->value[N_TO_STEM] = (s->value[C_TO_STEM] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC] / s->value[CN_LIVEWOOD]) +
CN-allocation.c:				(s->value[C_TO_STEM] * ( 1. - s->value[EFF_LIVE_TOTAL_WOOD_FRAC]) / s->value[CN_DEADWOOD]);
CN-allocation.c:	if ( s->value[C_TO_CROOT] > 0. )
CN-allocation.c:		s->value[N_TO_CROOT] = s->value[C_TO_CROOT] / s->value[CN_LIVEWOOD];
CN-allocation.c:		n_to_croot   = s->value[N_TO_CROOT];
CN-allocation.c:		s->value[N_TO_CROOT] = (s->value[C_TO_CROOT] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC] / s->value[CN_LIVEWOOD]) +
CN-allocation.c:				(s->value[C_TO_CROOT] * ( 1. - s->value[EFF_LIVE_TOTAL_WOOD_FRAC]) / s->value[CN_DEADWOOD]);
CN-allocation.c:	if ( s->value[C_TO_BRANCH] > 0.)
CN-allocation.c:		s->value[N_TO_BRANCH] = s->value[C_TO_BRANCH] / s->value[CN_LIVEWOOD];
CN-allocation.c:		n_to_branch   = s->value[N_TO_BRANCH];
CN-allocation.c:		s->value[N_TO_BRANCH] = (s->value[C_TO_BRANCH] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC] / s->value[CN_LIVEWOOD]) +
CN-allocation.c:				(s->value[C_TO_BRANCH] * ( 1. - s->value[EFF_LIVE_TOTAL_WOOD_FRAC]) / s->value[CN_DEADWOOD]);
CN-allocation.c:	s->value[NPP_tN_DEMAND] = n_to_leaf + n_to_froot + n_to_stem + n_to_croot + n_to_branch + n_to_fruit /*+ n_to_reserve*/;
CN-allocation.c:	s->value[NPP_gN_DEMAND] = s->value[NPP_tN_DEMAND] * 1e6 / g_settings->sizeCell;
CN-allocation.c:	s->value[TREE_N_DEMAND] = s->value[NPP_gN_DEMAND];
CN-allocation.c:	if (s->value[NPP_gN_DEMAND] > c->soilN)
CN-allocation.c:	if ( ! s->value[LEAF_C] )
CN-allocation.c:                s->value[N_LEAF_TO_LITR]     += s->value[LEAF_N];
CN-allocation.c:		s->value[LEAF_N]            = 0.;
CN-allocation.c:		s->value[LEAF_N]            = s->value[LEAF_C] / s->value[CN_LEAVES];
CN-allocation.c:	if ( ! s->value[FROOT_C] )
CN-allocation.c:		s->value[FROOT_N]           = 0.;
CN-allocation.c:		s->value[FROOT_N]           = s->value[FROOT_C]           / s->value[CN_FINE_ROOTS];
CN-allocation.c:	//s->value[LEAF_FALLING_N]  = s->value[LEAF_FALLING_C]        / s->value[CN_FALLING_LEAVES];
CN-allocation.c:	s->value[STEM_LIVEWOOD_N]   = s->value[STEM_LIVEWOOD_C]       / s->value[CN_LIVEWOOD];
CN-allocation.c:	s->value[STEM_DEADWOOD_N]   = s->value[STEM_DEADWOOD_C]       / s->value[CN_DEADWOOD];
CN-allocation.c:	s->value[STEM_N]            = s->value[STEM_LIVEWOOD_N]       + s->value[STEM_DEADWOOD_N];
CN-allocation.c:	s->value[CROOT_LIVEWOOD_N]  = s->value[CROOT_LIVEWOOD_C]      / s->value[CN_LIVEWOOD];
CN-allocation.c:	s->value[CROOT_DEADWOOD_N]  = s->value[CROOT_DEADWOOD_C]      / s->value[CN_DEADWOOD];
CN-allocation.c:	s->value[CROOT_N]           = s->value[CROOT_LIVEWOOD_N]      + s->value[CROOT_DEADWOOD_N];
CN-allocation.c:	s->value[BRANCH_LIVEWOOD_N] = s->value[BRANCH_LIVEWOOD_C]     / s->value[CN_LIVEWOOD];
CN-allocation.c:	s->value[BRANCH_DEADWOOD_N] = s->value[BRANCH_DEADWOOD_C]     / s->value[CN_DEADWOOD];
CN-allocation.c:	s->value[BRANCH_N]          = s->value[BRANCH_LIVEWOOD_N]     + s->value[BRANCH_DEADWOOD_N];
CN-allocation.c:	s->value[RESERVE_N]        += s->value[N_TO_RESERVE];
CN-allocation.c:	CHECK_CONDITION ( s->value[LEAF_N],     < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[FROOT_N],    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[STEM_N],     < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[BRANCH_N],   < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[CROOT_N],    < , ZERO );
CN-allocation.c:	CHECK_CONDITION ( s->value[FRUIT_N],    < , ZERO );
CN-balance.c:	s->value[LEAF_C]     -= (s->value[C_LEAF_TO_LITR]  + s->value[C_LEAF_TO_RESERVE]);
CN-balance.c:	s->value[FROOT_C]    -= (s->value[C_FROOT_TO_LITR] + s->value[C_FROOT_TO_RESERVE]);
CN-balance.c:	s->value[STEM_C]     -= (s->value[C_STEM_TO_CWD]);
CN-balance.c:	s->value[CROOT_C]    -= (s->value[C_CROOT_TO_CWD]);
CN-balance.c:	s->value[BRANCH_C]   -= (s->value[C_BRANCH_TO_CWD]);
CN-balance.c:	s->value[RESERVE_C]  -= (s->value[C_RESERVE_TO_CWD]);
CN-balance.c:	s->value[FRUIT_C]    -= (s->value[C_FRUIT_TO_CWD]);
CN-balance.c:	s->value[LITR_C]     += (s->value[C_LEAF_TO_LITR]     +
CN-balance.c:			s->value[C_FROOT_TO_LITR]);
CN-balance.c:	s->value[CWD_C]      += (s->value[C_STEM_TO_CWD] +
CN-balance.c:			s->value[C_CROOT_TO_CWD]                 +
CN-balance.c:			s->value[C_BRANCH_TO_CWD]                +
CN-balance.c:			s->value[C_RESERVE_TO_CWD]               +
CN-balance.c:			s->value[C_FRUIT_TO_CWD]);
CN-balance.c:	CHECK_CONDITION ( s->value[LEAF_C],     < , ZERO );
CN-balance.c:	CHECK_CONDITION ( s->value[FROOT_C],    < , ZERO );
CN-balance.c:	CHECK_CONDITION ( s->value[STEM_C],     < , ZERO );
CN-balance.c:	CHECK_CONDITION ( s->value[BRANCH_C],   < , ZERO );
CN-balance.c:	CHECK_CONDITION ( s->value[CROOT_C],    < , ZERO );
CN-balance.c:	CHECK_CONDITION ( s->value[FRUIT_C],    < , ZERO );
CN-balance.c:	CHECK_CONDITION ( s->value[LITR_C],     < , ZERO );
CN-balance.c:	CHECK_CONDITION ( s->value[CWD_C],      < , ZERO );
CN-balance.c:	c->leaf_carbon              -= (s->value[C_LEAF_TO_LITR]  * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->froot_carbon             -= (s->value[C_FROOT_TO_LITR] * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->stem_carbon              -= (s->value[C_STEM_TO_CWD]   * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->branch_carbon            -= (s->value[C_CROOT_TO_CWD]  * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->croot_carbon             -= (s->value[C_BRANCH_TO_CWD] * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->reserve_carbon           -= (s->value[C_BRANCH_TO_CWD] * 1e6 / g_settings->sizeCell);
CN-balance.c:	c->fruit_carbon             -= (s->value[C_FRUIT_TO_CWD]  * 1e6 / g_settings->sizeCell);
compare.c:						fprintf(f, "%s-%s", d1->values[VALUE_AT(d1,row,col)].s, d2->values[VALUE_AT(d2,row,col)].s);
cue.c:	if( s->value[NPP] > 0. && s->value[GPP] > 0. )
cue.c:		s->value[CUE] = s->value[NPP] / s->value[GPP];
cue.c:		s->value[CUE] = 0.;
cue.c:		if( s->value[MONTHLY_NPP] > 0. && s->value[MONTHLY_GPP > 0.])
cue.c:			s->value[MONTHLY_CUE] = s->value[MONTHLY_NPP] / s->value[MONTHLY_GPP];
cue.c:			s->value[MONTHLY_CUE] = 0.;
cue.c:		if( s->value[YEARLY_NPP] > 0. && s->value[YEARLY_GPP] > 0.)
cue.c:			s->value[YEARLY_CUE] = s->value[YEARLY_NPP] / s->value[YEARLY_GPP];
cue.c:			s->value[YEARLY_CUE] = 0.;
cue.c:	if( s->value[BP] > 0. && s->value[GPP] > 0. )
cue.c:		s->value[BPE] = s->value[BP] / s->value[GPP];
cue.c:		s->value[BPE] = 0.;
cue.c:		if( s->value[MONTHLY_BP] > 0. && s->value[MONTHLY_GPP > 0.])
cue.c:			s->value[MONTHLY_BPE] = s->value[MONTHLY_BP] / s->value[MONTHLY_GPP];
cue.c:			s->value[MONTHLY_BPE] = 0.;
cue.c:		if( s->value[YEARLY_BP] > 0. && s->value[YEARLY_GPP] > 0.)
cue.c:			s->value[YEARLY_BPE] = s->value[YEARLY_BP] / s->value[YEARLY_GPP];
cue.c:			s->value[YEARLY_BPE] = 0.;
decomposition.c:	if ( g_settings->spinup ) spinup_littering ( c );
dendrometry.c:	oldBasalArea  = s->value[BASAL_AREA];
dendrometry.c:	if (s->value[STEMCONST_P] == NO_DATA && s->value[STEMPOWER_P] == NO_DATA)
dendrometry.c:			d->value = pow(((s->value[TREE_STEM_C] * 1e3) * GC_GDM / s->value[STEMCONST]), (1. / STEMPOWER_A));
dendrometry.c:			d->value = pow(((s->value[TREE_STEM_C] * 1e3) * GC_GDM / s->value[STEMCONST]), (1. / STEMPOWER_B));
dendrometry.c:			d->value = pow(((s->value[TREE_STEM_C] * 1e3) * GC_GDM / s->value[STEMCONST]), (1. / STEMPOWER_C));
dendrometry.c:                s->value[TREE_STEM_C]                = (s->value[STEM_C]             / (double)s->counter[N_TREE]);
dendrometry.c:		d->value = pow(((s->value[TREE_STEM_C] * 1e3) * GC_GDM) / s->value[STEMCONST_P], (1. / s->value[STEMPOWER_P]));
dendrometry.c:	logger(g_debug_log, "-STEM_C          = %f tC/cell\n", s->value[STEM_C]);
dendrometry.c:	logger(g_debug_log, "-TREE_STEM_C     = %f tC/tree\n", s->value[TREE_STEM_C]);
dendrometry.c:	 * CRA, CRB, CRC are species-specific regression coefficients
dendrometry.c:	h->value = DBH_ref + s->value[CRA] * pow (1. - exp ( - s->value[CRB] * d->value) , s->value[CRC]);
dendrometry.c:       if ( h->value > (s->value[CRA] + DBH_ref) )    // according to the RC equation, the max value of HA is DBH_ref + CRA (asymptotic value)
dendrometry.c:		h->value = (s->value[CRA]+ DBH_ref);
dendrometry.c:	CHECK_CONDITION (h->value, >, (s->value[CRA] + DBH_ref + eps) )
dendrometry.c:	 h->value = DBH_ref + s->value[WA] *(1.0 - exp ( - s->value[WB] * d->value * s->value[WC]));
dendrometry.c:	if ( ! s->counter[YOS] ){ CHECK_CONDITION( oldTreeHeight - h->value , > , max_diff );}
dendrometry.c:	s->value[BASAL_AREA]          = ( ( pow( ( d->value / 2.), 2. ) ) * Pi);
dendrometry.c:	s->value[BASAL_AREA_m2]       = s->value[BASAL_AREA]    * 0.0001;
dendrometry.c:	s->value[STAND_BASAL_AREA]    = s->value[BASAL_AREA]    * s->counter[N_TREE];
dendrometry.c:	s->value[STAND_BASAL_AREA_m2] = s->value[BASAL_AREA_m2] * s->counter[N_TREE];
dendrometry.c:	logger(g_debug_log, " BASAL AREA = %f cm^2\n", s->value[BASAL_AREA]);
dendrometry.c:	logger(g_debug_log, " BASAL BASAL_AREA_m2 = %f m^2\n", s->value[BASAL_AREA_m2]);
dendrometry.c:	logger(g_debug_log, " Stand level class basal area = %f cm2/class cell\n", s->value[STAND_BASAL_AREA]);
dendrometry.c:	logger(g_debug_log, " Stand level class basal area = %f m2/class cell\n", s->value[STAND_BASAL_AREA_m2]);
dendrometry.c:	logger(g_debug_log, "-New Basal Area = %f cm^2\n", s->value[BASAL_AREA]);
dendrometry.c:	CHECK_CONDITION( s->value[BASAL_AREA], <, oldBasalArea - eps );
dendrometry.c:	s->value[SAPWOOD_AREA]   = ( s->value[BASAL_AREA] * s->value[STEM_SAPWOOD_C] ) / s->value[STEM_C];
dendrometry.c:	s->value[HEARTWOOD_AREA] = ( s->value[BASAL_AREA] - s->value[SAPWOOD_AREA]) ;
dendrometry.c:	s->value[SAPWOOD_AREA]     = s->value[SAP_A] * pow (d->value, s->value[SAP_B]);
dendrometry.c:	s->value[HEARTWOOD_AREA]   = s->value[BASAL_AREA] - s->value[SAPWOOD_AREA];
dendrometry.c:	s->value[SAPWOOD_PERC]     = s->value[SAPWOOD_AREA] / s->value[BASAL_AREA];
dendrometry.c://	s->value[STEM_SAPWOOD_C]   = s->value[STEM_C]   * s->value[SAPWOOD_PERC];
dendrometry.c://	s->value[CROOT_SAPWOOD_C]  = s->value[CROOT_C]  * s->value[SAPWOOD_PERC];
dendrometry.c://	s->value[BRANCH_SAPWOOD_C] = s->value[BRANCH_C] * s->value[SAPWOOD_PERC];
dendrometry.c://	s->value[TOT_SAPWOOD_C]    = s->value[STEM_SAPWOOD_C] + s->value[CROOT_SAPWOOD_C] + s->value[BRANCH_SAPWOOD_C];
dendrometry.c:	if ( s->value[SAPWOOD_AREA] > s->value[BASAL_AREA] + eps3 )
dendrometry.c:		s->value[SAPWOOD_AREA] = s->value[BASAL_AREA];
dendrometry.c:		printf("Warning: s->value[SAPWOOD_AREA] > s->value[BASAL_AREA]\n");
dendrometry.c:	if ( s->value[HEARTWOOD_AREA] > s->value[BASAL_AREA] + eps3 )
dendrometry.c:		s->value[HEARTWOOD_AREA] = s->value[BASAL_AREA];
dendrometry.c:		printf("Warning: s->value[HEARTWOOD_AREA] > s->value[BASAL_AREA]\n");
dendrometry.c:	CHECK_CONDITION( s->value[SAPWOOD_AREA]   , > , s->value[BASAL_AREA] + eps3);
dendrometry.c:	CHECK_CONDITION( s->value[HEARTWOOD_AREA] , > , s->value[BASAL_AREA] + eps3);
dendrometry.c:	CHECK_CONDITION( (fabs(s->value[SAPWOOD_AREA] + s->value[HEARTWOOD_AREA]) - s->value[BASAL_AREA]), > , eps);
dendrometry.c:	logger(g_debug_log, "SAPWOOD_AREA     = %f cm^2\n",    s->value[SAPWOOD_AREA]);
dendrometry.c:	logger(g_debug_log, "HEART_WOOD_AREA  = %f cm^2\n",    s->value[HEARTWOOD_AREA]);
dendrometry.c:	logger(g_debug_log, "SAPWOOD_PERC     = %f%%\n",       s->value[SAPWOOD_PERC] * 100.);
dendrometry.c:	logger(g_debug_log, "CROOT_SAPWOOD_C  = %f tC cell\n", s->value[CROOT_SAPWOOD_C]);
dendrometry.c:	logger(g_debug_log, "BRANCH_SAPWOOD_C = %f tC cell\n", s->value[BRANCH_SAPWOOD_C]);
dendrometry.c:	logger(g_debug_log, "TOT_SAPWOOD_C    = %f tc cell\n", s->value[TOT_SAPWOOD_C]);
dendrometry.c:	prev_vol              = s->value[VOLUME];
dendrometry.c:	tree_prev_vol         = s->value[TREE_VOLUME];
dendrometry.c:	s->value[TREE_VOLUME] = (Pi * s->value[FORM_FACTOR] * pow((d->value / 100.) , 2.) * h->value) / 4.;
dendrometry.c:	logger(g_debug_log, "-Single tree volume = %g m3/tree\n", s->value[TREE_VOLUME]);
dendrometry.c:	s->value[VOLUME]      = s->value[TREE_VOLUME] * s->counter[N_TREE];
dendrometry.c:	logger(g_debug_log, "-Class volume = %g m3/sizeCell\n", s->value[VOLUME]);
dendrometry.c:	s->value[CAI]         = s->value[VOLUME]      - prev_vol;
dendrometry.c:	logger(g_debug_log, "CAI-Current Annual Increment = %f m^3DM/cell/yr\n", s->value[CAI]);
dendrometry.c:	s->value[TREE_CAI]    = s->value[TREE_VOLUME] - tree_prev_vol;
dendrometry.c:	logger(g_debug_log, "CAI-Current Annual Increment = %f m^3DM/tree/yr\n", s->value[TREE_CAI]);
dendrometry.c:	s->value[MAI]         = s->value[VOLUME]      / (double)a->value;
dendrometry.c:	logger(g_debug_log, "MAI-Mean Annual Increment    = %f m^3DM/cell/yr \n", s->value[MAI]);
dendrometry.c:	s->value[TREE_MAI]    = s->value[TREE_VOLUME] / (double)a->value;
dendrometry.c:	logger(g_debug_log, "MAI-Mean Annual Increment    = %f m^3DM/tree/yr \n", s->value[TREE_MAI]);
dendrometry.c:	c->volume     += s->value[VOLUME];
dendrometry.c:	c->cum_volume += s->value[VOLUME];
dendrometry.c:	if ( ! s->counter[YOS] ) { CHECK_CONDITION( ( tree_prev_vol - s->value[TREE_VOLUME] ), > , max_diff ); }
dendrometry.c:	else { CHECK_CONDITION( s->value[TREE_VOLUME], < , tree_prev_vol - eps ); }
dendrometry.c:        actuall_sapwood = s->value[TREE_SAPWOOD_C] * s->counter[N_TREE];  //N tree is updated if thinning happend 
dendrometry.c:        s->value[TOT_SAPWOOD_DM] = actuall_sapwood * GC_GDM;
dendrometry.c:	logger(g_debug_log, "--WTOT_sap_tDM = %f tDM/class \n", s->value[TOT_SAPWOOD_DM]);
dendrometry.c:	s->value[MIN_RESERVE_C]  = s->value[TOT_SAPWOOD_DM] * s->value[SAP_WRES];
dendrometry.c:	logger(g_debug_log, "--MINIMUM Reserve Biomass = %f t res/class \n", s->value[MIN_RESERVE_C]);
dendrometry.c:	s->value[TREE_MIN_RESERVE_C] = s->value[MIN_RESERVE_C] / (double)s->counter[N_TREE];
dendrometry.c:	logger(g_debug_log, "--Average MINIMUM Reserve Biomass = %f tC/class tree \n", s->value[TREE_MIN_RESERVE_C]);
dendrometry.c:        s->value[MAX_ANN_RESERVE_C]          = s->value[RESERVE_C];
dendrometry.c:        s->value[MIN_ANN_RESERVE_C]          = s->value[RESERVE_C]; 
dendrometry.c:        s->value[TREE_MAX_ANN_RESERVE_C]          = s->value[RESERVE_C] / (double)s->counter[N_TREE];
dendrometry.c:        s->value[TREE_MIN_ANN_RESERVE_C]          = s->value[RESERVE_C] / (double)s->counter[N_TREE]; 
dendrometry.c:        s->value[MAX_RESERVE_C_CONC] = ( s->value[MAX_ANN_RESERVE_C] / (s->value[TOT_SAPWOOD_C] * GC_GDM ) ) * 100.;
dendrometry.c:        s->value[MIN_RESERVE_C_CONC] = ( s->value[MIN_ANN_RESERVE_C] / (s->value[TOT_SAPWOOD_C] * GC_GDM ) ) * 100.;
dendrometry.c:	//	oldBasalArea = s->value[BASAL_AREA];
dendrometry.c:	//	s->value[MASS_DENSITY] = s->value[RHO1] + (s->value[RHO0] - s->value[RHO1]) * exp(-LN2 * ((double)a->value / s->value[TRHO]));
dendrometry.c:	//	logger(g_debug_log, "-Mass Density = %f tDM/m3\n", s->value[MASS_DENSITY]);
dendrometry.c:	//	mass_density_kg = s->value[MASS_DENSITY] * 1000.;
dendrometry.c:	//	phi = (mass_density_kg * s->value[FORM_FACTOR] * Pi ) / 4.;
dendrometry.c:	//	//	logger(g_debug_log, "Ind old stem mass = %f kgDM/tree\n", (s->value[STEM_C] * GC_GDM * 1000.)/s->counter[N_TREE]);
dendrometry.c:	//	//	logger(g_debug_log, "Ind old stem volume = %f m3/tree\n", ((s->value[STEM_C] * GC_GDM)/s->counter[N_TREE])/s->value[MASS_DENSITY]);
dendrometry.c:	//	//	old_stem_volume = s->value[FORM_FACTOR] * pow(d->value,2.) * h->value * 0.0001;
dendrometry.c:	//	s->value[HD_MAX] = s->value[HDMAX_A] * pow(d->value, s->value[HDMAX_B]);
dendrometry.c:	//	logger(g_debug_log, "HD_MAX = %f \n", s->value[HD_MAX]);
dendrometry.c:	//	s->value[HD_MIN] = s->value[HDMIN_A] * pow(d->value, s->value[HDMIN_B]);
dendrometry.c:	//	logger(g_debug_log, "HD_MIN = %f \n", s->value[HD_MIN]);
dendrometry.c:	//	current_hdf = s->value[STEMCONST_P]*pow(dbh_m, s->value[STEMPOWER_P]);
dendrometry.c:	//	if( s->value[LAI_PROJ] >= 1.0 )
dendrometry.c:	//		Light_refl_par_frac = s->value[ALBEDO]/3.0;
dendrometry.c:	//	else if ( ! s->value[LAI_PROJ] )
dendrometry.c:	//		Light_refl_par_frac = (s->value[ALBEDO]/3.0) * s->value[LAI_PROJ];
dendrometry.c:	//	if ( s->value[LAI_PROJ] > 0.)
dendrometry.c:	//		pot_par = meteo_daily->incoming_par - (meteo_daily->incoming_par * Light_refl_par_frac * s->value[DAILY_CANOPY_COVER_EXP]);
dendrometry.c:	//		pot_apar_sun   = pot_par * (1. - (exp(- s->value[K] * s->value[LAI_SUN_PROJ]))) * s->value[DAILY_CANOPY_COVER_EXP];
dendrometry.c:	//		pot_apar_shade = (pot_par - pot_apar_sun) * (1. - (exp(- s->value[K] * s->value[LAI_SHADE_PROJ]))) * s->value[DAILY_CANOPY_COVER_EXP];
dendrometry.c:	//		current_lcf = s->value[APAR] / pot_apar;
dendrometry.c:	//		slope       = s->value[DBHDCMAX]- s->value[DBHDCMIN];
dendrometry.c:	//		current_ccf = (s->value[DBHDC_EFF] - s->value[DBHDCMIN])/slope;
dendrometry.c:	//		s->value[HD_EFF] = (s->value[HD_MAX] * (1. - hd_factor)) + (s->value[HD_MIN] * hd_factor);
dendrometry.c:	//		logger(g_debug_log, "Effective H/D ratio = %f\n", s->value[HD_EFF]);
dendrometry.c:	//		CHECK_CONDITION( s->value[HD_EFF], <, s->value[HD_MIN]);
dendrometry.c:	//		CHECK_CONDITION( s->value[HD_EFF], >, s->value[HD_MAX]);
dendrometry.c:	//		//	delta_stem = (s->value[C_TO_STEM] * GC_GDM * 1000. ) / s->counter[N_TREE];
dendrometry.c:	//		//	delta_dbh_m = delta_stem / (phi * pow(dbh_m,2.) * ( ( 2. * current_hdf ) + s->value[HD_EFF]) );
dendrometry.c:	//		//	delta_height = delta_dbh_m * s->value[HD_EFF];
dendrometry.c:	//		s->value[HD_EFF] /= 100.;
dendrometry.c:	//		delta_stem = ( s->value[STEM_C] - old_stem ) * GC_GDM;
dendrometry.c:	//		old_stem = s->value[STEM_C];
dendrometry.c:	//		delta_dbh = ( 4. * delta_stem ) / ( Pi * s->value[FORM_FACTOR] * s->value[MASS_DENSITY] * pow ( d->value , 2. ) *
dendrometry.c:	//				( ( 2 * ( h->value / d->value ) + s->value[HD_EFF])));
dendrometry.c:	//		delta_height = delta_dbh * s->value[HD_EFF];
dendrometry.c:	//		//CHECK_CONDITION( h->value, > s->value[CRA] - eps );
dendrometry.c:	//		s->value[BASAL_AREA]    = ( ( pow ( ( d->value / 2.), 2. ) ) * Pi );
dendrometry.c:	//		s->value[BASAL_AREA_m2] = s->value[BASAL_AREA] * 0.0001;
dendrometry.c:	//		logger(g_debug_log, " BASAL AREA = %f cm^2\n", s->value[BASAL_AREA]);
dendrometry.c:	//		logger(g_debug_log, " BASAL BASAL_AREA_m2 = %f m^2\n", s->value[BASAL_AREA_m2]);
dendrometry.c:	//		s->value[SAPWOOD_AREA]     = (s->value[SAP_A] * pow (d->value, s->value[SAP_B]));
dendrometry.c:	//		s->value[HEARTWOOD_AREA]   = (s->value[BASAL_AREA] - s->value[SAPWOOD_AREA]);
dendrometry.c:	//		s->value[SAPWOOD_PERC]     = (s->value[SAPWOOD_AREA]) / s->value[BASAL_AREA];
dendrometry.c:	//		s->value[STEM_SAPWOOD_C]   = (s->value[STEM_C]   * s->value[SAPWOOD_PERC]);
dendrometry.c:	//		s->value[CROOT_SAPWOOD_C]  = (s->value[CROOT_C]  * s->value[SAPWOOD_PERC]);
dendrometry.c:	//		s->value[BRANCH_SAPWOOD_C] = (s->value[BRANCH_C] * s->value[SAPWOOD_PERC]);
dendrometry.c:	//		logger(g_debug_log, " SAPWOOD_AREA                    = %f cm2/tree\n", s->value[SAPWOOD_AREA]);
dendrometry.c:	//		logger(g_debug_log, " HEART_WOOD_AREA                 = %f cm2/tree\n", s->value[HEARTWOOD_AREA]);
dendrometry.c:	//		logger(g_debug_log, " sapwood perc                    = %f%%\n", s->value[SAPWOOD_PERC]*100);
dendrometry.c:	//		logger(g_debug_log, " Sapwood stem biomass            = %f tC class cell \n", s->value[STEM_SAPWOOD_C]);
dendrometry.c:	//		logger(g_debug_log, " Sapwood coarse root biomass     = %f tC class cell \n", s->value[CROOT_SAPWOOD_C]);
dendrometry.c:	//		logger(g_debug_log, " Sapwood branch and bark biomass = %f tC class cell \n", s->value[BRANCH_SAPWOOD_C]);
dendrometry.c:	//		s->value[TOT_SAPWOOD_C]       = s->value[STEM_SAPWOOD_C] + s->value[CROOT_SAPWOOD_C] + s->value[BRANCH_SAPWOOD_C];
dendrometry.c:	//		s->value[STAND_BASAL_AREA]    = s->value[BASAL_AREA] * s->counter[N_TREE];
dendrometry.c:	//		s->value[STAND_BASAL_AREA_m2] = s->value[BASAL_AREA_m2] * s->counter[N_TREE];
dendrometry.c:	//		logger(g_debug_log, " Total Sapwood biomass = %f tc class cell \n", s->value[TOT_SAPWOOD_C]);
dendrometry.c:	//		logger(g_debug_log, " Stand level class basal area = %f cm^2/class cell\n", s->value[STAND_BASAL_AREA]);
dendrometry.c:	//		logger(g_debug_log, " Stand level class basal area (meters) = %f m^2/class cell\n", s->value[STAND_BASAL_AREA_m2]);
dendrometry.c:	//		logger(g_debug_log, "-New Basal Area = %f cm^2\n", s->value[BASAL_AREA]);
dendrometry.c:	//		CHECK_CONDITION( s->value[BASAL_AREA], <, oldBasalArea - eps );
fluxes.c:	s->value[C_FLUX] = s->value[GPP] - s->value[TOTAL_AUT_RESP];
fluxes.c:	logger(g_debug_log, "c-flux = %f gC/m2/day\n", s->value[C_FLUX]);
g-function.c:					s->value[FROOT_LEAF_FRAC]      = s->value[FINE_ROOT_LEAF]   / (s->value[FINE_ROOT_LEAF]   +1.);
g-function.c:					s->value[STEM_LEAF_FRAC]       = s->value[STEM_LEAF]        / (s->value[STEM_LEAF]        +1.);
g-function.c:					s->value[CROOT_STEM_FRAC]      = s->value[COARSE_ROOT_STEM] / (s->value[COARSE_ROOT_STEM] +1.);
g-function.c:					s->value[LIVE_TOTAL_WOOD_FRAC] = s->value[LIVE_TOTAL_WOOD]  / (s->value[LIVE_TOTAL_WOOD]  +1.);
g-function.c:					if ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 )
g-function.c:							s->counter[DAY_VEG_FOR_LEAF_FALL] = 0;
g-function.c:						if ((met[month].d[day].thermic_sum >= s->value[GROWTHSTART] && month <= 6)
g-function.c:								|| (met[month].d[day].daylength >= s->value[MINDAYLENGTH] && month >= 6))
g-function.c:							s->counter[DAY_VEG_FOR_LEAF_FALL] += 1;
g-function.c:							s->counter[DAY_VEG_FOR_LEAF_FALL] = 366;
g-function.c:							s->counter[DAY_VEG_FOR_LEAF_FALL] = 365;
g-function.c:						s->counter[DAYS_LEAFFALL] =  (int) (s->value[LEAF_FALL_FRAC_GROWING] *
g-function.c:								s->counter[DAY_VEG_FOR_LEAF_FALL]);
g-function.c:						logger(g_debug_log, "Days of leaf fall = %d\n", s->counter[DAYS_LEAFFALL] );
g-function.c:						if (s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2)
g-function.c:							s->counter[DAY_VEG_FOR_LEAF_FALL] += (int)(s->counter[DAY_VEG_FOR_LEAF_FALL] *
g-function.c:									s->value[LEAF_FALL_FRAC_GROWING]);
g-function.c:						logger(g_debug_log, "-species %s annual vegetative days = %d \n", s->name, s->counter[DAY_VEG_FOR_LEAF_FALL]);
harvesting:aut_respiration.c:		c->daily_leaf_maint_resp   += s->value[TOT_LEAF_MAINT_RESP];
harvesting:aut_respiration.c:		c->daily_stem_maint_resp   += s->value[STEM_MAINT_RESP];
harvesting:aut_respiration.c:		c->daily_froot_maint_resp  += s->value[FROOT_MAINT_RESP];
harvesting:aut_respiration.c:		c->daily_branch_maint_resp += s->value[BRANCH_MAINT_RESP];
harvesting:aut_respiration.c:		c->daily_croot_maint_resp  += s->value[CROOT_MAINT_RESP];
harvesting:aut_respiration.c:	c->daily_maint_resp                += s->value[TOTAL_MAINT_RESP];
harvesting:aut_respiration.c:	c->monthly_maint_resp              += s->value[TOTAL_MAINT_RESP];
harvesting:aut_respiration.c:	c->annual_maint_resp               += s->value[TOTAL_MAINT_RESP];
harvesting:aut_respiration.c:		c->daily_leaf_growth_resp   += s->value[LEAF_GROWTH_RESP];
harvesting:aut_respiration.c:		c->daily_stem_growth_resp   += s->value[STEM_GROWTH_RESP];
harvesting:aut_respiration.c:		c->daily_froot_growth_resp  += s->value[FROOT_GROWTH_RESP];
harvesting:aut_respiration.c:		c->daily_branch_growth_resp += s->value[BRANCH_GROWTH_RESP];
harvesting:aut_respiration.c:		c->daily_croot_growth_resp  += s->value[CROOT_GROWTH_RESP];
harvesting:aut_respiration.c:	c->daily_growth_resp                += s->value[TOTAL_GROWTH_RESP];
harvesting:aut_respiration.c:	c->monthly_growth_resp              += s->value[TOTAL_GROWTH_RESP];
harvesting:aut_respiration.c:	c->annual_growth_resp               += s->value[TOTAL_GROWTH_RESP];
harvesting:aut_respiration.c:		c->daily_leaf_aut_resp            += (s->value[TOT_LEAF_MAINT_RESP]     + s->value[LEAF_GROWTH_RESP]);
harvesting:aut_respiration.c:		c->daily_stem_aut_resp            += (s->value[STEM_MAINT_RESP]         + s->value[STEM_GROWTH_RESP]);
harvesting:aut_respiration.c:		c->daily_branch_aut_resp          += (s->value[BRANCH_MAINT_RESP]       + s->value[BRANCH_GROWTH_RESP]);
harvesting:aut_respiration.c:		c->daily_froot_aut_resp           += (s->value[FROOT_MAINT_RESP]        + s->value[FROOT_GROWTH_RESP]);
harvesting:aut_respiration.c:		c->daily_croot_aut_resp           += (s->value[CROOT_MAINT_RESP]        + s->value[CROOT_GROWTH_RESP]);
harvesting:aut_respiration.c:	c->daily_aut_resp                     += s->value[TOTAL_AUT_RESP];
harvesting:aut_respiration.c:	c->monthly_aut_resp                   += s->value[TOTAL_AUT_RESP];
harvesting:aut_respiration.c:	c->annual_aut_resp                    += s->value[TOTAL_AUT_RESP];
harvesting:aut_respiration.c:	c->daily_aut_resp_tC                  += (s->value[TOTAL_AUT_RESP] / 1e6 * g_settings->sizeCell);
harvesting:aut_respiration.c:	c->monthly_aut_resp_tC                += (s->value[TOTAL_AUT_RESP] / 1e6 * g_settings->sizeCell);
harvesting:aut_respiration.c:	c->annual_aut_resp_tC                 += (s->value[TOTAL_AUT_RESP] / 1e6 * g_settings->sizeCell);
harvesting:biomass.c:		c->daily_cwd_to_litrC           += s->value[CWD_LITRC]  * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->daily_cwd_to_litr2C          += s->value[CWD_LITR2C] * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->daily_cwd_to_litr3C          += s->value[CWD_LITR3C] * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->daily_cwd_to_litr4C          += s->value[CWD_LITR4C] * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->cwd_C                        += s->value[CWD_LITRC]  * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->cwd_2C                       += s->value[CWD_LITR2C] * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->cwd_3C                       += s->value[CWD_LITR3C] * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->cwd_4C                       += s->value[CWD_LITR4C] * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->daily_cwd_to_litrN           += s->value[CWD_LITRN]  * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->daily_cwd_to_litr2N          += s->value[CWD_LITR2N] * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->daily_cwd_to_litr3N          += s->value[CWD_LITR3N] * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->daily_cwd_to_litr4N          += s->value[CWD_LITR4N] * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->cwd_N                        += s->value[CWD_LITRN]  * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->cwd_2N                       += s->value[CWD_LITR2N] * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->cwd_3N                       += s->value[CWD_LITR3N] * 1e6 / g_settings->sizeCell;
harvesting:biomass.c:		c->cwd_4N                       += s->value[CWD_LITR4N] * 1e6 / g_settings->sizeCell;
harvesting:canopy_cover.c:	temp_crown_area     = ( s->value[MAX_LAYER_COVER] * g_settings->sizeCell ) / ( c->tree_layers[layer].layer_density * g_settings->sizeCell );
harvesting:canopy_evapotranspiration.c:			c->canopy_water_stored           += ( s->value[CANOPY_INT_RAIN] - s->value[CANOPY_EVAPO] );
harvesting:canopy_evapotranspiration.c:			c->canopy_snow_stored                += ( s->value[CANOPY_INT_SNOW] - s->value[CANOPY_EVAPO] );
harvesting:canopy_evapotranspiration.c:	if ( s->value[CANOPY_TRANSP] > c->asw )
harvesting:canopy_evapotranspiration.c:		if ( s->value[CANOPY_TRANSP] > c->asw )
harvesting:canopy_evapotranspiration.c:		CHECK_CONDITION ( s->value[CANOPY_TRANSP] , > , c->asw );
harvesting:canopy_evapotranspiration.c:	c->daily_canopy_evapo                 += s->value[CANOPY_EVAPO];
harvesting:canopy_evapotranspiration.c:	c->daily_canopy_transp                += s->value[CANOPY_TRANSP];
harvesting:canopy_evapotranspiration.c:	c->daily_canopy_et                    += s->value[CANOPY_EVAPO_TRANSP];
harvesting:canopy_interception.c:	c->temp_int_rain += s->value[CANOPY_INT_RAIN]* s->value[DAILY_CANOPY_COVER_PROJ];
harvesting:canopy_interception.c:	c->temp_int_snow += s->value[CANOPY_INT_SNOW]* s->value[DAILY_CANOPY_COVER_PROJ];
harvesting:canopy_interception.c:	//c->temp_int_rain += s->value[CANOPY_INT_RAIN];
harvesting:canopy_interception.c:	//c->temp_int_snow += s->value[CANOPY_INT_SNOW];
harvesting:canopy_interception.c:		//c->daily_canopy_rain_int += s->value[CANOPY_INT_RAIN];
harvesting:canopy_interception.c:		c->daily_canopy_rain_int += s->value[CANOPY_INT_RAIN]* s->value[DAILY_CANOPY_COVER_PROJ];
harvesting:canopy_interception.c:		//c->daily_canopy_snow_int += s->value[CANOPY_INT_SNOW];
harvesting:canopy_interception.c:		c->daily_canopy_snow_int += s->value[CANOPY_INT_SNOW]* s->value[DAILY_CANOPY_COVER_PROJ];
harvesting:canopy_radiation_lw_band.c:	c->net_lw_rad_for_soil = c->soil_long_wave_emitted - (EMSOIL * s->value[LW_RAD_TRANSM]) - (EMSOIL * meteo_daily->atm_lw_downward_W);
harvesting:canopy_radiation_sw_band.c:	c->temp_apar       += s->value[APAR];
harvesting:canopy_radiation_sw_band.c:	c->apar            += s->value[APAR];
harvesting:canopy_radiation_sw_band.c:	c->temp_par_refl   += s->value[PAR_REFL];
harvesting:canopy_radiation_sw_band.c:	c->par_refl        += s->value[PAR_REFL];
harvesting:canopy_radiation_sw_band.c:	c->temp_sw_rad_abs  += s->value[SW_RAD_ABS];
harvesting:canopy_radiation_sw_band.c:	c->sw_rad_abs       += s->value[SW_RAD_ABS];
harvesting:canopy_radiation_sw_band.c:	c->temp_sw_rad_refl += s->value[SW_RAD_REFL];
harvesting:canopy_radiation_sw_band.c:	c->sw_rad_refl      += s->value[SW_RAD_REFL];
harvesting:canopy_radiation_sw_band.c:	c->temp_net_rad_abs += s->value[NET_RAD_ABS];
harvesting:canopy_radiation_sw_band.c:	c->net_rad_abs      += s->value[NET_RAD_ABS];
harvesting:canopy_radiation_sw_band.c:	c->temp_net_rad_refl += s->value[NET_RAD_REFL];
harvesting:canopy_radiation_sw_band.c:	c->net_rad_refl      += s->value[NET_RAD_REFL];
harvesting:canopy_temperature.c:	c->canopy_temp = s->value[CANOPY_TEMP_K] - TempAbs;
harvesting:canopy_temperature.c:	c->canopy_temp_k = s->value[CANOPY_TEMP_K];
harvesting:C-assimilation.c:	c->daily_npp             += s->value[NPP];
harvesting:C-assimilation.c:	c->monthly_npp           += s->value[NPP];
harvesting:C-assimilation.c:	c->annual_npp            += s->value[NPP];
harvesting:C-assimilation.c:	c->daily_npp_tC          += s->value[NPP_tC];
harvesting:C-assimilation.c:	c->monthly_npp_tC        += s->value[NPP_tC];
harvesting:C-assimilation.c:	c->annual_npp_tC         += s->value[NPP_tC];
harvesting:C-deciduous-partitioning.c:	h = &c->heights[height];
harvesting:C-deciduous-partitioning.c:	/* note: in Biome a constant proportion (50%) (Growth:storage parameter) of NPP that goes to the c-pools is allocated
harvesting:CN-allocation.c:	c->daily_leaf_carbon        += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_froot_carbon       += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_stem_carbon        += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_croot_carbon       += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_branch_carbon      += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_reserve_carbon     += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_fruit_carbon       += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->leaf_carbon              += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->froot_carbon             += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->stem_carbon              += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->branch_carbon            += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->croot_carbon             += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->reserve_carbon           += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->fruit_carbon             += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_leaf_carbon        += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_froot_carbon       += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_stem_carbon        += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_croot_carbon       += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_branch_carbon      += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_reserve_carbon     += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->daily_fruit_carbon       += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->leaf_carbon              += (s->value[C_TO_LEAF]    * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->froot_carbon             += (s->value[C_TO_FROOT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->stem_carbon              += (s->value[C_TO_STEM]    * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->branch_carbon            += (s->value[C_TO_BRANCH]  * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->croot_carbon             += (s->value[C_TO_CROOT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->reserve_carbon           += (s->value[C_TO_RESERVE] * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	c->fruit_carbon             += (s->value[C_TO_FRUIT]   * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:            c-> leaf_carbon               = c-> leaf_carbon - (s->value[LEAF_C] * 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:            //   c-> froot_carbon            = c-> froot_carbon - (s->value[FROOT_C]* 1e6 / g_settings->sizeCell);
harvesting:CN-allocation.c:	if (s->value[NPP_gN_DEMAND] > c->soilN)
harvesting:CN-balance.c:	c->leaf_carbon              -= (s->value[C_LEAF_TO_LITR]  * 1e6 / g_settings->sizeCell);
harvesting:CN-balance.c:	c->froot_carbon             -= (s->value[C_FROOT_TO_LITR] * 1e6 / g_settings->sizeCell);
harvesting:CN-balance.c:	c->stem_carbon              -= (s->value[C_STEM_TO_CWD]   * 1e6 / g_settings->sizeCell);
harvesting:CN-balance.c:	c->branch_carbon            -= (s->value[C_CROOT_TO_CWD]  * 1e6 / g_settings->sizeCell);
harvesting:CN-balance.c:	c->croot_carbon             -= (s->value[C_BRANCH_TO_CWD] * 1e6 / g_settings->sizeCell);
harvesting:CN-balance.c:	c->reserve_carbon           -= (s->value[C_BRANCH_TO_CWD] * 1e6 / g_settings->sizeCell);
harvesting:CN-balance.c:	c->fruit_carbon             -= (s->value[C_FRUIT_TO_CWD]  * 1e6 / g_settings->sizeCell);
harvesting:dendrometry.c:	c->volume     += s->value[VOLUME];
harvesting:dendrometry.c:	c->cum_volume += s->value[VOLUME];
harvesting:fluxes.c:	logger(g_debug_log, "c-flux = %f gC/m2/day\n", s->value[C_FLUX]);
harvesting:initialization.c:		s->value[LEAF_LITRC]  = c->init_litter_C * s->value[FROOT_LEAF_FRAC];
harvesting:initialization.c:		s->value[FROOT_LITRC] = c->init_litter_C * ( 1. - s->value[FINE_ROOT_LEAF]);
harvesting:initialization.c:	c->leaf_carbon              += (s->value[LEAF_C]             * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->froot_carbon             += (s->value[FROOT_C]            * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->stem_carbon              += (s->value[STEM_C]             * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->stem_live_wood_carbon    += (s->value[STEM_LIVEWOOD_C]    * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->stem_dead_wood_carbon    += (s->value[STEM_DEADWOOD_C]    * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->croot_carbon             += (s->value[CROOT_C]            * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->croot_live_wood_carbon   += (s->value[CROOT_LIVEWOOD_C]   * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->croot_dead_wood_carbon   += (s->value[CROOT_DEADWOOD_C]   * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->branch_carbon            += (s->value[BRANCH_C]           * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->branch_live_wood_carbon  += (s->value[BRANCH_LIVEWOOD_C]  * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->branch_dead_wood_carbon  += (s->value[BRANCH_DEADWOOD_C]  * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->reserve_carbon           += (s->value[RESERVE_C]          * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->fruit_carbon             += (s->value[FRUIT_C]            * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->agb                      += ((s->value[LEAF_C] + s->value[STEM_C] + s->value[BRANCH_C] + s->value[FRUIT_C]) * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->bgb                      += ((s->value[FROOT_C] + s->value[CROOT_C]) * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	s->value[DEADWOODN]         = c->init_dead_C / s->value[CN_DEADWOOD];
harvesting:initialization.c:		s->value[LEAF_LITRN]    = c->init_litter_N * s->value[FROOT_LEAF_FRAC];
harvesting:initialization.c:		s->value[FROOT_LITRN]   = c->init_litter_N * ( 1. - s->value[FINE_ROOT_LEAF]);
harvesting:initialization.c:	c->leaf_nitrogen              += (s->value[LEAF_N]            * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->froot_nitrogen             += (s->value[FROOT_N]           * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->stem_nitrogen              += (s->value[STEM_N]            * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->stem_live_wood_nitrogen    += (s->value[STEM_LIVEWOOD_N]   * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->stem_dead_wood_nitrogen    += (s->value[STEM_DEADWOOD_N]   * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->croot_nitrogen             += (s->value[CROOT_N]           * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->croot_live_wood_nitrogen   += (s->value[CROOT_LIVEWOOD_N]  * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->croot_dead_wood_nitrogen   += (s->value[CROOT_DEADWOOD_N]  * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->branch_nitrogen            += (s->value[BRANCH_N]          * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->branch_live_wood_nitrogen  += (s->value[BRANCH_LIVEWOOD_N] * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->branch_dead_wood_nitrogen  += (s->value[BRANCH_DEADWOOD_N] * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->reserve_nitrogen           += (s->value[RESERVE_N]         * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:	c->fruit_nitrogen             += (s->value[FRUIT_N]           * 1e6 / g_settings->sizeCell);
harvesting:initialization.c:			s->value[CWD_LITRC]  =   c->init_dead_C;
harvesting:initialization.c:	c->daily_cwd_to_litrC  += cwd_litrC    * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_cwd_to_litr2C += cwd_litr2C   * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_cwd_to_litr3C += cwd_litr3C   * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_cwd_to_litr4C += cwd_litr4C   * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_leaf_to_litrC      += leaf_litrC        * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_leaf_to_litr1C     += leaf_litr1C       * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_leaf_to_litr2C     += leaf_litr2C       * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_leaf_to_litr3C     += leaf_litr3C       * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_leaf_to_litr4C     += leaf_litr4C       * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_froot_to_litrC     += froot_litrC       * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_froot_to_litr1C    += froot_litr1C      * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_froot_to_litr2C    += froot_litr2C      * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_froot_to_litr3C    += froot_litr3C      * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_froot_to_litr4C    += froot_litr4C      * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_cwd_to_litrN       += cwd_litrN    * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_cwd_to_litr2N      += cwd_litr2N   * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_cwd_to_litr3N      += cwd_litr3N   * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_cwd_to_litr4N      += cwd_litr4N   * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_leaf_to_litrN      += leaf_litrN        * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_leaf_to_litr1N     += leaf_litr1N       * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_leaf_to_litr2N     += leaf_litr2N       * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_leaf_to_litr3N     += leaf_litr3N       * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_leaf_to_litr4N     += leaf_litr4N       * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_froot_to_litrN     += froot_litrN      * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_froot_to_litr1N    += froot_litr1N      * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_froot_to_litr2N    += froot_litr2N      * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_froot_to_litr3N    += froot_litr3N      * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	c->daily_froot_to_litr4N    += froot_litr4N     * 1e6 / g_settings->sizeCell;
harvesting:initialization.c:	// c->soil_b = 11.43 - (0.1034*g_soil_settings->values[SOIL_SAND_PERC) - (0.0687*0.157*g_soil_settings->values[SOIL_silt_perc);
harvesting:initialization.c:	c->asw = (c->soilw_sat * g_settings->init_frac_maxasw);
harvesting:lai.c:	c->max_lai_proj = s->value[MAX_LAI_PROJ];
harvesting:leaf_fall.c:		s->counter[SENESCENCE_DAY_ONE] = c->doy;
harvesting:leaf_fall.c:		currentLai  = MAX(0,s->value[MAX_LAI_LEAFFALL_PROJ] / (1 + exp(-(s->counter[DAYS_LEAFFALL] / 2. + s->counter[SENESCENCE_DAY_ONE] - c->doy)
harvesting:littering.c:	c->daily_cwd_to_litrC         += s->value[CWD_TO_LITRC]   * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr2C        += s->value[CWD_TO_LITR2C]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr3C        += s->value[CWD_TO_LITR3C]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr4C        += s->value[CWD_TO_LITR4C]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->cwd_C                      += s->value[CWD_TO_LITRC]   * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->cwd_2C                     += s->value[CWD_TO_LITR2C]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->cwd_3C                     += s->value[CWD_TO_LITR3C]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->cwd_4C                     += s->value[CWD_TO_LITR4C]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litrC             += s->value[LEAF_TO_LITRC]       * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr1C            += s->value[LEAF_TO_LITR1C]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr2C            += s->value[LEAF_TO_LITR2C]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr3C            += s->value[LEAF_TO_LITR3C]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr4C            += s->value[LEAF_TO_LITR4C]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->leaf_litrC                      += s->value[LEAF_TO_LITRC]       * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->leaf_litr1C                     += s->value[LEAF_TO_LITR1C]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->leaf_litr2C                     += s->value[LEAF_TO_LITR2C]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->leaf_litr3C                     += s->value[LEAF_TO_LITR3C]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->leaf_litr4C                     += s->value[LEAF_TO_LITR4C]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litrC            += s->value[FROOT_TO_LITRC]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr1C           += s->value[FROOT_TO_LITR1C]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr2C           += s->value[FROOT_TO_LITR2C]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr3C           += s->value[FROOT_TO_LITR3C]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr4C           += s->value[FROOT_TO_LITR4C]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->froot_litrC                     += s->value[FROOT_TO_LITRC]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->froot_litr1C                    += s->value[FROOT_TO_LITR1C]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->froot_litr2C                    += s->value[FROOT_TO_LITR2C]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->froot_litr3C                    += s->value[FROOT_TO_LITR3C]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->froot_litr4C                    += s->value[FROOT_TO_LITR4C]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litrN         += s->value[CWD_TO_LITRN]   * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr2N        += s->value[CWD_TO_LITR2N]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr3N        += s->value[CWD_TO_LITR3N]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr4N        += s->value[CWD_TO_LITR4N]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->cwd_N                      += s->value[CWD_TO_LITRN]   * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->cwd_2N                     += s->value[CWD_TO_LITR2N]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->cwd_3N                     += s->value[CWD_TO_LITR3N]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->cwd_4N                     += s->value[CWD_TO_LITR4N]  * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litrN             += s->value[LEAF_TO_LITRN]       * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr1N            += s->value[LEAF_TO_LITR1N]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr2N            += s->value[LEAF_TO_LITR2N]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr3N            += s->value[LEAF_TO_LITR3N]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr4N            += s->value[LEAF_TO_LITR4N]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->leaf_litrN                      += s->value[LEAF_TO_LITRN]       * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->leaf_litr1N                     += s->value[LEAF_TO_LITR1N]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->leaf_litr2N                     += s->value[LEAF_TO_LITR2N]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->leaf_litr3N                     += s->value[LEAF_TO_LITR3N]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->leaf_litr4N                     += s->value[LEAF_TO_LITR4N]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litrN            += s->value[FROOT_TO_LITRN]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr1N           += s->value[FROOT_TO_LITR1N]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr2N           += s->value[FROOT_TO_LITR2N]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr3N           += s->value[FROOT_TO_LITR3N]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr4N           += s->value[FROOT_TO_LITR4N]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->froot_litrN                     += s->value[FROOT_TO_LITRN]      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->froot_litr1N                    += s->value[FROOT_TO_LITR1N]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->froot_litr2N                    += s->value[FROOT_TO_LITR2N]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->froot_litr3N                    += s->value[FROOT_TO_LITR3N]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->froot_litr4N                    += s->value[FROOT_TO_LITR4N]     * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litrC         = cwd_to_litrC    * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr2C        = cwd_to_litr2C   * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr3C        = cwd_to_litr3C   * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr4C        = cwd_to_litr4C   * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litrN         = cwd_to_litrN    * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr2N        = cwd_to_litr2N   * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr3N        = cwd_to_litr3N   * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_cwd_to_litr4N        = cwd_to_litr4N   * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litrC              = leaf_to_litrC       * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr1C             = leaf_to_litr1C      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr2C             = leaf_to_litr2C      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr3C             = leaf_to_litr3C      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr4C             = leaf_to_litr4C      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litrN              = leaf_to_litrN       * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr1N             = leaf_to_litr1N      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr2N             = leaf_to_litr2N      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr3N             = leaf_to_litr3N      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_leaf_to_litr4N             = leaf_to_litr4N      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litrC              = froot_to_litrC       * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr1C             = froot_to_litr1C      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr2C             = froot_to_litr2C      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr3C             = froot_to_litr3C      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr4C             = froot_to_litr4C      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litrN              = froot_to_litrN       * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr1N             = froot_to_litr1N      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr2N             = froot_to_litr2N      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr3N             = froot_to_litr3N      * 1e6 / g_settings->sizeCell;
harvesting:littering.c:	c->daily_froot_to_litr4N             = froot_to_litr4N      * 1e6 / g_settings->sizeCell;
harvesting:management.c:	c->leaf_carbon              -= (s->value[C_LEAF_TO_LITR]   * 1e6 / g_settings->sizeCell);
harvesting:management.c:	c->froot_carbon             -= (s->value[C_FROOT_TO_LITR]  * 1e6 / g_settings->sizeCell);
harvesting:management.c:	c->stem_carbon              -= (s->value[C_STEM_TO_CWD]    * 1e6 / g_settings->sizeCell);
harvesting:management.c:	c->branch_carbon            -= (s->value[C_BRANCH_TO_CWD]  * 1e6 / g_settings->sizeCell);
harvesting:management.c:	c->croot_carbon             -= (s->value[C_CROOT_TO_CWD]   * 1e6 / g_settings->sizeCell);
harvesting:management.c:	c->reserve_carbon           -= (s->value[C_RESERVE_TO_CWD] * 1e6 / g_settings->sizeCell);
harvesting:management.c:	c->fruit_carbon             -= (s->value[C_FRUIT_TO_CWD]   * 1e6 / g_settings->sizeCell);
harvesting:management.c:							CHECK_CONDITION ( c->years[year].year, >, g_settings->year_start_management );
harvesting:management.c:						if ( ( c->years[year].year == g_settings->year_start_management) ||
harvesting:management.c:							(( c->years[year].year >= g_settings->year_start_management )
harvesting:modifiers.c:	s->value[F_NUTR] = 1. - ( 1. - c->fn0 ) * pow ( ( 1. - c->fr), c->fnn );
harvesting:modifiers.c:	s->values[F_NUTR] = c->soilN / s->value[NPP_gN_DEMAND];
harvesting:modifiers.c:	if (c->psi > s->value[SWPOPEN])
harvesting:modifiers.c:	else if (c->psi <= s->value[SWPCLOSE])
harvesting:modifiers.c:		s->value[F_PSI] = ( s->value[SWPCLOSE] - c->psi ) / ( s->value[SWPCLOSE] - s->value[SWPOPEN] );
harvesting:mortality.c:					//					while ( c->tree_layers[layer].layer_cover_proj >= g_settings->max_layer_cover )
harvesting:mortality.c:						c->tree_layers[layer].layer_density = c->tree_layers[layer].layer_n_trees / g_settings->sizeCell;
harvesting:mortality.c:						c->tree_layers[layer].layer_cover_proj  -= s->value[CANOPY_COVER_PROJ];
harvesting:mortality.c:							c->tree_layers[layer].layer_cover_proj += s->value[CANOPY_COVER_PROJ];
harvesting:mortality.c:						c->tree_layers[layer].layer_n_trees += s->counter[N_TREE];
harvesting:mortality.c:	c->tree_layers[layer].layer_density = c->tree_layers[layer].layer_n_trees / g_settings->sizeCell;
harvesting:mortality.c:		c->n_trees -= s->counter[DEAD_TREE];
harvesting:mortality.c:		c->daily_leaf_carbon        -= (s->value[C_LEAF_TO_LITR]   * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->daily_froot_carbon       -= (s->value[C_FROOT_TO_LITR]  * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->daily_stem_carbon        -= (s->value[C_STEM_TO_CWD]    * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->daily_croot_carbon       -= (s->value[C_CROOT_TO_CWD]   * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->daily_branch_carbon      -= (s->value[C_BRANCH_TO_CWD]  * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->daily_reserve_carbon     -= (s->value[C_RESERVE_TO_CWD] * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->daily_fruit_carbon       -= (s->value[C_FRUIT_TO_CWD]   * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->leaf_carbon              -= (s->value[C_LEAF_TO_LITR]   * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->froot_carbon             -= (s->value[C_FROOT_TO_LITR]  * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->stem_carbon              -= (s->value[C_STEM_TO_CWD]    * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->branch_carbon            -= (s->value[C_BRANCH_TO_CWD]  * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->croot_carbon             -= (s->value[C_CROOT_TO_CWD]   * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->reserve_carbon           -= (s->value[C_RESERVE_TO_CWD] * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->fruit_carbon             -= (s->value[C_FRUIT_TO_CWD]   * 1e6 / g_settings->sizeCell);
harvesting:mortality.c:		c->n_trees -= s->counter[DEAD_TREE];
harvesting:new_forest_tree_class.c:	c->heights[c->heights_count-1].value = g_settings->replanted[species_index].height;
harvesting:new_forest_tree_class.c:	c->heights[c->heights_count-1].value = g_settings->regeneration_height; //g_settings->replanted[species_index].height;
harvesting:new_forest_tree_class.c:	c->heights[c->heights_count-1].value = 2.5; //g_settings->regeneration_height;
harvesting:par:canopy_radiation_lw_band.c:	c->net_lw_rad_for_soil = c->soil_long_wave_emitted - (EMSOIL * s->value[LW_RAD_TRANSM]) - (EMSOIL * meteo_daily->atm_lw_downward_W);
harvesting:par:regeneration.c:    if ( meteo_daily->thermic_sum >= s->value[GDD_SEED] &&  meteo_daily->sw_downward_W >= 0. && c->asw >= 0. && c->psi < min_psi) {
harvesting:phenology.c:						logger(g_debug_log, "-days of leaf fall for %s = %d day\n", c->heights[height].dbhs[dbh].ages[age].species[species].name, s->counter[DAYS_LEAFFALL]);
harvesting:phenology.c:								s->counter[FIRST_VEG_DAYS] = c->doy;
harvesting:phenology.c:		if ( s->value[LAI_PROJ] < s->value[PEAK_LAI_PROJ] && ( ( c->lat > 0 && month < 5 ) ||
harvesting:phenology.c://				if (met[month].d[day].daylength < s->value[MINDAYLENGTH] && month+1 > 6 /*c->abscission_daylength*/)
harvesting:photosynthesis2.c:	c->daily_gpp                         += s->value[GPP];
harvesting:photosynthesis2.c:	c->monthly_gpp                       += s->value[GPP];
harvesting:photosynthesis2.c:	c->annual_gpp                        += s->value[GPP];
harvesting:photosynthesis2.c:	c->daily_ass                         += s->value[ASSIMILATION];
harvesting:photosynthesis2.c:	c->monthly_ass                       += s->value[ASSIMILATION];
harvesting:photosynthesis2.c:	c->annual_ass                        += s->value[ASSIMILATION];
harvesting:photosynthesis2.c:	c->daily_gpp_tC                      += s->value[GPP_tC];
harvesting:photosynthesis2.c:	c->monthly_gpp_tC                    += s->value[GPP_tC];
harvesting:photosynthesis2.c:	c->annual_gpp_tC                     += s->value[GPP_tC];
harvesting:photosynthesis3.c:	c->daily_gpp                         += s->value[GPP];
harvesting:photosynthesis3.c:	c->monthly_gpp                       += s->value[GPP];
harvesting:photosynthesis3.c:	c->annual_gpp                        += s->value[GPP];
harvesting:photosynthesis3.c:	c->daily_ass                         += s->value[ASSIMILATION];
harvesting:photosynthesis3.c:	c->monthly_ass                       += s->value[ASSIMILATION];
harvesting:photosynthesis3.c:	c->annual_ass                        += s->value[ASSIMILATION];
harvesting:photosynthesis3.c:	c->daily_gpp_tC                      += s->value[GPP_tC];
harvesting:photosynthesis3.c:	c->monthly_gpp_tC                    += s->value[GPP_tC];
harvesting:photosynthesis3.c:	c->annual_gpp_tC                     += s->value[GPP_tC];
harvesting:photosynthesis.c:	c->daily_gpp                += s->value[GPP];
harvesting:photosynthesis.c:	c->monthly_gpp              += s->value[GPP];
harvesting:photosynthesis.c:	c->annual_gpp               += s->value[GPP];
harvesting:photosynthesis.c:	c->daily_ass                += s->value[ASSIMILATION];
harvesting:photosynthesis.c:	c->monthly_ass              += s->value[ASSIMILATION];
harvesting:photosynthesis.c:	c->annual_ass               += s->value[ASSIMILATION];
harvesting:photosynthesis.c:	c->daily_gpp_tC             += s->value[GPP_tC];
harvesting:photosynthesis.c:	c->monthly_gpp_tC           += s->value[GPP_tC];
harvesting:photosynthesis.c:	c->annual_gpp_tC            += s->value[GPP_tC];
harvesting:regeneration.c:    if ( meteo_daily->thermic_sum >= s->value[GDD_SEED] &&  meteo_daily->sw_downward_W >= 0. && c->asw >= 0. && c->psi < min_psi) {
harvesting:soil_model.c:	CHECK_CONDITION( c->soil_layers_count, !=, g_settings->number_of_soil_layer );
harvesting:soil_model.c:								c->daily_irrigation = g_settings->irrigations[i].amount;
harvesting:structure.c:			if ( (c->heights[height+1].value - c->heights[height].value) > g_settings->tree_layer_limit )
harvesting:structure.c:		//if ( (c->heights[height].value - c->heights[height-1].value) > g_settings->tree_layer_limit )
harvesting:structure.c:		if ( height && (c->heights[height].value - c->heights[height-1].value) > g_settings->tree_layer_limit )
harvesting:structure.c:								c->tree_layers[layer].layer_n_trees += s->counter[N_TREE];
harvesting:structure.c:		c->tree_layers[layer].layer_density = c->tree_layers[layer].layer_n_trees / g_settings->sizeCell;
harvesting:structure.c:							c->tree_layers[layer].layer_cover_proj += s->value[CANOPY_COVER_PROJ];
harvesting:structure.c:							/*if ( ( ( c->years[year].year >= g_settings->year_start_management ) && ( MANAGEMENT_VAR == g_settings->management ) )
harvesting:structure.c:					c->n_trees += s->counter[N_TREE];
harvesting:structure.c:								//if ( layer == c->heights[height].height_z ) s->value[DAILY_CANOPY_COVER_EXP] *= l->layer_tree_height_modifier ;
harvesting:structure.c:								c->tree_layers[layer].daily_layer_cover_proj += s->value[DAILY_CANOPY_COVER_PROJ];
harvesting:structure.c:								//c->tree_layers[layer].daily_layer_cover_exp  += s->value[DAILY_CANOPY_COVER_EXP];
harvesting:tree_model.c:								if ( c->years[year].year > g_settings->year_start_management && g_settings->management != MANAGEMENT_VAR )
harvesting:tree_model_check_balance.c:	if ( ( fabs( s->value[TREEC_BALANCE] ) > eps ) && s->counter[DOS] > 1 && c->doy != 1 )
harvesting:turnover.c:	s->value[DAILY_SAPWOOD_TURNOVER] = effective_sapwood_turnover / ( IS_LEAP_YEAR ( c->years[year].year ) ? 366 : 365 );
harvesting:turnover.c:	s->value[DAILY_LIVEWOOD_TURNOVER] = effective_livewood_turnover / ( IS_LEAP_YEAR ( c->years[year].year ) ? 366 : 365 );
harvesting:turnover.c:	s->value[DAILY_LIVEWOOD_TURNOVER] = effective_livewood_turnover / ( IS_LEAP_YEAR ( c->years[year].year ) ? 366 : 365 );
heat_fluxes.c:	s->value[CANOPY_LATENT_HEAT] = s->value[CANOPY_EVAPO_TRANSP] * meteo_daily->lh_vap / 86400;
heat_fluxes.c:	logger(g_debug_log, "CANOPY LATENT HEAT FLUX = %g W/m2\n", s->value[CANOPY_LATENT_HEAT]);
heat_fluxes.c:	s->value[MONTHLY_CANOPY_LATENT_HEAT] += s->value[CANOPY_LATENT_HEAT];
heat_fluxes.c:	s->value[YEARLY_CANOPY_LATENT_HEAT] += s->value[CANOPY_LATENT_HEAT];
initialization.c:	CHECK_CONDITION (s->value[SLA_AVG0],               <, s->value[SLA_AVG1]);
initialization.c:	CHECK_CONDITION (s->value[FRACBB0],                <, s->value[FRACBB1]);
initialization.c:	CHECK_CONDITION (s->value[GROWTHTMIN],             >, s->value[GROWTHTOPT]);
initialization.c:	CHECK_CONDITION (s->value[GROWTHTMIN],             >, s->value[GROWTHTMAX]);
initialization.c:	CHECK_CONDITION (s->value[GROWTHTOPT],             >, s->value[GROWTHTMAX]);
initialization.c:	CHECK_CONDITION (s->value[SWPOPEN],                <, s->value[SWPCLOSE]);
initialization.c:	CHECK_CONDITION (s->value[FRUIT_PERC],             >, 1.);
initialization.c:	CHECK_CONDITION (s->value[LEAF_FALL_FRAC_GROWING], >, 1.);
initialization.c:	CHECK_CONDITION (s->value[LIVEWOOD_TURNOVER],      >, 1.);
initialization.c:	CHECK_CONDITION ( fabs (s->value[S0CTEM] + s->value[R0CTEM] + s->value[F0CTEM]), >, 1 + eps)
initialization.c:	if (s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2)
initialization.c:		CHECK_CONDITION (s->value[LEAF_FROOT_TURNOVER],    !=, 1.);
initialization.c:		CHECK_CONDITION (s->value[LEAF_FROOT_TURNOVER],     >, 1.);
initialization.c:	h->value = DBH_ref + s->value[CRA] * pow (1. - exp ( - s->value[CRB] * d->value) , s->value[CRC]);
initialization.c:	if ( h->value > s->value[CRA] )
initialization.c:		h->value = s->value[CRA];
initialization.c:	CHECK_CONDITION (h->value, >, s->value[CRA] + eps )
initialization.c:	logger(g_debug_log,"\n*******INITIALIZE FOREST CLASS CARBON POOLS (%s)*******\n", s->name);
initialization.c:	logger(g_debug_log, "...checking initial biomass data for class: height %f, dbh %f, age %d, species %s...\n", h->value, d->value, a->value, s->name);
initialization.c:	s->value[MASS_DENSITY] = s->value[RHO1] + (s->value[RHO0] - s->value[RHO1]) * exp(-LN2 * ((double)a->value / s->value[TRHO]));
initialization.c:	logger(g_debug_log, "-Mass Density = %f tDM/m3\n", s->value[MASS_DENSITY]);
initialization.c:	s->value[TREE_VOLUME] = (Pi * s->value[FORM_FACTOR] * pow((d->value / 100.) , 2.) * h->value) / 4.;
initialization.c:	s->value[VOLUME]      = s->value[TREE_VOLUME] * s->counter[N_TREE];
initialization.c:	logger(g_debug_log, "-Single tree volume = %f m3/tree\n", s->value[TREE_VOLUME]);
initialization.c:	logger(g_debug_log, "-Class volume       = %f m3/cell\n", s->value[VOLUME]);
initialization.c:	if (s->value[STEM_DM] == 0.0 || s->value[STEM_DM] == NO_DATA)
initialization.c:		if (s->value[STEMCONST_P] == NO_DATA && s->value[STEMPOWER_P] == NO_DATA)
initialization.c:				s->value[TREE_STEM_C] = (s->value[STEMCONST] * (pow (d->value, STEMPOWER_A))) / GC_GDM / 1e3;
initialization.c:				s->value[TREE_STEM_C] = (s->value[STEMCONST] * (pow (d->value, STEMPOWER_B))) / GC_GDM / 1e3;
initialization.c:				s->value[TREE_STEM_C] = (s->value[STEMCONST] * (pow (d->value, STEMPOWER_C))) / GC_GDM / 1e3;
initialization.c:			s->value[TREE_STEM_C] = (s->value[STEMCONST_P] * pow (d->value, s->value[STEMPOWER_P])) / GC_GDM / 1e3;
initialization.c:		logger(g_debug_log, "Single tree stem mass = %f tC/tree\n", s->value[TREE_STEM_C]);
initialization.c:		s->value[STEM_DM] = s->value[TREE_STEM_C] * s->counter[N_TREE] * GC_GDM;
initialization.c:		s->value[STEM_C]  = s->value[TREE_STEM_C] * s->counter[N_TREE];
initialization.c:		s->value[STEM_C]  = s->value[STEM_DM] / GC_GDM;
initialization.c:	logger(g_debug_log, "---Stem Biomass = %f tC/tree\n",  s->value[TREE_STEM_C]);
initialization.c:	logger(g_debug_log, "---Stem Biomass = %f tDM/cell\n", s->value[STEM_DM]);
initialization.c:	logger(g_debug_log, "---Stem Biomass = %f tC/cell\n",  s->value[STEM_C]);
initialization.c:	if (s->value[BRANCH_DM] == 0.0 || s->value[BRANCH_DM] == NO_DATA)
initialization.c:		if (s->value[FRACBB0] == 0)
initialization.c:			s->value[FRACBB0] = s->value[FRACBB1];
initialization.c:			logger(g_debug_log, "FRACBB0 = %f\n", s->value[FRACBB0]);
initialization.c:			s->value[FRACBB]    = s->value[FRACBB1] + (s->value[FRACBB0] - s->value[FRACBB1]) * exp(-LN2 * (h->value / s->value[TBB]));
initialization.c:			s->value[BRANCH_DM] = s->value[STEM_DM] * s->value[FRACBB];
initialization.c:			s->value[BRANCH_C]  = s->value[STEM_C] * s->value[FRACBB];
initialization.c:		s->value[BRANCH_C] = s->value[BRANCH_DM] / GC_GDM;
initialization.c:	s->value[TREE_BRANCH_C]      = s->value[BRANCH_C] / (double)s->counter[N_TREE];
initialization.c:	logger(g_debug_log, "---Branch Biomass = %f tC/tree\n",  s->value[TREE_BRANCH_C]);
initialization.c:	logger(g_debug_log, "---Branch Biomass = %f tDM/cell\n", s->value[BRANCH_DM]);
initialization.c:	logger(g_debug_log, "---Branch Biomass = %f tC/cell\n",  s->value[BRANCH_C]);
initialization.c:	if( s->value[CROOT_DM] == 0 || s->value[CROOT_DM] == NO_DATA)
initialization.c:		s->value[CROOT_DM] = s->value[STEM_DM] * s->value[COARSE_ROOT_STEM];
initialization.c:		s->value[CROOT_C]  = s->value[STEM_C] * s->value[COARSE_ROOT_STEM];
initialization.c:		s->value[CROOT_C] = s->value[CROOT_DM] / GC_GDM;
initialization.c:	s->value[TREE_CROOT_C]    = s->value[CROOT_C] / (double)s->counter[N_TREE];
initialization.c:	logger(g_debug_log, "-Coarse root biomass = %f tC/tree\n",   s->value[TREE_CROOT_C]);
initialization.c:	logger(g_debug_log, "-Coarse root biomass = %f tDM/cell \n", s->value[CROOT_DM]);
initialization.c:	logger(g_debug_log, "-Coarse root biomass = %f tC/cell \n",  s->value[CROOT_C]);
initialization.c:	s->value[TOT_WOOD_C]      = s->value[STEM_C] + s->value[CROOT_C] + s->value[BRANCH_C];
initialization.c:	s->value[TREE_TOT_WOOD_C] = s->value[TREE_STEM_C] + s->value[TREE_CROOT_C] + s->value[TREE_BRANCH_C];
initialization.c:	logger(g_debug_log, "-Total wood = %f tC/cell\n",s->value[TOT_WOOD_C]);
initialization.c:	logger(g_debug_log, "-Total wood = %f tC/tree\n",s->value[TREE_TOT_WOOD_C]);
initialization.c:	s->value[BASAL_AREA]          = ( ( pow ( ( d->value / 2. ), 2. ) ) * Pi );
initialization.c:	s->value[BASAL_AREA_m2]       = s->value[BASAL_AREA] * 0.0001;
initialization.c:	s->value[STAND_BASAL_AREA]    = s->value[BASAL_AREA] * s->counter[N_TREE];
initialization.c:	s->value[STAND_BASAL_AREA_m2] = s->value[BASAL_AREA_m2] * s->counter[N_TREE];
initialization.c:	logger(g_debug_log, "-Basal area                       = %f cm2/tree\n",  s->value[BASAL_AREA]);
initialization.c:	logger(g_debug_log, "-Basal basal_area_m2              = %f m2/tree\n",   s->value[BASAL_AREA_m2]);
initialization.c:	logger(g_debug_log, "-Stand level class basal cell     = %f cm2/class\n", s->value[STAND_BASAL_AREA]);
initialization.c:	logger(g_debug_log, "-Stand level class basal cell     = %f cm2/class\n", s->value[STAND_BASAL_AREA]);
initialization.c:	s->value[SAPWOOD_AREA]           = s->value[SAP_A] * pow ( d->value, s->value[SAP_B] );
initialization.c:	if( s->value[SAPWOOD_AREA] > s->value[BASAL_AREA] ) s->value[SAPWOOD_AREA] = s->value[BASAL_AREA];
initialization.c:	s->value[HEARTWOOD_AREA]         = s->value[BASAL_AREA] -  s->value[SAPWOOD_AREA];
initialization.c:	s->value[SAPWOOD_PERC]           = s->value[SAPWOOD_AREA] / s->value[BASAL_AREA];
initialization.c:	logger(g_debug_log, "-Sapwood_area                     = %f cm^2\n",       s->value[SAPWOOD_AREA]);
initialization.c:	logger(g_debug_log, "-Heartwood_area                   = %f cm^2\n",       s->value[HEARTWOOD_AREA]);
initialization.c:	logger(g_debug_log, "-Sapwood perc                     = %f %%\n",         s->value[SAPWOOD_PERC] * 100. );
initialization.c:	s->value[STEM_SAPWOOD_DM]         = s->value[STEM_DM] * s->value[SAPWOOD_PERC];    // FIXME sapwood_perc is simply the ration of two areas,
initialization.c:	s->value[STEM_SAPWOOD_C]          = s->value[STEM_C]  * s->value[SAPWOOD_PERC];
initialization.c:	s->value[STEM_HEARTWOOD_DM]       = s->value[STEM_DM] - s->value[STEM_SAPWOOD_DM];
initialization.c:	s->value[STEM_HEARTWOOD_C]        = s->value[STEM_C]  - s->value[STEM_SAPWOOD_C];
initialization.c:	s->value[TREE_STEM_SAPWOOD_C]     = s->value[STEM_SAPWOOD_C] / (double)s->counter[N_TREE];
initialization.c:        s->value[TREE_STEM_HEARTWOOD_C]   = (s->value[STEM_C] - s->value[STEM_SAPWOOD_C]) / (double)s->counter[N_TREE];
initialization.c:	s->value[CROOT_SAPWOOD_DM]        = s->value[CROOT_DM] * s->value[SAPWOOD_PERC];
initialization.c:	s->value[CROOT_SAPWOOD_C]         = s->value[CROOT_C]  * s->value[SAPWOOD_PERC];
initialization.c:	s->value[CROOT_HEARTWOOD_DM]      = s->value[CROOT_DM] - s->value[CROOT_SAPWOOD_DM];
initialization.c:	s->value[CROOT_HEARTWOOD_C]       = s->value[CROOT_C]  - s->value[CROOT_SAPWOOD_C];
initialization.c:	s->value[TREE_CROOT_SAPWOOD_C]    = s->value[CROOT_SAPWOOD_C] / (double)s->counter[N_TREE];
initialization.c:        s->value[TREE_CROOT_HEARTWOOD_C]  = (s->value[CROOT_C] - s->value[CROOT_SAPWOOD_C] ) / (double)s->counter[N_TREE];
initialization.c:	s->value[BRANCH_SAPWOOD_DM]       = s->value[BRANCH_DM] * s->value[SAPWOOD_PERC];
initialization.c:	s->value[BRANCH_SAPWOOD_C]        = s->value[BRANCH_C]  * s->value[SAPWOOD_PERC];
initialization.c:	s->value[BRANCH_HEARTWOOD_DM]     = s->value[BRANCH_DM] - s->value[BRANCH_SAPWOOD_DM];
initialization.c:	s->value[BRANCH_HEARTWOOD_C]      = s->value[BRANCH_C]  - s->value[BRANCH_SAPWOOD_C];
initialization.c:	s->value[TREE_BRANCH_SAPWOOD_C]   = s->value[BRANCH_SAPWOOD_C] / (double)s->counter[N_TREE];
initialization.c:        s->value[TREE_BRANCH_HEARTWOOD_C] = (s->value[BRANCH_C] - s->value[BRANCH_SAPWOOD_C]) / (double)s->counter[N_TREE];
initialization.c:	s->value[TOT_SAPWOOD_DM]          = s->value[STEM_SAPWOOD_DM]   + s->value[CROOT_SAPWOOD_DM]   + s->value[BRANCH_SAPWOOD_DM];
initialization.c:	s->value[TOT_SAPWOOD_C]           = s->value[STEM_SAPWOOD_C]    + s->value[CROOT_SAPWOOD_C]    + s->value[BRANCH_SAPWOOD_C];
initialization.c:	s->value[TOT_HEARTWOOD_DM]        = s->value[STEM_HEARTWOOD_DM] + s->value[CROOT_HEARTWOOD_DM] + s->value[BRANCH_HEARTWOOD_DM];
initialization.c:	s->value[TOT_HEARTWOOD_C]         = s->value[STEM_HEARTWOOD_C]  + s->value[CROOT_HEARTWOOD_C]  + s->value[BRANCH_HEARTWOOD_C];
initialization.c:        s->value[TREE_SAPWOOD_C]          = s->value[TOT_SAPWOOD_C] / (double)s->counter[N_TREE];
initialization.c:        s->value[TREE_HEARTWOOD_C]        = (s->value[TOT_WOOD_C] - s->value[TOT_SAPWOOD_C]) / (double)s->counter[N_TREE];
initialization.c:	logger(g_debug_log, "-Sapwood stem biomass             = %f tC/cell\n",  s->value[STEM_SAPWOOD_C]);
initialization.c:	logger(g_debug_log, "-Heartwood stem biomass           = %f tC/cell\n",  s->value[STEM_HEARTWOOD_C]);
initialization.c:	logger(g_debug_log, "-Sapwood coarse root biomass      = %f tC/cell\n",  s->value[CROOT_SAPWOOD_C]);
initialization.c:	logger(g_debug_log, "-Heartwood coarse root biomass    = %f tC/cell\n",  s->value[CROOT_HEARTWOOD_C]);
initialization.c:	logger(g_debug_log, "-Sapwood branch and bark biomass  = %f tC/cell\n",  s->value[BRANCH_SAPWOOD_C]);
initialization.c:	logger(g_debug_log, "-Heartwood branch biomass         = %f tC/cell\n",  s->value[BRANCH_HEARTWOOD_C]);
initialization.c:	logger(g_debug_log, "-Total Sapwood biomass            = %f tC/cell\n",  s->value[TOT_SAPWOOD_C]);
initialization.c:	logger(g_debug_log, "-Total Sapwood biomass per tree   = %f tC/tree\n",  s->value[TOT_SAPWOOD_C]    / (double)s->counter[N_TREE]);
initialization.c:	logger(g_debug_log, "-Total Sapwood biomass per tree   = %f KgC/tree\n", (s->value[TOT_SAPWOOD_C]   / (double)s->counter[N_TREE]) * 1e3);
initialization.c:	logger(g_debug_log, "-Total Heartwood biomass          = %f tC/cell\n",  s->value[TOT_HEARTWOOD_C]);
initialization.c:	logger(g_debug_log, "-Total Heartwood biomass per tree = %f tC/tree\n",  s->value[TOT_HEARTWOOD_C]  / (double)s->counter[N_TREE]);
initialization.c:	logger(g_debug_log, "-Total Heartwood biomass per tree = %f KgC/tree\n", (s->value[TOT_HEARTWOOD_C] / (double)s->counter[N_TREE]) * 1e3);
initialization.c:	if ( s->value[RESERVE_DM] == 0 || s->value[RESERVE_DM] == NO_DATA )
initialization.c:		s->value[RESERVE_DM] = s->value[TOT_SAPWOOD_DM] * s->value[SAP_WRES];
initialization.c:		s->value[RESERVE_C]  = s->value[TOT_SAPWOOD_DM] * s->value[SAP_WRES];
initialization.c:	s->value[TREE_RESERVE_C]    = s->value[RESERVE_C] / (double)s->counter[N_TREE];
initialization.c:	s->value[MIN_RESERVE_C]      = s->value[RESERVE_C];
initialization.c:	s->value[TREE_MIN_RESERVE_C] = s->value[MIN_RESERVE_C] / (double)s->counter[N_TREE];
initialization.c:	if ( ! s->value[LEAF_DM] || s->value[LEAF_DM] == NO_DATA )
initialization.c:		if ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 )
initialization.c:			s->value[LEAF_DM]        = 0.;
initialization.c:			s->value[LEAF_C]         = 0.;
initialization.c:			s->value[LEAF_SUN_C]     = 0.;
initialization.c:			s->value[LEAF_SHADE_C]   = 0.;
initialization.c:			s->value[LAI_PROJ]       = 0.;
initialization.c:			s->value[LAI_SUN_PROJ]   = 0.;
initialization.c:			s->value[LAI_SHADE_PROJ] = 0.;
initialization.c:			s->value[PEAK_LAI_PROJ]  = ( ( s->value[SAPWOOD_AREA] / 1e4 ) * s->value[SAP_LEAF]) / s->value[CROWN_AREA_PROJ];
initialization.c:			s->value[LEAF_C]         = ( ( s->value[PEAK_LAI_PROJ] / s->value[SLA_AVG] ) / 1e3 ) * ( s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell );
initialization.c:			s->value[LAI_PROJ]       = s->value[PEAK_LAI_PROJ];
initialization.c:			s->value[LAI_SUN_PROJ]   = 1. - exp( - s->value[LAI_PROJ] );
initialization.c:			s->value[LAI_SHADE_PROJ] = s->value[LAI_PROJ] - s->value[LAI_SUN_PROJ];
initialization.c:		if ( ! s->value[LAI_PROJ] && ( s->value[PHENOLOGY] == 1.1 || s->value[PHENOLOGY] == 1.2 ) )
initialization.c:			s->value[LAI_PROJ]       = ( ( s->value[LEAF_C]  * s->value[SLA_AVG] ) * 1e3 ) / ( s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell );
initialization.c:			s->value[LAI_SUN_PROJ]   = 1. - exp( - s->value[LAI_PROJ] );
initialization.c:			s->value[LAI_SHADE_PROJ] = s->value[LAI_PROJ] - s->value[LAI_SUN_PROJ];
initialization.c:			s->value[LAI_PROJ]       = 0.;
initialization.c:			s->value[LAI_SUN_PROJ]   = 0.;
initialization.c:			s->value[LAI_SHADE_PROJ] = 0.;
initialization.c:	if ( s->value[LEAF_C] > 0. )
initialization.c:		s->value[SLA_PROJ]           =  ( s->value[LAI_PROJ] * ( s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell ) ) / ( s->value[LEAF_C] * 1e3 ) ;
initialization.c:		s->value[SLA_SUN_PROJ]       = ( ( s->value[LAI_SUN_PROJ] + ( s->value[LAI_SHADE_PROJ] / s->value[SLA_RATIO] ) ) * ( s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell ) ) / ( s->value[LEAF_C] * 1e3 );
initialization.c:		s->value[SLA_SHADE_PROJ]     = s->value[SLA_SUN_PROJ] * s->value[SLA_RATIO];
initialization.c:		s->value[LEAF_SUN_C]   = ( ( s->value[LAI_SUN_PROJ]   * ( s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell ) ) / s->value[SLA_SUN_PROJ] )   / 1e3;
initialization.c:		s->value[LEAF_SHADE_C] = s->value[LEAF_C] - s->value[LEAF_SUN_C];
initialization.c:		CHECK_CONDITION  (fabs( ( s->value[LEAF_SUN_C] + s->value[LEAF_SHADE_C] ) - s->value[LEAF_C]) , > , eps);
initialization.c:	s->value[LEAF_DM]        = s->value[LEAF_DM] * GC_GDM;
initialization.c:	s->value[TREE_LEAF_C] = s->value[LEAF_C] / s->counter[N_TREE];
initialization.c:	s->value[ALL_LAI_PROJ] = s->value[LAI_PROJ] * s->value[CANOPY_COVER_PROJ];
initialization.c:	if (( s->value[FROOT_DM] == 0.0 || s->value[FROOT_DM] == NO_DATA)
initialization.c:			&& (s->value[PHENOLOGY] == 1.1 || s->value[PHENOLOGY] == 1.2))
initialization.c:		s->value[FROOT_DM] = s->value[LEAF_DM] * s->value[FINE_ROOT_LEAF];
initialization.c:		s->value[FROOT_C]  = s->value[LEAF_C] * s->value[FINE_ROOT_LEAF];
initialization.c:		s->value[FROOT_DM]     = 0.;
initialization.c:		s->value[FROOT_C]      = 0.;
initialization.c:	s->value[TREE_FROOT_C]    = s->value[FROOT_C] / (double)s->counter[N_TREE];
initialization.c:		s->value[LEAF_LITRC]  = ( ( s->value[PEAK_LAI_PROJ] / s->value[SLA_AVG] ) / 1e3 * ( s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell ) ) / GC_GDM;
initialization.c:		s->value[FROOT_LITRC] = s->value[LEAF_LITRC] * ( 1. - s->value[FROOT_LEAF_FRAC] );
initialization.c:		if ( s->value[PHENOLOGY] == 1.1 || s->value[PHENOLOGY] == 1.2 )
initialization.c:			s->value[LEAF_LITRC]  *= s->value[LEAF_FROOT_TURNOVER];
initialization.c:			s->value[FROOT_LITRC] *= s->value[LEAF_FROOT_TURNOVER];
initialization.c:		s->value[LEAF_LITRC]  = c->init_litter_C * s->value[FROOT_LEAF_FRAC];
initialization.c:		s->value[FROOT_LITRC] = c->init_litter_C * ( 1. - s->value[FINE_ROOT_LEAF]);
initialization.c:	s->value[STEM_LIVEWOOD_DM]     = s->value[STEM_DM] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC];
initialization.c:	s->value[STEM_LIVEWOOD_C]      = s->value[STEM_C]  * s->value[EFF_LIVE_TOTAL_WOOD_FRAC];
initialization.c:	s->value[STEM_DEADWOOD_DM]     = s->value[STEM_DM] - s->value[STEM_LIVEWOOD_DM];
initialization.c:	s->value[STEM_DEADWOOD_C]      = s->value[STEM_C]  - s->value[STEM_LIVEWOOD_C];
initialization.c:	s->value[TREE_STEM_LIVE_KgDM]  = s->value[STEM_LIVEWOOD_DM] * 1e3 / (double)s->counter[N_TREE];
initialization.c:	s->value[TREE_STEM_LIVE_C]     = s->value[STEM_LIVEWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	s->value[TREE_STEM_DEAD_KgDM]  = s->value[STEM_DEADWOOD_DM] * 1e3 / s->counter[N_TREE];
initialization.c:	s->value[TREE_STEM_DEAD_C]     = s->value[STEM_DEADWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	CHECK_CONDITION(fabs((s->value[STEM_C])-(s->value[STEM_LIVEWOOD_C] + s->value[STEM_DEADWOOD_C])), >,eps);
initialization.c:	s->value[STEM_LIVEWOOD_DM]     = s->value[STEM_SAPWOOD_DM] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC];
initialization.c:	s->value[STEM_LIVEWOOD_C]      = s->value[STEM_SAPWOOD_C]  * s->value[EFF_LIVE_TOTAL_WOOD_FRAC];
initialization.c:	s->value[STEM_DEADWOOD_DM]     = s->value[STEM_DM]         - s->value[STEM_LIVEWOOD_DM];
initialization.c:	s->value[STEM_DEADWOOD_C]      = s->value[STEM_C]          - s->value[STEM_LIVEWOOD_C];
initialization.c:	s->value[TREE_STEM_LIVEWOOD_C] = s->value[STEM_LIVEWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	s->value[TREE_STEM_DEADWOOD_C] = s->value[STEM_DEADWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	CHECK_CONDITION(fabs((s->value[STEM_DM])-(s->value[STEM_LIVEWOOD_DM] + s->value[STEM_DEADWOOD_DM])), >,eps);
initialization.c:	CHECK_CONDITION(fabs((s->value[STEM_C]) -(s->value[STEM_LIVEWOOD_C]  + s->value[STEM_DEADWOOD_C])),  >,eps);
initialization.c:	s->value[CROOT_LIVEWOOD_DM]     = s->value[CROOT_DM] * (s->value[EFF_LIVE_TOTAL_WOOD_FRAC]);
initialization.c:	s->value[CROOT_LIVEWOOD_C]      = s->value[CROOT_C] * (s->value[EFF_LIVE_TOTAL_WOOD_FRAC]);
initialization.c:	s->value[CROOT_DEADWOOD_DM]     = s->value[CROOT_DM] -s->value[CROOT_LIVEWOOD_DM];
initialization.c:	s->value[CROOT_DEADWOOD_C]      = s->value[CROOT_C] -s->value[CROOT_LIVEWOOD_C];
initialization.c:	s->value[TREE_CROOT_LIVE_KgDM]  = s->value[CROOT_LIVEWOOD_DM] * 1e3 / (double)s->counter[N_TREE];
initialization.c:	s->value[TREE_CROOT_LIVE_C]     = s->value[CROOT_LIVEWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	s->value[TREE_CROOT_DEAD_KgDM]  = s->value[CROOT_DEADWOOD_DM] * 1e3 / (double)s->counter[N_TREE];
initialization.c:	s->value[TREE_CROOT_DEAD_C]     = s->value[CROOT_DEADWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	CHECK_CONDITION(fabs((s->value[CROOT_C])-(s->value[CROOT_LIVEWOOD_C] + s->value[CROOT_DEADWOOD_C])), >,eps);
initialization.c:	s->value[CROOT_LIVEWOOD_DM]     = s->value[CROOT_SAPWOOD_DM] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC];
initialization.c:	s->value[CROOT_LIVEWOOD_C]      = s->value[CROOT_SAPWOOD_C]  * s->value[EFF_LIVE_TOTAL_WOOD_FRAC];
initialization.c:	s->value[CROOT_DEADWOOD_DM]     = s->value[CROOT_DM]         - s->value[CROOT_LIVEWOOD_DM];
initialization.c:	s->value[CROOT_DEADWOOD_C]      = s->value[CROOT_C]          - s->value[CROOT_LIVEWOOD_C];
initialization.c:	s->value[TREE_CROOT_LIVEWOOD_C] = s->value[CROOT_LIVEWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	s->value[TREE_CROOT_DEADWOOD_C] = s->value[CROOT_DEADWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	CHECK_CONDITION(fabs((s->value[CROOT_DM])-(s->value[CROOT_LIVEWOOD_DM] + s->value[CROOT_DEADWOOD_DM])), >,eps);
initialization.c:	CHECK_CONDITION(fabs((s->value[CROOT_C]) -(s->value[CROOT_LIVEWOOD_C]  + s->value[CROOT_DEADWOOD_C])),  >,eps);
initialization.c:	logger(g_debug_log, "-Coarse root Biomass      = %f tC/cell\n", s->value[CROOT_C]);
initialization.c:	logger(g_debug_log, "-Live Coarse Root Biomass = %f tC/cell\n", s->value[CROOT_LIVEWOOD_C]);
initialization.c:	logger(g_debug_log, "-Dead Coarse Root Biomass = %f tC/cell\n", s->value[CROOT_DEADWOOD_C]);
initialization.c:	logger(g_debug_log, "-Live Coarse Root Biomass = %f tC/tree\n", s->value[TREE_CROOT_LIVEWOOD_C]);
initialization.c:	logger(g_debug_log, "-Dead Coarse Root Biomass = %f tC/tree\n", s->value[TREE_CROOT_DEADWOOD_C]);
initialization.c:	s->value[BRANCH_LIVEWOOD_DM]      = s->value[BRANCH_DM] * (s->value[EFF_LIVE_TOTAL_WOOD_FRAC]);
initialization.c:	s->value[BRANCH_LIVEWOOD_C]       = s->value[BRANCH_C]  * (s->value[EFF_LIVE_TOTAL_WOOD_FRAC]);
initialization.c:	s->value[BRANCH_DEADWOOD_DM]      = s->value[BRANCH_DM] - s->value[BRANCH_LIVEWOOD_DM];
initialization.c:	s->value[BRANCH_DEADWOOD_C]       = s->value[BRANCH_C]  - s->value[BRANCH_LIVEWOOD_C];
initialization.c:	s->value[TREE_BRANCH_LIVE_KgDM]   = s->value[BRANCH_LIVEWOOD_DM] * 1e3 / (double)s->counter[N_TREE];
initialization.c:	s->value[TREE_BRANCH_LIVE_C]      = s->value[BRANCH_LIVEWOOD_C] / s->counter[N_TREE];
initialization.c:	s->value[TREE_BRANCH_DEAD_KgDM]   = s->value[BRANCH_DEADWOOD_DM] * 1e3 / (double)s->counter[N_TREE];
initialization.c:	s->value[TREE_BRANCH_DEAD_C]      = s->value[BRANCH_DEADWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	CHECK_CONDITION(fabs((s->value[BRANCH_C])-(s->value[BRANCH_LIVEWOOD_C] + s->value[BRANCH_DEADWOOD_C])), >,eps);
initialization.c:	s->value[BRANCH_LIVEWOOD_DM]      = s->value[BRANCH_SAPWOOD_DM] * s->value[EFF_LIVE_TOTAL_WOOD_FRAC];
initialization.c:	s->value[BRANCH_LIVEWOOD_C]       = s->value[BRANCH_SAPWOOD_C]  * s->value[EFF_LIVE_TOTAL_WOOD_FRAC];
initialization.c:	s->value[BRANCH_DEADWOOD_DM]      = s->value[BRANCH_DM]         - s->value[BRANCH_LIVEWOOD_DM];
initialization.c:	s->value[BRANCH_DEADWOOD_C]       = s->value[BRANCH_C]          - s->value[BRANCH_LIVEWOOD_C];
initialization.c:	s->value[TREE_BRANCH_LIVEWOOD_C]  = s->value[BRANCH_LIVEWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	s->value[TREE_BRANCH_DEADWOOD_C]  = s->value[BRANCH_DEADWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	CHECK_CONDITION(fabs((s->value[BRANCH_DM])-(s->value[BRANCH_LIVEWOOD_DM] + s->value[BRANCH_DEADWOOD_DM])), >,eps);
initialization.c:	CHECK_CONDITION(fabs((s->value[BRANCH_C]) -(s->value[BRANCH_LIVEWOOD_C]  + s->value[BRANCH_DEADWOOD_C])),  >,eps);
initialization.c:	logger(g_debug_log, "-Branch Biuomass          = %f tC/cell\n", s->value[BRANCH_C]);
initialization.c:	logger(g_debug_log, "-Live Stem Branch Biomass = %f tC/cell\n", s->value[BRANCH_LIVEWOOD_C]);
initialization.c:	logger(g_debug_log, "-Dead Stem Branch Biomass = %f tC/cell\n", s->value[BRANCH_DEADWOOD_C]);
initialization.c:	logger(g_debug_log, "-Live Stem Branch Biomass = %f tC/tree\n", s->value[TREE_BRANCH_LIVEWOOD_C]);
initialization.c:	logger(g_debug_log, "-Dead Stem Branch Biomass = %f tC/tree\n", s->value[TREE_BRANCH_DEADWOOD_C]);
initialization.c:	s->value[TOT_LIVEWOOD_DM]       = s->value[STEM_LIVEWOOD_DM]  + s->value[CROOT_LIVEWOOD_DM] + s->value[BRANCH_LIVEWOOD_DM];
initialization.c:	s->value[TOT_LIVEWOOD_C]        = s->value[STEM_LIVEWOOD_C]   + s->value[CROOT_LIVEWOOD_C]  + s->value[BRANCH_LIVEWOOD_C];
initialization.c:	s->value[TREE_TOT_LIVEWOOD_C]   = s->value[TOT_LIVEWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	logger(g_debug_log, "-Live biomass = %f tC/cell\n", s->value[TOT_LIVEWOOD_C]);
initialization.c:	logger(g_debug_log, "-Live biomass = %f tC/tree\n", s->value[TREE_TOT_LIVEWOOD_C]);
initialization.c:	s->value[TOT_DEADWOOD_DM]        = s->value[STEM_DEADWOOD_DM] + s->value[CROOT_DEADWOOD_DM] + s->value[BRANCH_DEADWOOD_DM];
initialization.c:	s->value[TOT_DEADWOOD_C]         = s->value[STEM_DEADWOOD_C]  + s->value[CROOT_DEADWOOD_C]  + s->value[BRANCH_DEADWOOD_C];
initialization.c:	s->value[TREE_TOT_DEADWOOD_C]    = s->value[TOT_DEADWOOD_C] / (double)s->counter[N_TREE];
initialization.c:	logger(g_debug_log, "-Dead biomass = %f tC/cell\n", s->value[TOT_DEADWOOD_C]);
initialization.c:	logger(g_debug_log, "-Dead biomass = %f tC/tree\n", s->value[TREE_TOT_DEADWOOD_C]);
initialization.c:	logger(g_debug_log, "-Live wood vs total biomass = %f %%\n", (s->value[TOT_LIVEWOOD_C] / s->value[TOT_WOOD_C]) * 100.);
initialization.c:	logger(g_debug_log, "-Dead wood vs total biomass = %f %%\n", (s->value[TOT_DEADWOOD_C] / s->value[TOT_WOOD_C]) * 100.);
initialization.c:	logger(g_debug_log, "-Reserve                    = %f tC/cell\n", s->value[TOT_LIVEWOOD_C] * s->value[SAP_WRES] );
initialization.c:	s->value[FRUIT_C]      = 0.;
initialization.c:	s->value[TREE_FRUIT_C] = 0.;
initialization.c:	s->value[AGB]      = s->value[STEM_C] + s->value[BRANCH_C] + s->value[LEAF_C] + s->value[FRUIT_C];
initialization.c:	s->value[BGB]      = s->value[FROOT_C] + s->value[CROOT_C];
initialization.c:	s->value[TREE_AGB] = s->value[AGB] / (double)s->counter[N_TREE];
initialization.c:	s->value[TREE_BGB] = s->value[BGB] / (double)s->counter[N_TREE];
initialization.c:	logger(g_debug_log, "-Yearly Class AGB = %f tC/cell\n", s->value[AGB]);
initialization.c:	logger(g_debug_log, "-Yearly Class BGB = %f tC/cell\n", s->value[BGB]);
initialization.c:	logger(g_debug_log, "-Yearly Class AGB = %f tC/tree\n", s->value[TREE_AGB]);
initialization.c:	logger(g_debug_log, "-Yearly Class BGB = %f tC/tree\n", s->value[TREE_BGB]);
initialization.c:	CHECK_CONDITION ( fabs (s->value[LEAF_LITR_LAB_FRAC]  + s->value[LEAF_LITR_CEL_FRAC]  + s->value[LEAF_LITR_LIGN_FRAC]),  >, 1 + eps);
initialization.c:	CHECK_CONDITION ( fabs (s->value[FROOT_LITR_LAB_FRAC] + s->value[FROOT_LITR_CEL_FRAC] + s->value[FROOT_LITR_LIGN_FRAC]), >, 1 + eps);
initialization.c:	CHECK_CONDITION ( fabs (s->value[DEADWOOD_CEL_FRAC]   + s->value[DEADWOOD_LIGN_FRAC]), >, 1 + eps);
initialization.c:	r1 = s->value[DEADWOOD_LIGN_FRAC] / s->value[DEADWOOD_CEL_FRAC];
initialization.c:		s->value[DEADWOOD_SCEL_FRAC]  = 0.;
initialization.c:		s->value[DEADWOOD_USCEL_FRAC] = s->value[DEADWOOD_CEL_FRAC];
initialization.c:		s->value[DEADWOOD_SCEL_FRAC]  = temp_var * s->value[DEADWOOD_CEL_FRAC];
initialization.c:		s->value[DEADWOOD_USCEL_FRAC] = (1. - temp_var) * s->value[DEADWOOD_CEL_FRAC];
initialization.c:		s->value[DEADWOOD_SCEL_FRAC]  = 0.8 * s->value[DEADWOOD_CEL_FRAC];
initialization.c:		s->value[DEADWOOD_USCEL_FRAC] = 0.2 * s->value[DEADWOOD_CEL_FRAC];
initialization.c:	r1 = s->value[LEAF_LITR_LIGN_FRAC] / s->value[LEAF_LITR_LAB_FRAC];
initialization.c:		s->value[LEAF_LITR_SCEL_FRAC]   = 0.;
initialization.c:		s->value[LEAF_LITR_USCEL_FRAC]  = s->value[LEAF_LITR_CEL_FRAC];
initialization.c:		s->value[LEAF_LITR_SCEL_FRAC]   = temp_var * s->value[LEAF_LITR_CEL_FRAC];
initialization.c:		s->value[LEAF_LITR_USCEL_FRAC]  = ( 1. - temp_var ) * s->value[LEAF_LITR_CEL_FRAC];
initialization.c:		s->value[LEAF_LITR_SCEL_FRAC]   = 0.8 * s->value[LEAF_LITR_CEL_FRAC];
initialization.c:		s->value[LEAF_LITR_USCEL_FRAC]  = 0.2 * s->value[LEAF_LITR_CEL_FRAC];
initialization.c:	CHECK_CONDITION ( fabs ( s->value[LEAF_LITR_LAB_FRAC] + s->value[LEAF_LITR_SCEL_FRAC] + s->value[LEAF_LITR_USCEL_FRAC] + s->value[LEAF_LITR_LIGN_FRAC] ), >, 1 + eps);
initialization.c:	r1 = s->value[FROOT_LITR_LIGN_FRAC] / s->value[FROOT_LITR_LAB_FRAC];
initialization.c:		s->value[FROOT_LITR_SCEL_FRAC]   = 0.;
initialization.c:		s->value[FROOT_LITR_USCEL_FRAC]  = s->value[FROOT_LITR_CEL_FRAC];
initialization.c:		s->value[FROOT_LITR_SCEL_FRAC]   = temp_var * s->value[FROOT_LITR_CEL_FRAC];
initialization.c:		s->value[FROOT_LITR_USCEL_FRAC]  = ( 1. - temp_var ) * s->value[FROOT_LITR_CEL_FRAC];
initialization.c:		s->value[FROOT_LITR_SCEL_FRAC]   = 0.8 * s->value[FROOT_LITR_CEL_FRAC];
initialization.c:		s->value[FROOT_LITR_USCEL_FRAC]  = 0.2 * s->value[FROOT_LITR_CEL_FRAC];
initialization.c:	CHECK_CONDITION ( fabs ( s->value[FROOT_LITR_LAB_FRAC] + s->value[FROOT_LITR_SCEL_FRAC] + s->value[FROOT_LITR_USCEL_FRAC] + s->value[FROOT_LITR_LIGN_FRAC] ), >, 1 + eps);
initialization.c:	if ( s->value[PHENOLOGY] == 1.1 || s->value[PHENOLOGY] == 1.2 )
initialization.c:		CHECK_CONDITION(s->value[LEAF_C],              <=, ZERO);
initialization.c:		CHECK_CONDITION(s->value[FROOT_C],             <=, ZERO);
initialization.c:		CHECK_CONDITION(s->value[LAI_PROJ],            <=, ZERO);
initialization.c:		CHECK_CONDITION(s->value[LAI_SUN_PROJ],        <=, ZERO);
initialization.c:		CHECK_CONDITION(s->value[LAI_SHADE_PROJ],      <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[STEM_C],                  <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[BRANCH_C],                <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[CROOT_C],                 <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[TOT_WOOD_C],              <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[RESERVE_C],               <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[MIN_RESERVE_C],           <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[STEM_SAPWOOD_C],          <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[CROOT_SAPWOOD_C],         <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[BRANCH_SAPWOOD_C],        <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[STEM_HEARTWOOD_C],        <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[CROOT_HEARTWOOD_C],       <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[BRANCH_HEARTWOOD_C],      <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[TOT_SAPWOOD_C],           <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[STEM_LIVEWOOD_C],         <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[STEM_DEADWOOD_C],         <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[CROOT_LIVEWOOD_C],        <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[CROOT_DEADWOOD_C],        <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[BRANCH_LIVEWOOD_C],       <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[BRANCH_DEADWOOD_C],       <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[TOT_LIVEWOOD_C],          <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[TOT_DEADWOOD_C],          <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[BASAL_AREA],              <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[AGB],                     <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[BGB],                     <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[VOLUME],                  <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[TREE_VOLUME],             <=, ZERO);
initialization.c:	c->leaf_carbon              += (s->value[LEAF_C]             * 1e6 / g_settings->sizeCell);
initialization.c:	c->froot_carbon             += (s->value[FROOT_C]            * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_carbon              += (s->value[STEM_C]             * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_live_wood_carbon    += (s->value[STEM_LIVEWOOD_C]    * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_dead_wood_carbon    += (s->value[STEM_DEADWOOD_C]    * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_carbon             += (s->value[CROOT_C]            * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_live_wood_carbon   += (s->value[CROOT_LIVEWOOD_C]   * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_dead_wood_carbon   += (s->value[CROOT_DEADWOOD_C]   * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_carbon            += (s->value[BRANCH_C]           * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_live_wood_carbon  += (s->value[BRANCH_LIVEWOOD_C]  * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_dead_wood_carbon  += (s->value[BRANCH_DEADWOOD_C]  * 1e6 / g_settings->sizeCell);
initialization.c:	c->reserve_carbon           += (s->value[RESERVE_C]          * 1e6 / g_settings->sizeCell);
initialization.c:	c->fruit_carbon             += (s->value[FRUIT_C]            * 1e6 / g_settings->sizeCell);
initialization.c:	c->agb                      += ((s->value[LEAF_C] + s->value[STEM_C] + s->value[BRANCH_C] + s->value[FRUIT_C]) * 1e6 / g_settings->sizeCell);
initialization.c:	c->bgb                      += ((s->value[FROOT_C] + s->value[CROOT_C]) * 1e6 / g_settings->sizeCell);
initialization.c:	logger(g_debug_log,"\n*******INITIALIZE FOREST CLASS NITROGEN POOLS (%s)*******\n", s->name);
initialization.c:	if ( ! s->value[LEAF_C] )
initialization.c:		s->value[LEAF_N]       = 0.;
initialization.c:		s->value[LEAF_SUN_N]   = 0.;
initialization.c:		s->value[LEAF_SHADE_N] = 0.;
initialization.c:		s->value[LEAF_N]       = s->value[LEAF_C]       / s->value[CN_LEAVES];
initialization.c:		s->value[LEAF_SUN_N]   = s->value[LEAF_SUN_C]   / s->value[CN_LEAVES];
initialization.c:		s->value[LEAF_SHADE_N] = s->value[LEAF_SHADE_C] / s->value[CN_LEAVES];
initialization.c:	if ( ! s->value[FROOT_C] )
initialization.c:		s->value[FROOT_N] = 0.;
initialization.c:		s->value[FROOT_N]       = s->value[FROOT_C] / s->value[CN_FINE_ROOTS];
initialization.c:	s->value[DEADWOODN]         = c->init_dead_C / s->value[CN_DEADWOOD];
initialization.c:		s->value[LEAF_LITRN]    = (s->value[LEAF_LITRC]  / s->value[CN_LEAVES])    * (1. - N_FRAC_TO_RETRANSL);
initialization.c:		s->value[FROOT_LITRN]   = s->value[FROOT_LITRC]  / s->value[CN_FINE_ROOTS] * (1. - N_FRAC_TO_RETRANSL);
initialization.c:		s->value[LEAF_LITRN]    = c->init_litter_N * s->value[FROOT_LEAF_FRAC];
initialization.c:		s->value[FROOT_LITRN]   = c->init_litter_N * ( 1. - s->value[FINE_ROOT_LEAF]);
initialization.c:	s->value[RESERVE_N]         = 0.;
initialization.c:	s->value[STEM_LIVEWOOD_N]   = s->value[STEM_LIVEWOOD_C] / s->value[CN_LIVEWOOD];
initialization.c:	s->value[STEM_DEADWOOD_N]   = s->value[STEM_DEADWOOD_C] / s->value[CN_DEADWOOD];
initialization.c:	s->value[STEM_N]            = s->value[STEM_LIVEWOOD_N] + s->value[STEM_DEADWOOD_N];
initialization.c:	s->value[CROOT_LIVEWOOD_N]  = s->value[CROOT_LIVEWOOD_C] / s->value[CN_LIVEWOOD];
initialization.c:	s->value[CROOT_DEADWOOD_N]  = s->value[CROOT_DEADWOOD_C] / s->value[CN_DEADWOOD];
initialization.c:	s->value[CROOT_N]           = s->value[CROOT_LIVEWOOD_N] + s->value[CROOT_DEADWOOD_N];
initialization.c:	s->value[BRANCH_LIVEWOOD_N] = s->value[BRANCH_LIVEWOOD_C] / s->value[CN_LIVEWOOD];
initialization.c:	s->value[BRANCH_DEADWOOD_N] = s->value[BRANCH_DEADWOOD_C] / s->value[CN_DEADWOOD];
initialization.c:	s->value[BRANCH_N]          = s->value[BRANCH_LIVEWOOD_N] + s->value[BRANCH_DEADWOOD_N];
initialization.c:	CHECK_CONDITION(s->value[STEM_N],          <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[CROOT_N],         <=, ZERO);
initialization.c:	CHECK_CONDITION(s->value[BRANCH_N],        <=, ZERO);
initialization.c:	CHECK_CONDITION(fabs( ( s->value[LEAF_SUN_N] + s->value[LEAF_SHADE_N] ) - s->value[LEAF_N]) , > , eps);
initialization.c:	if ( s->value[PHENOLOGY] == 1.1 || s->value[PHENOLOGY] == 1.2 )
initialization.c:		CHECK_CONDITION(s->value[LEAF_N],      <=, ZERO);
initialization.c:		CHECK_CONDITION(s->value[FROOT_N],     <=, ZERO);
initialization.c:	c->leaf_nitrogen              += (s->value[LEAF_N]            * 1e6 / g_settings->sizeCell);
initialization.c:	c->froot_nitrogen             += (s->value[FROOT_N]           * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_nitrogen              += (s->value[STEM_N]            * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_live_wood_nitrogen    += (s->value[STEM_LIVEWOOD_N]   * 1e6 / g_settings->sizeCell);
initialization.c:	c->stem_dead_wood_nitrogen    += (s->value[STEM_DEADWOOD_N]   * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_nitrogen             += (s->value[CROOT_N]           * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_live_wood_nitrogen   += (s->value[CROOT_LIVEWOOD_N]  * 1e6 / g_settings->sizeCell);
initialization.c:	c->croot_dead_wood_nitrogen   += (s->value[CROOT_DEADWOOD_N]  * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_nitrogen            += (s->value[BRANCH_N]          * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_live_wood_nitrogen  += (s->value[BRANCH_LIVEWOOD_N] * 1e6 / g_settings->sizeCell);
initialization.c:	c->branch_dead_wood_nitrogen  += (s->value[BRANCH_DEADWOOD_N] * 1e6 / g_settings->sizeCell);
initialization.c:	c->reserve_nitrogen           += (s->value[RESERVE_N]         * 1e6 / g_settings->sizeCell);
initialization.c:	c->fruit_nitrogen             += (s->value[FRUIT_N]           * 1e6 / g_settings->sizeCell);
initialization.c:	if ( ! g_settings->spinup )
initialization.c:			s->value[CWD_LITRC]  = 0.001;
initialization.c:			s->value[CWD_LITRC]  =   c->init_dead_C;
initialization.c:		s->value[CWD_LITR2C]     = s->value[CWD_LITRC]    * s->value[DEADWOOD_USCEL_FRAC];
initialization.c:		s->value[CWD_LITR3C]     = s->value[CWD_LITRC]    * s->value[DEADWOOD_SCEL_FRAC] ;
initialization.c:		s->value[CWD_LITR4C]     = s->value[CWD_LITRC]    * s->value[DEADWOOD_LIGN_FRAC] ;
initialization.c:		CHECK_CONDITION ( fabs ( s->value[CWD_LITR2C] + s->value[CWD_LITR3C] + s->value[CWD_LITR4C] ), > , s->value[CWD_LITRC] + eps);
initialization.c:		cwd_litrC                = s->value[CWD_LITRC];
initialization.c:		cwd_litr2C               = s->value[CWD_LITR2C];
initialization.c:		cwd_litr3C               = s->value[CWD_LITR3C];
initialization.c:		cwd_litr4C               = s->value[CWD_LITR4C];
initialization.c:		s->value[LEAF_LITR1C]         = s->value[LEAF_LITRC]        * s->value[LEAF_LITR_LAB_FRAC]  ;
initialization.c:		s->value[LEAF_LITR2C]         = s->value[LEAF_LITRC]        * s->value[LEAF_LITR_USCEL_FRAC];
initialization.c:		s->value[LEAF_LITR3C]         = s->value[LEAF_LITRC]        * s->value[LEAF_LITR_SCEL_FRAC] ;
initialization.c:		s->value[LEAF_LITR4C]         = s->value[LEAF_LITRC]        * s->value[LEAF_LITR_LIGN_FRAC] ;
initialization.c:		CHECK_CONDITION ( fabs ( s->value[LEAF_LITR1C] + s->value[LEAF_LITR2C] + s->value[LEAF_LITR3C] + s->value[LEAF_LITR4C] ), > , s->value[LEAF_LITRC] + eps);
initialization.c:		leaf_litrC                    = s->value[LEAF_LITRC];
initialization.c:		leaf_litr1C                   = s->value[LEAF_LITR1C];
initialization.c:		leaf_litr2C                   = s->value[LEAF_LITR2C];
initialization.c:		leaf_litr3C                   = s->value[LEAF_LITR3C];
initialization.c:		leaf_litr4C                   = s->value[LEAF_LITR4C];
initialization.c:		//s->counter[TANK_SEEDS] = 0; // SAPONARO
initialization.c:		s->value[FROOT_LITR1C]       = s->value[FROOT_LITRC]       * s->value[FROOT_LITR_LAB_FRAC]  ;
initialization.c:		s->value[FROOT_LITR2C]       = s->value[FROOT_LITRC]       * s->value[FROOT_LITR_USCEL_FRAC];
initialization.c:		s->value[FROOT_LITR3C]       = s->value[FROOT_LITRC]       * s->value[FROOT_LITR_SCEL_FRAC] ;
initialization.c:		s->value[FROOT_LITR4C]       = s->value[FROOT_LITRC]       * s->value[FROOT_LITR_LIGN_FRAC] ;
initialization.c:		CHECK_CONDITION ( fabs ( s->value[FROOT_LITR1C] + s->value[FROOT_LITR2C] + s->value[FROOT_LITR3C] + s->value[FROOT_LITR4C]), > , s->value[FROOT_LITRC] + eps);
initialization.c:		froot_litrC                   = s->value[FROOT_LITRC];
initialization.c:		froot_litr1C                  = s->value[FROOT_LITR1C];
initialization.c:		froot_litr2C                  = s->value[FROOT_LITR2C];
initialization.c:		froot_litr3C                  = s->value[FROOT_LITR3C];
initialization.c:		froot_litr4C                  = s->value[FROOT_LITR4C];
initialization.c:	c->daily_cwd_to_litrC  += cwd_litrC    * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr2C += cwd_litr2C   * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr3C += cwd_litr3C   * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr4C += cwd_litr4C   * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litrC      += leaf_litrC        * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr1C     += leaf_litr1C       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr2C     += leaf_litr2C       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr3C     += leaf_litr3C       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr4C     += leaf_litr4C       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litrC     += froot_litrC       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr1C    += froot_litr1C      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr2C    += froot_litr2C      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr3C    += froot_litr3C      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr4C    += froot_litr4C      * 1e6 / g_settings->sizeCell;
initialization.c:	if ( ! g_settings->spinup )
initialization.c:		s->value[CWD_LITRN]     = s->value[CWD_LITRC]    / s->value[CN_DEADWOOD];
initialization.c:		s->value[CWD_LITR2N]    = s->value[CWD_LITRN]    * s->value[DEADWOOD_USCEL_FRAC];
initialization.c:		s->value[CWD_LITR3N]    = s->value[CWD_LITRN]    * s->value[DEADWOOD_SCEL_FRAC] ;
initialization.c:		s->value[CWD_LITR4N]    = s->value[CWD_LITRN]    * s->value[DEADWOOD_LIGN_FRAC] ;
initialization.c:		CHECK_CONDITION ( fabs ( s->value[CWD_LITR2N] + s->value[CWD_LITR3N] + s->value[CWD_LITR4N]), >, s->value[CWD_LITRN] + eps);
initialization.c:		cwd_litrN                = s->value[CWD_LITRN];
initialization.c:		cwd_litr2N               = s->value[CWD_LITR2N];
initialization.c:		cwd_litr3N               = s->value[CWD_LITR3N];
initialization.c:		cwd_litr4N               = s->value[CWD_LITR4N];
initialization.c:		s->value[LEAF_LITR1N]        = s->value[LEAF_LITRN]        * s->value[LEAF_LITR_LAB_FRAC]  ;
initialization.c:		s->value[LEAF_LITR2N]        = s->value[LEAF_LITRN]        * s->value[LEAF_LITR_USCEL_FRAC];
initialization.c:		s->value[LEAF_LITR3N]        = s->value[LEAF_LITRN]        * s->value[LEAF_LITR_SCEL_FRAC] ;
initialization.c:		s->value[LEAF_LITR4N]        = s->value[LEAF_LITRN]        * s->value[LEAF_LITR_LIGN_FRAC] ;
initialization.c:		CHECK_CONDITION ( fabs ( s->value[LEAF_LITR1N] + s->value[LEAF_LITR2N] + s->value[LEAF_LITR3N] + s->value[LEAF_LITR4N] ), >, s->value[LEAF_LITRN] + eps);
initialization.c:		leaf_litrN                    = s->value[LEAF_LITRN];
initialization.c:		leaf_litr1N                   = s->value[LEAF_LITR1N];
initialization.c:		leaf_litr2N                   = s->value[LEAF_LITR2N];
initialization.c:		leaf_litr3N                   = s->value[LEAF_LITR3N];
initialization.c:		leaf_litr4N                   = s->value[LEAF_LITR4N];
initialization.c:		s->value[FROOT_LITR1N]       = s->value[FROOT_LITRN]       * s->value[FROOT_LITR_LAB_FRAC]  ;
initialization.c:		s->value[FROOT_LITR2N]       = s->value[FROOT_LITRN]       * s->value[FROOT_LITR_USCEL_FRAC];
initialization.c:		s->value[FROOT_LITR3N]       = s->value[FROOT_LITRN]       * s->value[FROOT_LITR_SCEL_FRAC] ;
initialization.c:		s->value[FROOT_LITR4N]       = s->value[FROOT_LITRN]       * s->value[FROOT_LITR_LIGN_FRAC] ;
initialization.c:		CHECK_CONDITION ( fabs ( s->value[FROOT_LITR1N] + s->value[FROOT_LITR2N] + s->value[FROOT_LITR3N] + s->value[FROOT_LITR4N]), >,  s->value[FROOT_LITRN] + eps);
initialization.c:		froot_litrN                   = s->value[FROOT_LITRN];
initialization.c:		froot_litr1N                  = s->value[FROOT_LITR1N];
initialization.c:		froot_litr2N                  = s->value[FROOT_LITR2N];
initialization.c:		froot_litr3N                  = s->value[FROOT_LITR3N];
initialization.c:		froot_litr4N                  = s->value[FROOT_LITR4N];
initialization.c:	c->daily_cwd_to_litrN       += cwd_litrN    * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr2N      += cwd_litr2N   * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr3N      += cwd_litr3N   * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_cwd_to_litr4N      += cwd_litr4N   * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litrN      += leaf_litrN        * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr1N     += leaf_litr1N       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr2N     += leaf_litr2N       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr3N     += leaf_litr3N       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_leaf_to_litr4N     += leaf_litr4N       * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litrN     += froot_litrN      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr1N    += froot_litr1N      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr2N    += froot_litr2N      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr3N    += froot_litr3N      * 1e6 / g_settings->sizeCell;
initialization.c:	c->daily_froot_to_litr4N    += froot_litr4N     * 1e6 / g_settings->sizeCell;
initialization.c:	// c->soil_b = 11.43 - (0.1034*g_soil_settings->values[SOIL_SAND_PERC) - (0.0687*0.157*g_soil_settings->values[SOIL_silt_perc);
initialization.c:	c->asw = (c->soilw_sat * g_settings->init_frac_maxasw);
lai.c:	s->value[SLA_AVG] = s->value[SLA_AVG1] + ( s->value[SLA_AVG0] - s->value[SLA_AVG1] )
lai.c:									* exp( -LN2 * pow(((double)a->value / s->value[TSLA]), n));
lai.c:	s->value[SLA_AVG] *= GC_GDM;
lai.c:	s->value[LEAF_AREA]       = ( ( s->value[LEAF_C] * 1e3 / g_settings->sizeCell) * s->value[SLA_AVG] ) ;
lai.c:	s->value[LEAF_AREA_SUN]   = 1. - exp ( - s->value[LEAF_AREA] );
lai.c:	s->value[LEAF_AREA_SHADE] = s->value[LEAF_AREA] - s->value[LEAF_AREA_SUN];
lai.c:	s->value[LAI_PROJ]       = s->value[LEAF_AREA] / s->value[CANOPY_COVER_PROJ];
lai.c:        //printf("cc proj = %f \n",s->value[CANOPY_COVER_PROJ]) ;
lai.c:	s->value[LAI_SUN_PROJ]   = 1. - exp ( - s->value[LAI_PROJ] );
lai.c:	s->value[LAI_SHADE_PROJ] = s->value[LAI_PROJ] - s->value[LAI_SUN_PROJ];
lai.c:	s->value[MAX_LAI_PROJ]   = MAX(s->value[MAX_LAI_PROJ], s->value[LAI_PROJ]);
lai.c:	s->value[TREE_LAI_PROJ]       = ( ( s->value[LEAF_C] * 1e3 / (double)s->counter[N_TREE] ) * s->value[SLA_AVG] ) / s->value[CROWN_AREA];
lai.c:	s->value[TREE_LAI_SUN_PROJ]   = 1. - exp ( - s->value[TREE_LAI_PROJ] );
lai.c:	s->value[TREE_LAI_SHADE_PROJ] = s->value[TREE_LAI_PROJ] - s->value[TREE_LAI_SUN_PROJ];
lai.c:	s->value[ALL_LAI_PROJ] = s->value[LAI_PROJ] * s->value[CANOPY_COVER_PROJ];
lai.c:	if ( s->value[LAI_PROJ] > s->value[PEAK_LAI_PROJ] )
lai.c:		s->value[LAI_PROJ]       =  s->value[PEAK_LAI_PROJ];
lai.c:		s->value[LAI_SUN_PROJ]   = 1. - exp ( - s->value[LAI_PROJ] );
lai.c:		s->value[LAI_SHADE_PROJ] = s->value[LAI_PROJ] - s->value[LAI_SUN_PROJ];
lai.c:	if ( s->value[LEAF_C] > 0. )
lai.c:		s->value[SLA_PROJ]           =  ( s->value[LAI_PROJ] * ( s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell ) ) / ( s->value[LEAF_C] * 1e3 ) ;
lai.c:		s->value[SLA_SUN_PROJ]       = ( ( s->value[LAI_SUN_PROJ] + ( s->value[LAI_SHADE_PROJ] / s->value[SLA_RATIO] ) ) *
lai.c:				( s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell ) ) / ( s->value[LEAF_C] * 1e3 );
lai.c:		s->value[SLA_SHADE_PROJ]     = s->value[SLA_SUN_PROJ] * s->value[SLA_RATIO];
lai.c:	if ( ! s->value[LEAF_C] )
lai.c:		s->value[LEAF_SUN_C]   = 0.;
lai.c:		s->value[LEAF_SHADE_C] = 0.;
lai.c:		s->value[LEAF_SUN_N]   = 0.;
lai.c:		s->value[LEAF_SHADE_N] = 0.;
lai.c:		s->value[LEAF_SUN_C]   = ( ( s->value[LAI_SUN_PROJ]   * ( s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell ) ) / s->value[SLA_SUN_PROJ] ) / 1e3;
lai.c:		s->value[LEAF_SHADE_C] = s->value[LEAF_C] - s->value[LEAF_SUN_C];
lai.c:		s->value[LEAF_SUN_N]   = s->value[LEAF_SUN_C] / s->value[CN_LEAVES];
lai.c:		s->value[LEAF_SHADE_N] = s->value[LEAF_N] - s->value[LEAF_SUN_N];
lai.c:	CHECK_CONDITION(s->value[LAI_PROJ],       <, ZERO);
lai.c:	CHECK_CONDITION(s->value[LAI_SUN_PROJ],   <, ZERO);
lai.c:	CHECK_CONDITION(s->value[LAI_SHADE_PROJ], <, ZERO);
lai.c:	CHECK_CONDITION(s->value[ALL_LAI_PROJ],   <, ZERO);
lai.c:	CHECK_CONDITION(s->value[SLA_SUN_PROJ],   <, ZERO);
lai.c:	CHECK_CONDITION(s->value[SLA_SHADE_PROJ], <, ZERO);
lai.c:	CHECK_CONDITION(s->value[LAI_PROJ], >, (s->value[PEAK_LAI_PROJ] + eps));
lai.c:	CHECK_CONDITION(fabs((s->value[LAI_SUN_PROJ] + s->value[LAI_SHADE_PROJ]) - s->value[LAI_PROJ]), >, eps );
lai.c:	CHECK_CONDITION(fabs( ( s->value[LEAF_SUN_C] + s->value[LEAF_SHADE_C] ) - s->value[LEAF_C]) , > , eps);
lai.c:	CHECK_CONDITION(fabs( ( s->value[LEAF_SUN_N] + s->value[LEAF_SHADE_N] ) - s->value[LEAF_N]) , > , eps);
lai.c:        // note: it should be maybe the max across class-level max value?
lai.c:	c->max_lai_proj = s->value[MAX_LAI_PROJ];
lai.c:	s->value[MONTHLY_LAI_PROJ] += s->value[LAI_PROJ];
leaf_fall.c:	if( s->counter[LEAF_FALL_COUNTER] == 1 )
leaf_fall.c:		s->value[MAX_LAI_LEAFFALL_PROJ] = s->value[LAI_PROJ];
leaf_fall.c:		s->counter[SENESCENCE_DAY_ONE] = c->doy;
leaf_fall.c:	if( s->counter[LEAF_FALL_COUNTER] < s->counter[DAYS_LEAFFALL] )
leaf_fall.c:		previousLai = s->value[LAI_PROJ];
leaf_fall.c:		currentLai  = MAX(0,s->value[MAX_LAI_LEAFFALL_PROJ] / (1 + exp(-(s->counter[DAYS_LEAFFALL] / 2. + s->counter[SENESCENCE_DAY_ONE] - c->doy)
leaf_fall.c:				/(s->counter[DAYS_LEAFFALL] / (log(9. * s->counter[DAYS_LEAFFALL] / 2. + s->counter[SENESCENCE_DAY_ONE]) -
leaf_fall.c:		previousLeafC = previousLai * (s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell) / (s->value[SLA_AVG] * 1e3);
leaf_fall.c:		currentLeafC  = currentLai  * (s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell) / (s->value[SLA_AVG] * 1e3);
leaf_fall.c:		previousLeafN = previousLeafC / s->value[CN_LEAVES];
leaf_fall.c:		currentLeafN  = currentLeafC  / s->value[CN_LEAVES];
leaf_fall.c:		s->value[LEAF_C_TO_REMOVE]   = previousLeafC - currentLeafC;
leaf_fall.c:		s->value[LEAF_N_TO_REMOVE]   = previousLeafN - currentLeafN;
leaf_fall.c:		s->value[FROOT_C_TO_REMOVE]  = ( s->value[FROOT_C] * s->value[LEAF_C_TO_REMOVE]) / s->value[LEAF_C];
leaf_fall.c:		s->value[FROOT_N_TO_REMOVE]  = ( s->value[FROOT_N] * s->value[LEAF_N_TO_REMOVE]) / s->value[LEAF_N];
leaf_fall.c:		s->value[FRUIT_C_TO_REMOVE]  = ( s->value[FRUIT_C] * s->value[LEAF_C_TO_REMOVE]) / s->value[LEAF_C];
leaf_fall.c:		s->value[FRUIT_N_TO_REMOVE]  = ( s->value[FRUIT_N] * s->value[LEAF_N_TO_REMOVE]) / s->value[LEAF_N];
leaf_fall.c:		s->value[LEAF_C_TO_REMOVE]    = s->value[LEAF_C];
leaf_fall.c:		s->value[LEAF_N_TO_REMOVE]    = s->value[LEAF_N];
leaf_fall.c:		s->value[FROOT_C_TO_REMOVE]   = s->value[FROOT_C];
leaf_fall.c:		s->value[FROOT_N_TO_REMOVE]   = s->value[FROOT_N];
leaf_fall.c:		s->value[FRUIT_C_TO_REMOVE]   = s->value[FRUIT_C];
leaf_fall.c:		s->value[FRUIT_N_TO_REMOVE]   = s->value[FRUIT_N];
leaf_fall.c:		s->value[LEAF_C_TO_REMOVE]    = (s->value[LEAF_C]  * s->value[LEAF_FROOT_TURNOVER]) / days_for_leaffall;
leaf_fall.c:		s->value[LEAF_N_TO_REMOVE]    = (s->value[LEAF_N]  * s->value[LEAF_FROOT_TURNOVER]) / days_for_leaffall;
leaf_fall.c:		s->value[FROOT_C_TO_REMOVE]   = (s->value[FROOT_C] * s->value[LEAF_FROOT_TURNOVER]) / days_for_leaffall;
leaf_fall.c:		s->value[FROOT_N_TO_REMOVE]   = (s->value[FROOT_N] * s->value[LEAF_FROOT_TURNOVER]) / days_for_leaffall;
leaf_fall.c:		if ( s->counter[YOS] > s->value[CONES_LIFE_SPAN] )
leaf_fall.c:			s->value[FRUIT_C_TO_REMOVE]   = (s->value[FRUIT_C] * (1. / s->value[CONES_LIFE_SPAN])) / days_for_leaffall;
leaf_fall.c:			s->value[FRUIT_N_TO_REMOVE]   = (s->value[FRUIT_N] * (1. / s->value[CONES_LIFE_SPAN])) / days_for_leaffall;
leaf_fall.c:	if (s->value[FRUIT_C_TO_REMOVE] > s->value[FRUIT_C])
leaf_fall.c:		s->value[FRUIT_C_TO_REMOVE] = s->value[FRUIT_C];
leaf_fall.c:	s->value[C_LEAF_TO_RESERVE]   += s->value[LEAF_C_TO_REMOVE]   * C_FRAC_TO_RETRANSL;
leaf_fall.c:	s->value[C_FROOT_TO_RESERVE]  += s->value[FROOT_C_TO_REMOVE]  * C_FRAC_TO_RETRANSL;
leaf_fall.c:	s->value[C_LEAF_TO_LITR]      += s->value[LEAF_C_TO_REMOVE]   * ( 1. - C_FRAC_TO_RETRANSL );
leaf_fall.c:	s->value[C_FROOT_TO_LITR]     += s->value[FROOT_C_TO_REMOVE]  * ( 1. - C_FRAC_TO_RETRANSL );
leaf_fall.c:	s->value[C_FRUIT_TO_CWD]      += s->value[FRUIT_C_TO_REMOVE];
leaf_fall.c:	s->value[C_TO_RESERVE]        += (s->value[C_LEAF_TO_RESERVE] + s->value[C_FROOT_TO_RESERVE]);
leaf_fall.c:	logger(g_debug_log, "C_TO_RESERVE       = %f\n", s->value[C_TO_RESERVE]);
leaf_fall.c:	s->value[N_LEAF_TO_RESERVE]   += s->value[LEAF_N_TO_REMOVE]   * N_FRAC_TO_RETRANSL;
leaf_fall.c:	s->value[N_FROOT_TO_RESERVE]  += s->value[FROOT_N_TO_REMOVE]  * N_FRAC_TO_RETRANSL;
leaf_fall.c:	s->value[N_LEAF_TO_LITR]      += s->value[LEAF_N_TO_REMOVE]   * ( 1. - N_FRAC_TO_RETRANSL );
leaf_fall.c:	s->value[N_FROOT_TO_LITR]     += s->value[FROOT_N_TO_REMOVE]  * ( 1. - N_FRAC_TO_RETRANSL );
leaf_fall.c:	s->value[N_FRUIT_TO_CWD]      += s->value[FRUIT_N_TO_REMOVE];
leaf_fall.c:	s->value[N_TO_RESERVE]        += (s->value[N_LEAF_TO_RESERVE] + s->value[N_FROOT_TO_RESERVE]);
leaf_fall.c:	logger(g_debug_log, "N_TO_RESERVE       = %f\n", s->value[N_TO_RESERVE]);
leaf_fall.c:	if ( s->value[LEAF_C] < s->value[LEAF_C_TO_REMOVE] )
leaf_fall.c:		s->value[LEAF_C]            = 0.;
leaf_fall.c:		s->value[LEAF_C_TO_REMOVE]  = 0.;
leaf_fall.c:	if ( s->value[FROOT_C] < s->value[FROOT_C_TO_REMOVE] )
leaf_fall.c:		s->value[FROOT_C]           = 0.;
leaf_fall.c:		s->value[FROOT_C_TO_REMOVE] = 0.;
leaf_fall.c:	if ( s->value[FRUIT_C] < s->value[FRUIT_C_TO_REMOVE] )
leaf_fall.c:		s->value[FRUIT_C]           = 0.;
leaf_fall.c:		s->value[FRUIT_C_TO_REMOVE] = 0.;
leaf_fall.c:	if ( s->value[LEAF_N] < s->value[LEAF_N_TO_REMOVE] )
leaf_fall.c:		s->value[LEAF_N]            = 0.;
leaf_fall.c:		s->value[LEAF_N_TO_REMOVE]  = 0.;
leaf_fall.c:	if ( s->value[FROOT_N] < s->value[FROOT_N_TO_REMOVE] )
leaf_fall.c:		s->value[FROOT_N]           = 0.;
leaf_fall.c:		s->value[FROOT_N_TO_REMOVE] = 0.;
leaf_fall.c:	if ( s->value[FRUIT_N] < s->value[FRUIT_N_TO_REMOVE] )
leaf_fall.c:		s->value[FRUIT_N]           = 0.;
leaf_fall.c:		s->value[FRUIT_N_TO_REMOVE] = 0.;
leaf_fall.c:	CHECK_CONDITION ( s->value[LEAF_C],  <, 0. );
leaf_fall.c:	CHECK_CONDITION ( s->value[FROOT_C], <, 0. );
leaf_fall.c:	CHECK_CONDITION ( s->value[FRUIT_C], <, 0. );
leaf_fall.c:	CHECK_CONDITION ( s->value[LEAF_N],  <, 0. );
leaf_fall.c:	CHECK_CONDITION ( s->value[FROOT_N], <, 0. );
leaf_fall.c:	CHECK_CONDITION ( s->value[FRUIT_N], <, 0. );
littering.c:	/*** compute class-level deadwood carbon fluxes (tC/sizecell/day) ****/
littering.c:	s->value[CWD_TO_LITRC]         = s->value[C_TO_CWD];
littering.c:	s->value[CWD_TO_LITR2C]        = s->value[C_TO_CWD]       * s->value[DEADWOOD_USCEL_FRAC];
littering.c:	s->value[CWD_TO_LITR3C]        = s->value[C_TO_CWD]       * s->value[DEADWOOD_SCEL_FRAC];
littering.c:	s->value[CWD_TO_LITR4C]        = s->value[C_TO_CWD]       * s->value[DEADWOOD_LIGN_FRAC];
littering.c:	CHECK_CONDITION ( s->value[CWD_TO_LITR2C] + s->value[CWD_TO_LITR3C] + s->value[CWD_TO_LITR4C] , == , s->value[CWD_TO_LITRC] + eps );
littering.c:	c->daily_cwd_to_litrC         += s->value[CWD_TO_LITRC]   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr2C        += s->value[CWD_TO_LITR2C]  * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr3C        += s->value[CWD_TO_LITR3C]  * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr4C        += s->value[CWD_TO_LITR4C]  * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_C                      += s->value[CWD_TO_LITRC]   * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_2C                     += s->value[CWD_TO_LITR2C]  * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_3C                     += s->value[CWD_TO_LITR3C]  * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_4C                     += s->value[CWD_TO_LITR4C]  * 1e6 / g_settings->sizeCell;
littering.c:	s->value[LEAF_TO_LITRC]             = s->value[C_LEAF_TO_LITR];
littering.c:	s->value[LEAF_TO_LITR1C]            = s->value[C_LEAF_TO_LITR]      * s->value[LEAF_LITR_LAB_FRAC] ;
littering.c:	s->value[LEAF_TO_LITR2C]            = s->value[C_LEAF_TO_LITR]      * s->value[LEAF_LITR_USCEL_FRAC];
littering.c:	s->value[LEAF_TO_LITR3C]            = s->value[C_LEAF_TO_LITR]      * s->value[LEAF_LITR_SCEL_FRAC];
littering.c:	s->value[LEAF_TO_LITR4C]            = s->value[C_LEAF_TO_LITR]      * s->value[LEAF_LITR_LIGN_FRAC];
littering.c:	CHECK_CONDITION ( s->value[LEAF_TO_LITR1C] + s->value[LEAF_TO_LITR2C] + s->value[LEAF_TO_LITR3C] + s->value[LEAF_TO_LITR4C] , == , s->value[LEAF_TO_LITRC] + eps );
littering.c:	c->daily_leaf_to_litrC             += s->value[LEAF_TO_LITRC]       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr1C            += s->value[LEAF_TO_LITR1C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr2C            += s->value[LEAF_TO_LITR2C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr3C            += s->value[LEAF_TO_LITR3C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr4C            += s->value[LEAF_TO_LITR4C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litrC                      += s->value[LEAF_TO_LITRC]       * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr1C                     += s->value[LEAF_TO_LITR1C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr2C                     += s->value[LEAF_TO_LITR2C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr3C                     += s->value[LEAF_TO_LITR3C]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr4C                     += s->value[LEAF_TO_LITR4C]      * 1e6 / g_settings->sizeCell;
littering.c:	s->value[FROOT_TO_LITRC]            = s->value[C_FROOT_TO_LITR];
littering.c:	s->value[FROOT_TO_LITR1C]           = s->value[C_FROOT_TO_LITR]     * s->value[FROOT_LITR_LAB_FRAC] ;
littering.c:	s->value[FROOT_TO_LITR2C]           = s->value[C_FROOT_TO_LITR]     * s->value[FROOT_LITR_USCEL_FRAC];
littering.c:	s->value[FROOT_TO_LITR3C]           = s->value[C_FROOT_TO_LITR]     * s->value[FROOT_LITR_SCEL_FRAC];
littering.c:	s->value[FROOT_TO_LITR4C]           = s->value[C_FROOT_TO_LITR]     * s->value[FROOT_LITR_LIGN_FRAC];
littering.c:	CHECK_CONDITION ( s->value[LEAF_TO_LITR1C] + s->value[LEAF_TO_LITR2C] + s->value[LEAF_TO_LITR3C] + s->value[LEAF_TO_LITR4C], == , s->value[LEAF_TO_LITRC] + eps );
littering.c:	c->daily_froot_to_litrC            += s->value[FROOT_TO_LITRC]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr1C           += s->value[FROOT_TO_LITR1C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr2C           += s->value[FROOT_TO_LITR2C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr3C           += s->value[FROOT_TO_LITR3C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr4C           += s->value[FROOT_TO_LITR4C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litrC                     += s->value[FROOT_TO_LITRC]      * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr1C                    += s->value[FROOT_TO_LITR1C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr2C                    += s->value[FROOT_TO_LITR2C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr3C                    += s->value[FROOT_TO_LITR3C]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr4C                    += s->value[FROOT_TO_LITR4C]     * 1e6 / g_settings->sizeCell;
littering.c:	/*** compute class-level deadwood nitrogen fluxes (tN/sizecell/day) ****/
littering.c:	s->value[CWD_TO_LITRN]         = s->value[N_TO_CWD];
littering.c:	s->value[CWD_TO_LITR2N]        = s->value[N_TO_CWD]       * s->value[DEADWOOD_USCEL_FRAC];
littering.c:	s->value[CWD_TO_LITR3N]        = s->value[N_TO_CWD]       * s->value[DEADWOOD_SCEL_FRAC];
littering.c:	s->value[CWD_TO_LITR4N]        = s->value[N_TO_CWD]       * s->value[DEADWOOD_LIGN_FRAC];
littering.c:	CHECK_CONDITION ( s->value[CWD_TO_LITR2N] + s->value[CWD_TO_LITR3N] + s->value[CWD_TO_LITR4N], == , s->value[CWD_TO_LITRN] + eps );
littering.c:	c->daily_cwd_to_litrN         += s->value[CWD_TO_LITRN]   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr2N        += s->value[CWD_TO_LITR2N]  * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr3N        += s->value[CWD_TO_LITR3N]  * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr4N        += s->value[CWD_TO_LITR4N]  * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_N                      += s->value[CWD_TO_LITRN]   * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_2N                     += s->value[CWD_TO_LITR2N]  * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_3N                     += s->value[CWD_TO_LITR3N]  * 1e6 / g_settings->sizeCell;
littering.c:	c->cwd_4N                     += s->value[CWD_TO_LITR4N]  * 1e6 / g_settings->sizeCell;
littering.c:	s->value[LEAF_TO_LITRN]             = s->value[N_LEAF_TO_LITR];
littering.c:	s->value[LEAF_TO_LITR1N]            = s->value[N_LEAF_TO_LITR]      * s->value[LEAF_LITR_LAB_FRAC] ;
littering.c:	s->value[LEAF_TO_LITR2N]            = s->value[N_LEAF_TO_LITR]      * s->value[LEAF_LITR_USCEL_FRAC];
littering.c:	s->value[LEAF_TO_LITR3N]            = s->value[N_LEAF_TO_LITR]      * s->value[LEAF_LITR_SCEL_FRAC];
littering.c:	s->value[LEAF_TO_LITR4N]            = s->value[N_LEAF_TO_LITR]      * s->value[LEAF_LITR_LIGN_FRAC];
littering.c:	CHECK_CONDITION ( s->value[LEAF_TO_LITR1N] + s->value[LEAF_TO_LITR2N] + s->value[LEAF_TO_LITR3N] + s->value[LEAF_TO_LITR4N], == , s->value[LEAF_TO_LITRN] + eps );
littering.c:	c->daily_leaf_to_litrN             += s->value[LEAF_TO_LITRN]       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr1N            += s->value[LEAF_TO_LITR1N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr2N            += s->value[LEAF_TO_LITR2N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr3N            += s->value[LEAF_TO_LITR3N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr4N            += s->value[LEAF_TO_LITR4N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litrN                      += s->value[LEAF_TO_LITRN]       * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr1N                     += s->value[LEAF_TO_LITR1N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr2N                     += s->value[LEAF_TO_LITR2N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr3N                     += s->value[LEAF_TO_LITR3N]      * 1e6 / g_settings->sizeCell;
littering.c:	c->leaf_litr4N                     += s->value[LEAF_TO_LITR4N]      * 1e6 / g_settings->sizeCell;
littering.c:	s->value[FROOT_TO_LITRN]            = s->value[N_FROOT_TO_LITR];
littering.c:	s->value[FROOT_TO_LITR1N]           = s->value[N_FROOT_TO_LITR]     * s->value[FROOT_LITR_LAB_FRAC] ;
littering.c:	s->value[FROOT_TO_LITR2N]           = s->value[N_FROOT_TO_LITR]     * s->value[FROOT_LITR_USCEL_FRAC];
littering.c:	s->value[FROOT_TO_LITR3N]           = s->value[N_FROOT_TO_LITR]     * s->value[FROOT_LITR_SCEL_FRAC];
littering.c:	s->value[FROOT_TO_LITR4N]           = s->value[N_FROOT_TO_LITR]     * s->value[FROOT_LITR_LIGN_FRAC];
littering.c:	CHECK_CONDITION ( s->value[FROOT_TO_LITR1N] + s->value[FROOT_TO_LITR2N] + s->value[FROOT_TO_LITR3N] + s->value[FROOT_TO_LITR4N], == , s->value[FROOT_TO_LITRN] + eps );
littering.c:	c->daily_froot_to_litrN            += s->value[FROOT_TO_LITRN]      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr1N           += s->value[FROOT_TO_LITR1N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr2N           += s->value[FROOT_TO_LITR2N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr3N           += s->value[FROOT_TO_LITR3N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr4N           += s->value[FROOT_TO_LITR4N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litrN                     += s->value[FROOT_TO_LITRN]      * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr1N                    += s->value[FROOT_TO_LITR1N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr2N                    += s->value[FROOT_TO_LITR2N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr3N                    += s->value[FROOT_TO_LITR3N]     * 1e6 / g_settings->sizeCell;
littering.c:	c->froot_litr4N                    += s->value[FROOT_TO_LITR4N]     * 1e6 / g_settings->sizeCell;
littering.c:	/*** compute class-level deadwood carbon fluxes (tC/sizecell/day) ****/
littering.c:	c->daily_cwd_to_litrC         = cwd_to_litrC    * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr2C        = cwd_to_litr2C   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr3C        = cwd_to_litr3C   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr4C        = cwd_to_litr4C   * 1e6 / g_settings->sizeCell;
littering.c:	/*** compute class-level deadwood nitrogen fluxes (tN/sizecell/day) ****/
littering.c:	c->daily_cwd_to_litrN         = cwd_to_litrN    * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr2N        = cwd_to_litr2N   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr3N        = cwd_to_litr3N   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_cwd_to_litr4N        = cwd_to_litr4N   * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litrC              = leaf_to_litrC       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr1C             = leaf_to_litr1C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr2C             = leaf_to_litr2C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr3C             = leaf_to_litr3C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr4C             = leaf_to_litr4C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litrN              = leaf_to_litrN       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr1N             = leaf_to_litr1N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr2N             = leaf_to_litr2N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr3N             = leaf_to_litr3N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_leaf_to_litr4N             = leaf_to_litr4N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litrC              = froot_to_litrC       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr1C             = froot_to_litr1C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr2C             = froot_to_litr2C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr3C             = froot_to_litr3C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr4C             = froot_to_litr4C      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litrN              = froot_to_litrN       * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr1N             = froot_to_litr1N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr2N             = froot_to_litr2N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr3N             = froot_to_litr3N      * 1e6 / g_settings->sizeCell;
littering.c:	c->daily_froot_to_litr4N             = froot_to_litr4N      * 1e6 / g_settings->sizeCell;
litter_model.c:	if ( g_settings->spinup )
logger.c:	if ( (p && p->std_output) || (g_settings && g_settings->screen_output) ) {
main.c:	len += sprintf(buffer+len, "_(%d", g_settings->year_start);
main.c:	len += sprintf(buffer+len, "-%d)", g_settings->year_end);
main.c:	switch ( g_settings->CO2_trans ) {
main.c:	switch ( g_settings->management ) {
main.c:	len += sprintf(buffer+len, "_%c", g_settings->time);
main.c:	len += sprintf(buffer+len, "_%d", (int)g_settings->sizeCell);
main.c:		log_flag[0] = g_settings->debug_output;
main.c:		log_flag[1] = g_settings->daily_output;
main.c:		log_flag[2] = g_settings->monthly_output;
main.c:		log_flag[3] = g_settings->yearly_output;
main.c:		log_flag[4] = g_settings->soil_output;
main.c:		log_flag[5] = g_settings->soil_output;
main.c:		log_flag[6] = g_settings->soil_output;
main.c:	if ( ! g_settings->screen_output ) {
main.c:	if (IS_INVALID_VALUE(g_soil_settings->values[SOIL_LAT])
main.c:			|| IS_INVALID_VALUE(g_soil_settings->values[SOIL_LON]))
main.c:	if (IS_INVALID_VALUE(g_soil_settings->values[SOIL_SAND_PERC])
main.c:			|| IS_INVALID_VALUE(g_soil_settings->values[SOIL_CLAY_PERC])
main.c:			|| IS_INVALID_VALUE(g_soil_settings->values[SOIL_SILT_PERC])
main.c:			|| IS_INVALID_VALUE(g_soil_settings->values[SOIL_DEPTH]))
main.c:	if (IS_INVALID_VALUE(g_soil_settings->values[SOIL_DEPTH]))
main.c:	if (IS_INVALID_VALUE(g_soil_settings->values[SOIL_FR])
main.c:			|| IS_INVALID_VALUE(g_soil_settings->values[SOIL_FN0])
main.c:			|| IS_INVALID_VALUE(g_soil_settings->values[SOIL_FNN])
main.c:			|| IS_INVALID_VALUE(g_soil_settings->values[SOIL_M0]))
main.c:	if (IS_INVALID_VALUE(g_soil_settings->values[LITTERC]))
main.c:		g_soil_settings->values[LITTERC] = 0.;
main.c:	if (IS_INVALID_VALUE(g_soil_settings->values[LITTERN]))
main.c:		g_soil_settings->values[LITTERN] = 0.;
main.c:	if (IS_INVALID_VALUE(g_soil_settings->values[DEADWOODC]))
main.c:		g_soil_settings->values[DEADWOODC] = 0.;
main.c:	if (IS_INVALID_VALUE(g_soil_settings->values[SOILC]))
main.c:		g_soil_settings->values[SOILC] = 0.;
main.c:	if (IS_INVALID_VALUE(g_soil_settings->values[SOILN]))
main.c:		g_soil_settings->values[SOILN] = 0.;
main.c:	sprintf(end_year, "%d", g_settings->year_end);
main.c:	if ( ! g_settings->Ndep_fixed && ! g_sz_ndep_file ) {
main.c:	 /* if ( MANAGEMENT_VAR == g_settings->management )
main.c:		sprintf(buffer, "ISIMIP/%s_management_ISIMIP.txt", g_settings->sitename);
main.c:           if ( MANAGEMENT_VAR == g_settings->management )
main.c:			if ( ! log_start(g_settings->sitename) ) {
main.c:		if ( g_soil_settings->values[SOIL_LAT] > 0 )
main.c:		matrix->cells[cell].lat           = g_soil_settings->values[SOIL_LAT];
main.c:		matrix->cells[cell].lon           = g_soil_settings->values[SOIL_LON];
main.c:		matrix->cells[cell].clay_perc     = g_soil_settings->values[SOIL_CLAY_PERC];
main.c:		matrix->cells[cell].silt_perc     = g_soil_settings->values[SOIL_SILT_PERC];
main.c:		matrix->cells[cell].sand_perc     = g_soil_settings->values[SOIL_SAND_PERC];
main.c:		matrix->cells[cell].soil_depth    = g_soil_settings->values[SOIL_DEPTH];
main.c:		matrix->cells[cell].fr            = g_soil_settings->values[SOIL_FR];
main.c:		matrix->cells[cell].fn0           = g_soil_settings->values[SOIL_FN0];
main.c:		matrix->cells[cell].fnn           = g_soil_settings->values[SOIL_FNN];
main.c:		matrix->cells[cell].m0            = g_soil_settings->values[SOIL_M0];
main.c:		matrix->cells[cell].init_litter_C = g_soil_settings->values[LITTERC];
main.c:		matrix->cells[cell].init_litter_N = g_soil_settings->values[LITTERN];
main.c:		matrix->cells[cell].init_soil_C   = g_soil_settings->values[SOILC];
main.c:		matrix->cells[cell].init_soil_N   = g_soil_settings->values[SOILN];
main.c:		matrix->cells[cell].init_dead_C   = g_soil_settings->values[DEADWOODC];
main.c:				if ( g_settings->year_start == matrix->cells[0].years[i].year ) {
main.c:						, g_settings->year_start
main.c:				if ( g_settings->year_end == matrix->cells[0].years[i].year ) {
main.c:								, g_settings->year_start
main.c:								, g_settings->year_end
main.c:						, g_settings->year_end
main.c:				g_settings->year_end = matrix->cells[0].years[years_of_simulation-1].year;
main.c:		leap_year = IS_LEAP_YEAR(g_settings->year_start + year);
main.c:		if ( g_settings->year_restart == g_settings->year_start+year )
main.c:			if ( ! restart(matrix, g_settings->year_restart) ) goto err;
main.c:					if ( ! g_settings->spinup )
main.c:						if( LANDUSE_F == g_soil_settings->landuse )
main.c:					if ( LANDUSE_F == g_soil_settings->landuse )
main.c:					if ( ! g_settings->spinup )
main.c:							if ( ( LANDUSE_F == g_soil_settings->landuse ) && ( matrix->cells[cell].heights_count != 0 ) )
main.c:								if ( 'f' == g_settings->version )
main.c:											//		, day+1, month+1, year+g_settings->year_start
main.c:					if ( g_settings->prunings_count ) {
main.c:						for ( i = 0; i < g_settings->prunings_count; ++i ) {
main.c:							if ( (year+g_settings->year_start == g_settings->prunings[i].year)
main.c:									&& (month == g_settings->prunings[i].month-1)
main.c:									&& (day == g_settings->prunings[i].day-1) ) {
main.c:								pruning_daily(matrix, cell, &g_settings->prunings[i]);
main.c:						//		, day+1, month+1, year+g_settings->year_start
main.c:						//		, day+1, month+1, year+g_settings->year_start
main.c:						//		, day+1, month+1, year+g_settings->year_start
main.c:			free(matrix->cells[cell].years-g_year_start_index);
main.c:	if ( g_daily_log && g_settings->netcdf_output ) {
main.c:	if ( g_annual_log && g_settings->netcdf_output ) {
main.c:	if ( g_settings->time != 'd' ) {
main.c:	if ( ! g_settings->Ndep_fixed && ! g_sz_ndep_file ) {
main.c:			if ( ! log_start(sz_date, g_settings->sitename) ) {
main.c:		if (	IS_INVALID_VALUE(g_soil_settings->values[SOIL_SAND_PERC])
main.c:				|| IS_INVALID_VALUE(g_soil_settings->values[SOIL_CLAY_PERC])
main.c:				|| IS_INVALID_VALUE(g_soil_settings->values[SOIL_SILT_PERC])
main.c:				|| IS_INVALID_VALUE(g_soil_settings->values[SOIL_DEPTH]) ) {
main.c:		if ( g_soil_settings->values[SOIL_LAT] > 0 ) {
main.c:				if ( g_settings->year_start == matrix->cells[0].years[i].year ) {
main.c:						, g_settings->year_start
main.c:				if ( g_settings->year_end == matrix->cells[0].years[i].year ) {
main.c:								, g_settings->year_start
main.c:								, g_settings->year_end
main.c:						, g_settings->year_end
main.c:						if( LANDUSE_F == g_soil_settings->landuse )
main.c:					if ( LANDUSE_F == g_soil_settings->landuse )
main.c:						if ( (LANDUSE_F == g_soil_settings->landuse) && (matrix->cells[cell].heights_count != 0) )
main.c:							if ( 'f' == g_settings->version )
main.c:									//printf("ok tree_model (%02d-%02d-%d)\n", day+1, month+1, year+g_settings->year_start);
main.c:						//printf("ok soil_model (%02d-%02d-%d)\n", day+1, month+1, year+g_settings->year_start);
main.c:						//printf("ok cell_model (%02d-%02d-%d)\n", day+1, month+1, year+g_settings->year_start);
main.c:					//					if ( ! string_compare_i(g_settings->dndc, "on") )
main.c:			free(matrix->cells[cell].years-g_year_start_index);
Makefile:	C-deciduous-partitioning.$(OBJEXT) leaf_fall.$(OBJEXT) \
Makefile:# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
Makefile:C-deciduous-partitioning.c\
Makefile:include ./$(DEPDIR)/C-deciduous-partitioning.Po
Makefile:tags: tags-am
Makefile:tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
Makefile:ctags: ctags-am
Makefile:ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
Makefile:	--log-file $$b.log --trs-file $$b.trs \
Makefile:	--log-file $$b.log --trs-file $$b.trs \
Makefile:#	--log-file $$b.log --trs-file $$b.trs \
Makefile:install-ps: install-ps-am
Makefile:install-ps-am:
Makefile:ps: ps-am
Makefile:ps-am:
Makefile:	clean-binPROGRAMS clean-generic cscopelist-am ctags ctags-am \
Makefile:	install-ps-am install-strip installcheck installcheck-am \
Makefile:	ps ps-am recheck tags tags-am uninstall uninstall-am \
Makefile.am:C-deciduous-partitioning.c\
Makefile.in:	C-deciduous-partitioning.$(OBJEXT) leaf_fall.$(OBJEXT) \
Makefile.in:# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
Makefile.in:C-deciduous-partitioning.c\
Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/C-deciduous-partitioning.Po@am__quote@
Makefile.in:tags: tags-am
Makefile.in:tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
Makefile.in:ctags: ctags-am
Makefile.in:ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
Makefile.in:	--log-file $$b.log --trs-file $$b.trs \
Makefile.in:	--log-file $$b.log --trs-file $$b.trs \
Makefile.in:@am__EXEEXT_TRUE@	--log-file $$b.log --trs-file $$b.trs \
Makefile.in:install-ps: install-ps-am
Makefile.in:install-ps-am:
Makefile.in:ps: ps-am
Makefile.in:ps-am:
Makefile.in:	clean-binPROGRAMS clean-generic cscopelist-am ctags ctags-am \
Makefile.in:	install-ps-am install-strip installcheck installcheck-am \
Makefile.in:	ps ps-am recheck tags tags-am uninstall uninstall-am \
management.c:	s->counter[THINNED_TREE]  += s->counter[N_TREE];
management.c:	s->counter[HARVESTING_HAPPENS] = 1;
management.c:	tree_biomass_remove ( c, height, dbh, age, species, s->counter[N_TREE], nat_man );
management.c:	c->leaf_carbon              -= (s->value[C_LEAF_TO_LITR]   * 1e6 / g_settings->sizeCell);
management.c:	c->froot_carbon             -= (s->value[C_FROOT_TO_LITR]  * 1e6 / g_settings->sizeCell);
management.c:	c->stem_carbon              -= (s->value[C_STEM_TO_CWD]    * 1e6 / g_settings->sizeCell);
management.c:	c->branch_carbon            -= (s->value[C_BRANCH_TO_CWD]  * 1e6 / g_settings->sizeCell);
management.c:	c->croot_carbon             -= (s->value[C_CROOT_TO_CWD]   * 1e6 / g_settings->sizeCell);
management.c:	c->reserve_carbon           -= (s->value[C_RESERVE_TO_CWD] * 1e6 / g_settings->sizeCell);
management.c:	c->fruit_carbon             -= (s->value[C_FRUIT_TO_CWD]   * 1e6 / g_settings->sizeCell);
management.c:			(THINNING_REGIME_ABOVE == g_settings->thinning_regime) ? sort_by_heights_asc : sort_by_heights_desc
management.c:        if (!g_settings->replanting)
management.c:					s->counter[THINNING_HAPPENS] = 0;
management.c:					if ( MANAGEMENT_ON == g_settings->management )
management.c:							CHECK_CONDITION ( c->years[year].year, >, g_settings->year_start_management );
management.c:							CHECK_CONDITION ( (g_settings->year_start_management - g_settings->year_start), >, s->value[THINNING] );
management.c:						if ( ( c->years[year].year == g_settings->year_start_management) ||
management.c:							(( c->years[year].year >= g_settings->year_start_management )
management.c:							&& ( s->value[THINNING] == s->counter[YEARS_THINNING] )) )
management.c:					else if ( (MANAGEMENT_VAR == g_settings->management) || (MANAGEMENT_VAR1 == g_settings->management) )
management.c:							s->counter[THINNING_HAPPENS] = 1;
management.c:                                                                        //s->value[THINNING_INDEX]= i;
management.c:						s->counter[THINNING_HAPPENS] = 1;
management.c:						s->counter[YEARS_THINNING] = 0;
management.c:					++s->counter[YEARS_THINNING];
management.c:					if ( MANAGEMENT_ON == g_settings->management )
management.c:						CHECK_CONDITION( s->counter[YEARS_THINNING], >, s->value[ROTATION] );
management.c:						if ( a->value == s->value[ROTATION] )
management.c:					else if ( MANAGEMENT_VAR == g_settings->management )
management.c:						for ( rsi = 0; rsi < g_settings->replanted_count; rsi++ )
management.c:														, g_settings->replanted[rsi].species) )
management.c:						CHECK_CONDITION(rsi, ==, g_settings->replanted_count );
management.c:                                                thinned_plants =       s->counter[N_TREE] ; //save number of harvested trees
management.c:                                                // virtual space (as result the value of e.g. s->value[C_HWP] is simply set to 0 once the replanted class
management.c:                                                harvested_carbon =      s->value[C_HWP]     ;      /* woody biomass removed (tC/ha/yr) */
management.c:                                                harvested_carbon_cum =  s->value[CUM_C_HWP] ;
management.c:                                                harvested_volume =      s->value[VOLUME_HWP]     ; /*  stem volume removed (m3/ha/yr) */
management.c:                                                harvested_volume_cum =  s->value[CUM_VOLUME_HWP] ;
management.c:                                            	// rsi is simply g_settings->replanted_count -1
management.c:                                            	rsi =  g_settings->replanted_count -1 ;
management.c:						CHECK_CONDITION (g_settings->replanted[rsi].n_tree, <, ZERO);
management.c:						CHECK_CONDITION (g_settings->replanted[rsi].height, <, 1.3);
management.c:						CHECK_CONDITION (g_settings->replanted[rsi].avdbh,  <, ZERO);
management.c:						CHECK_CONDITION (g_settings->replanted[rsi].age,    <, ZERO);
management.c:						if( g_settings->replanted[rsi].n_tree )
management.c:							s->counter[YEARS_THINNING] = 1;
management.c:                                                  	s->value[C_HWP]          =  harvested_carbon      ;
management.c:                                                  	s->value[CUM_C_HWP]      =  harvested_carbon_cum  ;
management.c:                                                  	s->value[VOLUME_HWP]     =  harvested_volume      ;
management.c:                                                  	s->value[CUM_VOLUME_HWP] =  harvested_volume_cum  ;
management.c:                                                  	s->counter[THINNED_TREE] =  thinned_plants        ;
management.c:                                                s->counter[THINNING_HAPPENS] = 1;
management.c:					s->counter[THINNING_HAPPENS] = 0;
management.c:						 s->counter[THINNING_HAPPENS] = 1; // FIXME the removed trees as prescribed from stand_file.txt
management.c:                                                        //s->value[THINNING_INDEX]= i;
management.c:						s->counter[THINNING_HAPPENS] = 1;
management.c:						s->counter[YEARS_THINNING] = 0;
management.c:					++s->counter[YEARS_THINNING];
management.c:                                                thinned_plants =       s->counter[N_TREE] ; //save number of harvested trees
management.c:                                                 harvested_carbon =      s->value[C_HWP]     ;      /* woody biomass removed (tC/ha/yr) */
management.c:                                                 harvested_carbon_cum =  s->value[CUM_C_HWP] ;
management.c:                                                 harvested_volume =      s->value[VOLUME_HWP]     ; /*  stem volume removed (m3/ha/yr) */
management.c:                                                 harvested_volume_cum =  s->value[CUM_VOLUME_HWP] ;
management.c:                                                 s->value[C_HWP]          =  harvested_carbon      ;
management.c:                                                 s->value[CUM_C_HWP]      =  harvested_carbon_cum  ;
management.c:                                                 s->value[VOLUME_HWP]     =  harvested_volume      ;
management.c:                                                 s->value[CUM_VOLUME_HWP] =  harvested_volume_cum  ;
management.c:                                                 s->counter[THINNED_TREE] =  thinned_plants        ;
management.c:                                                 s->counter[THINNING_HAPPENS] = 1;
management.c:                                        //if( g_settings->regeneration && (MANAGEMENT_VAR == g_settings->management))
management.c:						CHECK_CONDITION (g_settings->replanting_n_tree, <, ZERO);
management.c:						CHECK_CONDITION (g_settings->replanting_height, <, 1.3);
management.c:						CHECK_CONDITION (g_settings->replanting_avdbh,  <, ZERO);
management.c:						CHECK_CONDITION (g_settings->replanting_age,    <, ZERO);
management.c:						s->counter[YEARS_THINNING] =   1;
management.c:	if (THINNING_REGIME_ABOVE == s->value[THINNING_REGIME] )
management.c:	if ( 0 == g_settings->management_type )
management.c:		trees_to_remove = ROUND((thinning_intensity_prescribed / 100. ) * s->counter[N_TREE]);
management.c:		trees_to_remove = ROUND((s->value[THINNING_INTENSITY] / 100. ) * s->counter[N_TREE]);
management.c:		if ( ! IS_INVALID_VALUE(s->value[MINSTOCKGROW]) && ! IS_INVALID_VALUE(s->value[VOLUME]) )
management.c:			v = (s->value[VOLUME] - s->value[MINSTOCKGROW]) * 100. / s->value[MINSTOCKGROW];
management.c:				perc = (int)s->value[THINNING_80];
management.c:				perc = (int)s->value[THINNING_60_80];
management.c:				perc = (int)s->value[THINNING_40_60];
management.c:				perc = (int)s->value[THINNING_40_20];
management.c:				perc = (int)s->value[THINNING_0];
management.c:				trees_to_remove = s->counter[N_TREE] * perc / 100.;
management.c:	s->counter[THINNED_TREE] += trees_to_remove;
management.c:	if ( trees_to_remove < s->counter[N_TREE] )
management.c:		s->counter[N_TREE] -= trees_to_remove;
management.c:		tree_biomass_remove ( c, height, dbh, age, species, s->counter[N_TREE], nat_man );
management.c:	CHECK_CONDITION(s->counter[N_TREE], <, ZERO );
management.c:	s->value[TOTAL_C]    = s->value[LEAF_C] + s->value[CROOT_C] + s->value[FROOT_C] + s->value[STEM_C] + s->value[BRANCH_C] + s->value[RESERVE_C];
management.c:					if ( MANAGEMENT_VAR1 == g_settings->management )
management.c:        if ( g_settings->replanting && ! management->replanting_years_count)
matrix.c:		if ( row.year_stand == g_settings->year_start ) {
matrix.c:		//if ( row.year_stand == g_settings->year_start ) {
matrix.c:		printf("starting year %d not found!!", g_settings->year_start);
matrix.c:		for ( i = 0; i < g_settings->number_of_soil_layer; ++i )
matrix.c:	if ( ! s->name ) return 0;
matrix.c:	sprintf(filename, "%s%s.txt", g_sz_parameterization_path, s->name);
matrix.c:				s->value[i] = value;
matrix.c:			s->value[i] = INVALID_VALUE;
matrix.c:	if ( (s->value[LIGHT_TOL] < 1.) || (s->value[LIGHT_TOL] > 4.) ) {
matrix.c:		printf("error: LIGHT TOL cannot be %g. It must be between 1,2,3 or 4", s->value[LIGHT_TOL]);
matrix.c:	s->value[MAX_SPECIES_COVER] = (int)s->value[LIGHT_TOL];
matrix.c:			if ( d->rows[row].year_stand == g_settings->year_start )
matrix.c:			logger_error(g_debug_log, "year_start = %d not found in %s\n", g_settings->year_start, filename);
matrix.c:	resol = (int)sqrt(g_settings->sizeCell);
matrix.c:	logger(g_debug_log, "Cell resolution = %d x %d = %g m^2\n", resol, resol, g_settings->sizeCell);
matrix.c:	if (g_settings->version == 'f')
matrix.c:	if (g_settings->spatial == 's')
matrix.c:	if (g_settings->time == 's')
matrix.c:	else if ((g_settings->time == 'h'))
matrix.c:	else if ((g_settings->time == 'd'))
matrix.c:		logger(g_debug_log, "Site Name = %s\n",    g_settings->sitename);
matrix.c:		logger(g_debug_log, "Latitude = %f° \n",   g_soil_settings->values[SOIL_LAT]);
matrix.c:		logger(g_debug_log, "Longitude = %f° \n",  g_soil_settings->values[SOIL_LON]);
matrix.c:		if (g_soil_settings->values[SOIL_LAT] > 0) logger(g_debug_log, "North hemisphere\n");
matrix.c:		logger(g_debug_log, "-Number of soil layers = %g\n", g_settings->number_of_soil_layer);
matrix.c:		logger(g_debug_log, "-Soil depth = %g cm\n",         g_soil_settings->values[SOIL_DEPTH]);
matrix.c:		logger(g_debug_log, "-Clay Percentage = %g %%\n",    g_soil_settings->values[SOIL_CLAY_PERC]);
matrix.c:		logger(g_debug_log, "-Silt Percentage = %g %%\n",    g_soil_settings->values[SOIL_SILT_PERC]);
matrix.c:		logger(g_debug_log, "-Sand Percentage = %g %%\n",    g_soil_settings->values[SOIL_SAND_PERC]);
matrix.c:		logger(g_debug_log, "-Soil FR = %g\n",               g_soil_settings->values[SOIL_FR]);
matrix.c:		logger(g_debug_log, "-Soil FN0 = %g\n",              g_soil_settings->values[SOIL_FN0]);
matrix.c:		logger(g_debug_log, "-Soil FNN = %g\n",              g_soil_settings->values[SOIL_FNN]);
matrix.c:		logger(g_debug_log, "-Soil M0 = %g\n",               g_soil_settings->values[SOIL_M0]);
matrix.c:		logger(g_debug_log, "-Litter = %g tC/ha\n",          g_soil_settings->values[LITTERC]);
matrix.c:		logger(g_debug_log, "-Litter = %g tN/ha\n",          g_soil_settings->values[LITTERN]);
matrix.c:		logger(g_debug_log, "-Soil = %g tC/ha\n",            g_soil_settings->values[SOILC]);
matrix.c:		logger(g_debug_log, "-Soil = %g tN/ha\n",            g_soil_settings->values[SOILN]);
matrix.c:						free (m->cells[cell].years-g_year_start_index);
matrix.h:	MAX_SPECIES_COVER,                   /* (DIM) maximum species-specific cell cover */
matrix.h:	int phenology_phase;                /* species-specific phenological phase */
met_data.c:	//	ampl = (exp (7.42 + (0.045 * (g_soil_settings->values[SOIL_LAT]+adjust_latitude)))) / 3600;
meteo.c:		//logger(g_debug_log, "%d-%s-vpd = %f\n",yos[*yos_count-1].m[month].d[day].n_days, MonthName[month], yos[*yos_count-1].m[month].d[day].vpd);
meteo.c:		//logger(g_debug_log, "%d-%s-swc= %f\n",yos[*yos_count-1].m[month].d[day].n_days, MonthName[month], yos[*yos_count-1].m[month].d[day].swc);
meteo.c:		if ( 's' == g_settings->spatial )
meteo.c:		//logger(g_debug_log, "%d-%s-tavg = %f\n",yos[*yos_count-1].m[month].d[day].n_days, MonthName[month], yos[*yos_count-1].m[month].d[day].tavg);
meteo.c:		//logger(g_debug_log, "%d-%s-tavg = %f\n",yos[*yos_count-1].m[month].d[day].n_days, MonthName[month], yos[*yos_count-1].m[month].d[day].tavg);
meteo.c:					g_settings->year_start + *yos_count-1, month+1, day+1);
meteo.c:					g_settings->year_start + *yos_count-1, month+1, day+1);
meteo.c:					g_settings->year_start + *yos_count-1, month+1, day+1);
meteo.c:		if ( year == g_settings->year_start ) {
meteo.c:	if ( CO2_TRANS_VAR == g_settings->CO2_trans ) {
meteo.c:			if ( meteo_annual[i].year == g_settings->year_start_co2_fixed ) {
meteo.c:	if ( (CO2_TRANS_ON == g_settings->CO2_trans) || (CO2_TRANS_VAR == g_settings->CO2_trans) )
meteo.c:			if ( CO2_TRANS_VAR == g_settings->CO2_trans ) {
meteo.c:				if ( meteo_annual[i].year >= g_settings->year_start_co2_fixed ) {
meteo.c:			meteo_annual[i].co2Conc = g_settings->co2Conc;
meteo.c:	if ( ! g_settings->Ndep_fixed )
modifiers.c:	const double Kc25   = 404;    /* (ubar or umol mol-1) Michaelis-Menten const carboxylase, 25 deg C  Badger and Collatz value*/
modifiers.c:	const double Ko25   = 248000; /* (ubar or umol mol-1) Michaelis-Menten const oxygenase, 25 deg C 248 Badger and Collatz, 278.4 Bernacchi et al., 2001 */
modifiers.c://	const double Kc25          = 404.9;  /* (ubar or umol mol-1) Michaelis-Menten const carboxylase, 25 deg C  Badger and Collatz value*/
modifiers.c://	const double Ko25          = 278400; /* (ubar or umol mol-1) Michaelis-Menten const oxygenase, 25 deg C 248 Badger and Collatz, 278.4 Bernacchi et al., 2001 */
modifiers.c:	double Kc;           /* (ppm) effective Michaelis-Menten coefficienct for Rubisco */
modifiers.c:	double Ko;           /* (ppm) michaelis-menten constant for oxygenase reaction */
modifiers.c:	Ca_ref = g_settings->co2Conc;
modifiers.c:	s->value[F_CO2_VER] = v1 * v2;
modifiers.c:	/* compute effective Michaelis-Menten coefficient for Rubisco as in Collatz et al., (1991) see von Caemmerer 2000 "Biochemical model of leaf photosynthesis" */
modifiers.c:		s->value[F_CO2_FRANKS] = MIN ( Av_rel, Aj_rel );
modifiers.c:		s->value[F_CO2_FRANKS] = Av_rel;
modifiers.c:		s->value[F_CO2_FRANKS] = Aj_rel;
modifiers.c:		s->value[F_CO2] = s->value[F_CO2_VER];
modifiers.c:		s->value[F_CO2] = s->value[F_CO2_FRANKS];
modifiers.c:	s->value[F_CO2_TR] = 39.43 * pow ( Ca , -0.64 );
modifiers.c:	s->value[F_LIGHT_MAKELA]        = 1. / ( ( s->value[GAMMA_LIGHT] * s->value[APAR])       + 1. );
modifiers.c:	s->value[F_LIGHT_SUN_MAKELA]    = 1. / ( ( s->value[GAMMA_LIGHT] * s->value[APAR_SUN])   + 1. );
modifiers.c:	s->value[F_LIGHT_SHADE_MAKELA]  = 1. / ( ( s->value[GAMMA_LIGHT] * s->value[APAR_SHADE]) + 1. );
modifiers.c:	s->value[F_LIGHT]       = s->value[APAR]        / ( PARD50 + s->value[APAR] );
modifiers.c:	logger(g_debug_log, "fLIGHT       = %f \n", s->value[F_LIGHT]);
modifiers.c:	s->value[F_LIGHT_SUN]   =  s->value[APAR_SUN]   / ( PARD50 + s->value[APAR_SUN] );
modifiers.c:	logger(g_debug_log, "fLIGHT_SUN   = %f \n", s->value[F_LIGHT_SUN]);
modifiers.c:	s->value[F_LIGHT_SHADE] =  s->value[APAR_SHADE] / ( PARD50 + s->value[APAR_SHADE] );
modifiers.c:	logger(g_debug_log, "fLIGHT_SHADE = %f \n", s->value[F_LIGHT_SHADE]);
modifiers.c:		if ( ( meteo_daily->tavg <= s->value[GROWTHTMIN]) || (meteo_daily->tavg >= s->value[GROWTHTMAX] ) )
modifiers.c:			s->value[F_T] = 0.;
modifiers.c:			s->value[F_T] = ( ( meteo_daily->tavg - s->value[GROWTHTMIN]) / (s->value[GROWTHTOPT] - s->value[GROWTHTMIN] ) ) *
modifiers.c:					pow ( ( ( s->value[GROWTHTMAX] - meteo_daily->tavg) / (s->value[GROWTHTMAX] - s->value[GROWTHTOPT] ) ),
modifiers.c:							( ( s->value[GROWTHTMAX] - s->value[GROWTHTOPT]) / (s->value[GROWTHTOPT] - s->value[GROWTHTMIN] ) ) );
modifiers.c:		if ( ( meteo_daily->tday <= s->value[GROWTHTMIN]) || (meteo_daily->tday >= s->value[GROWTHTMAX] ) )
modifiers.c:			s->value[F_T] = 0;
modifiers.c:			s->value[F_T] = ( ( meteo_daily->tday - s->value[GROWTHTMIN]) / (s->value[GROWTHTOPT] - s->value[GROWTHTMIN] ) ) *
modifiers.c:					pow ( ( ( s->value[GROWTHTMAX] - meteo_daily->tday) / (s->value[GROWTHTMAX] - s->value[GROWTHTOPT] ) ),
modifiers.c:							( ( s->value[GROWTHTMAX] - s->value[GROWTHTOPT]) / (s->value[GROWTHTOPT] - s->value[GROWTHTMIN] ) ) );
modifiers.c:	logger(g_debug_log, "fT = %f\n", s->value[F_T]);
modifiers.c:	CHECK_CONDITION(s->value[F_T], >, 1);
modifiers.c:	CHECK_CONDITION(s->value[F_T], <, ZERO);
modifiers.c:	//s->value[F_VPD] = exp (- s->value[COEFFCOND] * vpd) * 10);
modifiers.c:	s->value[F_VPD] = exp ( - s->value[COEFFCOND] * meteo_daily->vpd );
modifiers.c:	logger(g_debug_log, "fVPD = %f\n", s->value[F_VPD]);
modifiers.c:	CHECK_CONDITION(s->value[F_VPD], >, 1);
modifiers.c:	CHECK_CONDITION(s->value[F_VPD], <, ZERO);
modifiers.c:		s->value[F_VPD] = 1.;
modifiers.c:		s->value[F_VPD] = 0.;
modifiers.c:		s->value[F_VPD] = (vpd_close - meteo_daily->vpd) / (vpd_close - vpd_open);
modifiers.c:		RelAge = (double)a->value / s->value[MAXAGE];
modifiers.c:		s->value[F_AGE] = ( 1. / ( 1. + pow ( ( RelAge / (double)s->value[RAGE] ), (double)s->value[NAGE] ) ) );
modifiers.c:		logger(g_debug_log, "fAge = %f\n", s->value[F_AGE]);
modifiers.c:		s->value[F_AGE] = 1.;
modifiers.c:	CHECK_CONDITION(s->value[F_AGE], >, 1.);
modifiers.c:	CHECK_CONDITION(s->value[F_AGE], <, ZERO);
modifiers.c:	s->value[F_NUTR] = 1. - ( 1. - c->fn0 ) * pow ( ( 1. - c->fr), c->fnn );
modifiers.c:	logger(g_debug_log, "fNutr = %f\n", s->value[F_NUTR]);
modifiers.c:	CHECK_CONDITION( s->value[F_NUTR], >, 1 );
modifiers.c:	CHECK_CONDITION( s->value[F_NUTR], <, ZERO );
modifiers.c:	s->values[F_NUTR] = c->soilN / s->value[NPP_gN_DEMAND];
modifiers.c:	if ( s->values[F_NUTR] > 1.) s->values[F_NUTR] = 1.;
modifiers.c:	logger(g_debug_log, "fNutr = %f\n", s->value[F_NUTR]);
modifiers.c:	CHECK_CONDITION( s->value[F_NUTR] , > , 1);
modifiers.c:	CHECK_CONDITION( s->value[F_NUTR] , < , ZERO);
modifiers.c:	if (c->psi > s->value[SWPOPEN])
modifiers.c:		s->value[F_PSI] = 1.;
modifiers.c:	else if (c->psi <= s->value[SWPCLOSE])
modifiers.c:		s->value[F_PSI] = WATER_STRESS_LIMIT ;
modifiers.c:		s->value[F_PSI] = ( s->value[SWPCLOSE] - c->psi ) / ( s->value[SWPCLOSE] - s->value[SWPOPEN] );
modifiers.c:		if(s->value[F_PSI] < WATER_STRESS_LIMIT) s->value[F_PSI] = WATER_STRESS_LIMIT;
modifiers.c:	s->value[F_SW] = s->value[F_PSI];
modifiers.c:	logger(g_debug_log, "fSW = %f\n", s->value[F_PSI]);
modifiers.c:	CHECK_CONDITION(s->value[F_SW], >, 1.);
modifiers.c:	CHECK_CONDITION(s->value[F_SW], <, ZERO);
modifiers.c:	s->value[PHYS_MOD] = MIN (s->value[F_VPD], (s->value[F_SW] * s->value[F_AGE]));
modifiers.c:	CHECK_CONDITION(s->value[PHYS_MOD], >, 1.);
modifiers.c:	CHECK_CONDITION(s->value[PHYS_MOD], <, ZERO);
modifiers.c:		eq1 = (g_soil_settings->values[SOIL_CLAY_PERC] * log(clay_dim)) + (g_soil_settings->values[SOIL_silt_perc * log(silt_dim)) + (g_soil_settings->values[SOIL_sand_perc * log(sand_dim));
modifiers.c:	    eq2 = sqrt ((pow ((g_soil_settings->values[SOIL_CLAY_PERC] * log(clay_dim)),2)) + (pow ((g_soil_settings->values[SOIL_sand_perc * log(sand_dim)),2)) + (pow ((g_soil_settings->values[SOIL_silt_perc * log(silt_dim)),2)));
modifiers.c:		s->value[F_DROUGHT] = (leaf_res * (bulk_pot - min_leaf_pot)) / (- min_leaf_pot * ((leaf_res + soil_res) * bulk_pot));
modifiers.c:		logger(g_debug_log, "F_DROUGHT = %f\n", s->value[F_DROUGHT]);
mortality.c:					logger(g_debug_log, "MORTALITY BASED ON HIGH CANOPY COVER height %f species %s dbh %f !!!\n", h->value, s->name, d->value);
mortality.c:					livetree = s->counter[N_TREE];
mortality.c:					//					while ( c->tree_layers[layer].layer_cover_proj >= g_settings->max_layer_cover )
mortality.c:					while (s->value[DBHDC_EFF] <  s->value[DBHDCMIN] )    //ddalmo may23: test include if layer_cc_proj > max_layer_cc_proj
mortality.c:						//s->value[DBHDC_EFF] = s->value[DBHDCMIN];
mortality.c:						c->tree_layers[layer].layer_density = c->tree_layers[layer].layer_n_trees / g_settings->sizeCell;
mortality.c:						c->tree_layers[layer].layer_cover_proj  -= s->value[CANOPY_COVER_PROJ];
mortality.c:							s->value[CANOPY_COVER_PROJ] = s->value[CROWN_AREA_PROJ] * livetree / g_settings->sizeCell;
mortality.c:							c->tree_layers[layer].layer_cover_proj += s->value[CANOPY_COVER_PROJ];
mortality.c:					s->counter[DEAD_TREE] += deadtree;
mortality.c:					s->counter[N_TREE]     = livetree;
mortality.c:					CHECK_CONDITION( s->value[CANOPY_COVER_PROJ] ,  > , s->value[CANOPY_COVER_PROJ] + eps );
mortality.c:						c->tree_layers[layer].layer_n_trees += s->counter[N_TREE];
mortality.c:	c->tree_layers[layer].layer_density = c->tree_layers[layer].layer_n_trees / g_settings->sizeCell;
mortality.c:	if( s->value[RESERVE_C] < 0 )
mortality.c:		printf("growth efficiency mortality species %s!!!\n", s->name);
mortality.c:		s->counter[DEAD_TREE] = s->counter[N_TREE];
mortality.c:		s->counter[N_TREE]    = 0;
mortality.c:		c->n_trees -= s->counter[DEAD_TREE];
mortality.c:		tree_biomass_remove ( c, height, dbh, age, species, s->counter[DEAD_TREE], nat_man);
mortality.c:		c->daily_leaf_carbon        -= (s->value[C_LEAF_TO_LITR]   * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_froot_carbon       -= (s->value[C_FROOT_TO_LITR]  * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_stem_carbon        -= (s->value[C_STEM_TO_CWD]    * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_croot_carbon       -= (s->value[C_CROOT_TO_CWD]   * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_branch_carbon      -= (s->value[C_BRANCH_TO_CWD]  * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_reserve_carbon     -= (s->value[C_RESERVE_TO_CWD] * 1e6 / g_settings->sizeCell);
mortality.c:		c->daily_fruit_carbon       -= (s->value[C_FRUIT_TO_CWD]   * 1e6 / g_settings->sizeCell);
mortality.c:		c->leaf_carbon              -= (s->value[C_LEAF_TO_LITR]   * 1e6 / g_settings->sizeCell);
mortality.c:		c->froot_carbon             -= (s->value[C_FROOT_TO_LITR]  * 1e6 / g_settings->sizeCell);
mortality.c:		c->stem_carbon              -= (s->value[C_STEM_TO_CWD]    * 1e6 / g_settings->sizeCell);
mortality.c:		c->branch_carbon            -= (s->value[C_BRANCH_TO_CWD]  * 1e6 / g_settings->sizeCell);
mortality.c:		c->croot_carbon             -= (s->value[C_CROOT_TO_CWD]   * 1e6 / g_settings->sizeCell);
mortality.c:		c->reserve_carbon           -= (s->value[C_RESERVE_TO_CWD] * 1e6 / g_settings->sizeCell);
mortality.c:		c->fruit_carbon             -= (s->value[C_FRUIT_TO_CWD]   * 1e6 / g_settings->sizeCell);
mortality.c:	if( s->value[RESERVE_C] < 0 )
mortality.c:		tree_biomass_remove ( c, height, dbh, age, species, s->counter[N_TREE], nat_man );
mortality.c:		s->counter[DEAD_TREE] += s->counter[N_TREE];
mortality.c:		s->counter[N_TREE]     = 0;
mortality.c:		c->n_trees -= s->counter[DEAD_TREE];
mortality.c:	age_mort = ( - ( mort_factor * log ( mort_log ) ) / (s->value[MAXAGE])) * pow (((double)a->value /s->value[MAXAGE]), 2.);
mortality.c:	livetree = s->counter[N_TREE];
mortality.c:		s->counter[DEAD_TREE] += deadtree;
mortality.c:		s->counter[N_TREE]    -= deadtree;
mortality.c:		CHECK_CONDITION(s->counter[N_TREE],    <=, 0);
mortality.c:		CHECK_CONDITION(s->counter[DEAD_TREE], <, 0);
mortality.c:	double age_mort_fact = 0.01;   /* ntrees years-1 */
mortality.c:	livetree = s->counter[N_TREE];
mortality.c:		s->counter[DEAD_TREE] += deadtree;
mortality.c:		s->counter[N_TREE]    -= deadtree;
mortality.c:		CHECK_CONDITION(s->counter[N_TREE],    <=, 0);
mortality.c:		CHECK_CONDITION(s->counter[DEAD_TREE], <, 0);
mortality.c:	s->value[BRANCH_C_TO_REMOVE]             = ( s->value[BRANCH_C]           * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[C_BRANCH_TO_RESERVE]            = s->value[BRANCH_C_TO_REMOVE]   * C_FRAC_TO_RETRANSL;
mortality.c:	s->value[C_BRANCH_TO_CWD]                += s->value[BRANCH_C_TO_REMOVE]   * ( 1. - C_FRAC_TO_RETRANSL );
mortality.c:	s->value[C_BRANCH_SAPWOOD_TO_CWD]       += ( s->value[BRANCH_SAPWOOD_C]   * ( 1. - self_pruning_ratio ) ) * ( 1. - C_FRAC_TO_RETRANSL );
mortality.c:	s->value[C_BRANCH_HEARTWOOD_TO_CWD]     += ( s->value[BRANCH_HEARTWOOD_C] * ( 1. - self_pruning_ratio ) ) * ( 1. - C_FRAC_TO_RETRANSL );
mortality.c:	s->value[C_BRANCH_LIVEWOOD_TO_CWD]      += ( s->value[BRANCH_LIVEWOOD_C]   * ( 1. - self_pruning_ratio ) ) * ( 1. - C_FRAC_TO_RETRANSL );
mortality.c:	s->value[C_BRANCH_DEADWOOD_TO_CWD]      += ( s->value[BRANCH_DEADWOOD_C] * ( 1. - self_pruning_ratio ) ) * ( 1. - C_FRAC_TO_RETRANSL );
mortality.c:	s->value[C_TO_RESERVE]                   += s->value[C_BRANCH_TO_RESERVE];
mortality.c:	s->value[C_TO_CWD]                       += s->value[C_BRANCH_TO_CWD];
mortality.c:	s->value[BRANCH_N_TO_REMOVE]             = ( s->value[BRANCH_N]           * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[N_BRANCH_TO_RESERVE]            = s->value[BRANCH_N_TO_REMOVE]   * N_FRAC_TO_RETRANSL;
mortality.c:	s->value[N_BRANCH_TO_CWD]                += s->value[BRANCH_N_TO_REMOVE]   * ( 1. - N_FRAC_TO_RETRANSL );
mortality.c:	s->value[N_TO_RESERVE]                   += s->value[N_BRANCH_TO_RESERVE];
mortality.c:	s->value[N_TO_CWD]                       += s->value[N_BRANCH_TO_CWD];
mortality.c:	s->value[CROOT_C_TO_REMOVE]             = ( s->value[CROOT_C]             * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[C_CROOT_TO_RESERVE]            = s->value[CROOT_C_TO_REMOVE]     * C_FRAC_TO_RETRANSL;
mortality.c:	s->value[C_CROOT_TO_CWD]                += s->value[CROOT_C_TO_REMOVE]     * ( 1. - C_FRAC_TO_RETRANSL );;
mortality.c:	s->value[C_CROOT_SAPWOOD_TO_CWD]        += ( s->value[CROOT_SAPWOOD_C]     * ( 1. - self_pruning_ratio ) )* ( 1. - C_FRAC_TO_RETRANSL );
mortality.c:	s->value[C_CROOT_HEARTWOOD_TO_CWD]      += ( s->value[CROOT_HEARTWOOD_C]   * ( 1. - self_pruning_ratio ) )* ( 1. - C_FRAC_TO_RETRANSL );
mortality.c:	s->value[C_CROOT_LIVEWOOD_TO_CWD]      += ( s->value[CROOT_LIVEWOOD_C]   * ( 1. - self_pruning_ratio ) ) * ( 1. - C_FRAC_TO_RETRANSL );
mortality.c:	s->value[C_CROOT_DEADWOOD_TO_CWD]      += ( s->value[CROOT_DEADWOOD_C] * ( 1. - self_pruning_ratio ) ) * ( 1. - C_FRAC_TO_RETRANSL );
mortality.c:	s->value[C_TO_RESERVE]                  += s->value[C_CROOT_TO_RESERVE];
mortality.c:	s->value[C_TO_CWD]                      += s->value[C_CROOT_TO_CWD];
mortality.c:	s->value[CROOT_N_TO_REMOVE]             = ( s->value[CROOT_N]             * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[N_CROOT_TO_RESERVE]            = s->value[CROOT_N_TO_REMOVE]     * N_FRAC_TO_RETRANSL;
mortality.c:	s->value[N_CROOT_TO_CWD]                += s->value[CROOT_N_TO_REMOVE]     * ( 1. - N_FRAC_TO_RETRANSL );
mortality.c:	s->value[N_TO_RESERVE]                  += s->value[N_CROOT_TO_RESERVE];
mortality.c:	s->value[N_TO_CWD]                      += s->value[N_CROOT_TO_CWD];
mortality.c://	s->value[WS_MAX] = s->value[WSX1000] * pow ( ( 1000 / (double) s->counter[N_TREE] ), s->value[THINPOWER] );
mortality.c://	s->value[WS_MAX] = s->value[WSX1000];
mortality.c://	if ( s->value[AV_STEM_MASS_KgDM] > s->value[WS_MAX])
mortality.c://		logger(g_log, "WS MAX = %f kgC/tree\n", s->value[WS_MAX]);
mortality.c://		logger(g_log, "Average Stem Mass = %f kgC stem/tree\n", s->value[AV_STEM_MASS_KgDM]);
mortality.c://		logger(g_log, "Tree Number before Mortality Function = %d\n", s->counter[N_TREE]);
mortality.c://		n = (double)s->counter[N_TREE] / 1000;
mortality.c://		x1 = 1000 * s->value[MS] * s->value[STEM_C] / (double)s->counter[N_TREE];
mortality.c://			x2 = s->value[WSX1000] * pow (n, (1 - s->value[THINPOWER]));
mortality.c://			fN = x2 - x1 * n - (1 - s->value[MS]) * s->value[STEM_C];
mortality.c://			dfN = (1 - s->value[THINPOWER]) * x2 / n - x1;
mortality.c://		s->counter[DEAD_STEMS] = (int)(s->counter[N_TREE] - 1000 * n);
mortality.c://		logger(g_log, "Dead Tree In Mortality Function = %d trees \n", s->counter[DEAD_STEMS]);
mortality.c://		if (s->counter[DEAD_STEMS] < 0)
mortality.c://			s->counter[DEAD_STEMS]	 = 0;
mortality.c://		if (s->counter[DEAD_STEMS] > s->counter[N_TREE])
mortality.c://			logger(g_log, "Dead Trees = %d\n", s->counter[DEAD_STEMS]);
mortality.c://			logger(g_log, "Live Trees = %d\n", s->counter[N_TREE]);
mortality.c://			s->counter[N_TREE] = s->counter[N_TREE] - s->counter[DEAD_STEMS];
mortality.c://			logger(g_log, "Number of Trees  after mortality = %d trees\n", s->counter[N_TREE]);
mortality.c://			s->value[BIOMASS_FOLIAGE_tDM] = s->value[BIOMASS_FOLIAGE_tDM] - s->value[MF] * s->counter[DEAD_STEMS] * (s->value[BIOMASS_FOLIAGE_tDM] / s->counter[N_TREE]);
mortality.c://			s->value[BIOMASS_ROOTS_TOT_tDM] = s->value[BIOMASS_ROOTS_TOT_tDM] - s->value[MR] * s->counter[DEAD_STEMS] * (s->value[BIOMASS_ROOTS_TOT_tDM] / s->counter[N_TREE]);
mortality.c://			s->value[BIOMASS_STEM_tDM] = s->value[BIOMASS_STEM_tDM] - s->value[MS] * s->counter[DEAD_STEMS] * (s->value[BIOMASS_STEM_tDM] / s->counter[N_TREE]);
mortality.c://			logger(g_log, "Wf after dead = %f tDM/ha\n", s->value[BIOMASS_FOLIAGE_tDM]);
mortality.c://			logger(g_log, "Wr after dead = %f tDM/ha\n", s->value[BIOMASS_ROOTS_TOT_tDM]);
mortality.c://			logger(g_log, "Ws after dead = %f tDM/ha\n", s->value[BIOMASS_STEM_tDM]);
mortality.c://		//s->value[WS_MAX] = s->value[WSX1000] * pow((1000 / (double)s->counter[N_TREE]), s->value[THINPOWER]);
mortality.c://		s->value[WS_MAX] = s->value[WSX1000];
mortality.c://		logger(g_log, "wSmax = %f KgDM/tree\n", s->value[WS_MAX]);
mortality.c://		s->value[AV_STEM_MASS_KgDM] = s->value[BIOMASS_STEM_tDM] * 1000.0 / (double)s->counter[N_TREE];
mortality.c://		logger(g_log, "AvStemMass after dead = %f Kg/tree\n", s->value[AV_STEM_MASS_KgDM]);
mortality.c:	s->value[BRANCH_C_TO_REMOVE]             += ( s->value[BRANCH_C]           * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[C_BRANCH_TO_RESERVE]            += s->value[BRANCH_C_TO_REMOVE]   * C_FRAC_TO_RETRANSL;
mortality.c:	s->value[C_BRANCH_TO_CWD]                += s->value[BRANCH_C_TO_REMOVE]   * ( 1. - C_FRAC_TO_RETRANSL );
mortality.c:	s->value[C_BRANCH_SAPWOOD_TO_CWD]       += ( s->value[BRANCH_SAPWOOD_C]   * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[C_BRANCH_HEARTWOOD_TO_CWD]     += ( s->value[BRANCH_HEARTWOOD_C] * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[C_TO_RESERVE]                   += s->value[C_BRANCH_TO_RESERVE];
mortality.c:	s->value[C_TO_CWD]                       += s->value[C_BRANCH_TO_CWD];
mortality.c:	s->value[BRANCH_N_TO_REMOVE]             += ( s->value[BRANCH_N]           * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[N_BRANCH_TO_RESERVE]            += s->value[BRANCH_N_TO_REMOVE]   * N_FRAC_TO_RETRANSL;
mortality.c:	s->value[N_BRANCH_TO_CWD]                += s->value[BRANCH_N_TO_REMOVE]   * ( 1. - N_FRAC_TO_RETRANSL );
mortality.c:	s->value[N_TO_RESERVE]                   += s->value[N_BRANCH_TO_RESERVE];
mortality.c:	s->value[N_TO_CWD]                       += s->value[N_BRANCH_TO_CWD];
mortality.c:	s->value[CROOT_C_TO_REMOVE]             += ( s->value[CROOT_C]             * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[C_CROOT_TO_RESERVE]            += s->value[CROOT_C_TO_REMOVE]     * C_FRAC_TO_RETRANSL;
mortality.c:	s->value[C_CROOT_TO_CWD]                += s->value[CROOT_C_TO_REMOVE]     * ( 1. - C_FRAC_TO_RETRANSL );;
mortality.c:	s->value[C_CROOT_SAPWOOD_TO_CWD]        += ( s->value[CROOT_SAPWOOD_C]     * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[C_CROOT_HEARTWOOD_TO_CWD]      += ( s->value[CROOT_HEARTWOOD_C]   * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[C_TO_RESERVE]                  += s->value[C_CROOT_TO_RESERVE];
mortality.c:	s->value[C_TO_CWD]                      += s->value[C_CROOT_TO_CWD];
mortality.c:	s->value[CROOT_N_TO_REMOVE]             += ( s->value[CROOT_N]             * ( 1. - self_pruning_ratio ) );
mortality.c:	s->value[N_CROOT_TO_RESERVE]            += s->value[CROOT_N_TO_REMOVE]     * N_FRAC_TO_RETRANSL;
mortality.c:	s->value[N_CROOT_TO_CWD]                += s->value[CROOT_N_TO_REMOVE]     * ( 1. - N_FRAC_TO_RETRANSL );
mortality.c:	s->value[N_TO_RESERVE]                  += s->value[N_CROOT_TO_RESERVE];
mortality.c:	s->value[N_TO_CWD]                      += s->value[N_CROOT_TO_CWD];
mortality.c:     Seedling_dead = s->counter[SEEDLINGS] * (0.0023 * pow(a->value, 2) + (0.1195 * a->value) + 1.03);
new_forest_tree_class.c:	c->heights[c->heights_count-1].value = g_settings->replanted[species_index].height;
new_forest_tree_class.c:	h->dbhs[h->dbhs_count-1].value = g_settings->replanted[species_index].avdbh;
new_forest_tree_class.c:	d->ages[d->ages_count-1].value = (int)g_settings->replanted[species_index].age;
new_forest_tree_class.c:	p = string_copy(g_settings->replanted[species_index].species);
new_forest_tree_class.c:	a->species[a->species_count-1].counter[N_TREE]  = (int)g_settings->replanted[species_index].n_tree;
new_forest_tree_class.c:	a->species[a->species_count-1].value[LAI_PROJ]  = g_settings->replanted[species_index].lai;
new_forest_tree_class.c:	c->heights[c->heights_count-1].value = g_settings->regeneration_height; //g_settings->replanted[species_index].height;
new_forest_tree_class.c:	h->dbhs[h->dbhs_count-1].value = g_settings->regeneration_avdbh; //g_settings->replanted[species_index].avdbh;
new_forest_tree_class.c:	d->ages[d->ages_count-1].value = (int)g_settings->regeneration_age; //(int)g_settings->replanted[species_index].age;
new_forest_tree_class.c:	p = string_copy(g_settings->regeneration_species); //string_copy(g_settings->replanted[species_index].species);
new_forest_tree_class.c:	a->species[a->species_count-1].counter[N_TREE]  = (int)g_settings->regeneration_n_tree; //(int)g_settings->replanted[species_index].n_tree;
new_forest_tree_class.c:	a->species[a->species_count-1].value[LAI_PROJ]  = g_settings->regeneration_lai; //g_settings->replanted[species_index].lai;
new_forest_tree_class.c:	c->heights[c->heights_count-1].value = 2.5; //g_settings->regeneration_height;
new_forest_tree_class.c:	h->dbhs[h->dbhs_count-1].value = g_settings->regeneration_avdbh;
new_forest_tree_class.c:	d->ages[d->ages_count-1].value = (int)g_settings->regeneration_age;
new_forest_tree_class.c:	p = string_copy(g_settings->regeneration_species);
new_forest_tree_class.c:	a->species[a->species_count-1].counter[N_TREE]  = (int)g_settings->regeneration_n_tree;
new_forest_tree_class.c:	a->species[a->species_count-1].value[LAI_PROJ]  = g_settings->regeneration_lai;
output.c:	, { "GPP", "gpp", "Gross Primary Production", "kg m-2 s-1", 1 }
output.c:	, { "NPP", "npp", "Net Primary Production", "kg m-2 s-1", 1 }
output.c:	, { "RA", "ra", "Autotrophic (Plant) Respiration", "kg m-2 s-1", 1 }
output.c:	, { "ET", "evap", "Total Evapotranspiration", "kg m-2 s-1", 0 }
output.c:	, { "INT", "intercept", "Evaporation From Canopy (Interception)", "kg m-2 s-1", 1 }
output.c:	, { "SOIL_EVAPO", "esoil", "Water Evaporation From Soil", "kg m-2 s-1", 0 }
output.c:	, { "TRA", "trans", "Transpiration", "kg m-2 s-1", 1 }
par:aut_respiration.c:		s->value[NIGHTLY_LEAF_MAINT_RESP]     = ( leaf_N       * MR_ref * pow(q10_tnight, exponent_tnight) * ( 1. - ( meteo_daily->daylength_sec / 86400. ) ) );
par:aut_respiration.c:		s->value[NIGHTLY_LEAF_SUN_MAINT_RESP]   = ( leaf_sun_N   * MR_ref * pow(q10_tnight, exponent_tnight) * ( 1. - ( meteo_daily->daylength_sec / 86400. ) ) );
par:aut_respiration.c:		s->value[NIGHTLY_LEAF_SHADE_MAINT_RESP] = ( leaf_shade_N * MR_ref * pow(q10_tnight, exponent_tnight) * ( 1. - ( meteo_daily->daylength_sec / 86400. ) ) );
par:aut_respiration.c:		s->value[DAILY_LEAF_MAINT_RESP]       = ( leaf_N       * MR_ref * pow(q10_tday,   exponent_tday)   * ( meteo_daily->daylength_sec / 86400. ) ) * light_inhib;
par:aut_respiration.c:		s->value[DAILY_LEAF_SUN_MAINT_RESP]   = ( leaf_sun_N   * MR_ref * pow(q10_tday,   exponent_tday)   * ( meteo_daily->daylength_sec / 86400. ) ) * light_inhib_sun;
par:aut_respiration.c:		s->value[DAILY_LEAF_SHADE_MAINT_RESP] = ( leaf_shade_N * MR_ref * pow(q10_tday,   exponent_tday)   * ( meteo_daily->daylength_sec / 86400. ) ) * light_inhib_shade;
par:aut_respiration.c:		s->value[DAILY_LEAF_MAINT_RESP]       = ( ( s->value[NIGHTLY_LEAF_MAINT_RESP]       / ( 86400. - meteo_daily->daylength_sec ) ) * meteo_daily->daylength_sec ) * light_inhib;
par:aut_respiration.c:		s->value[DAILY_LEAF_SUN_MAINT_RESP]   = ( ( s->value[NIGHTLY_LEAF_SUN_MAINT_RESP]   / ( 86400. - meteo_daily->daylength_sec ) ) * meteo_daily->daylength_sec ) * light_inhib_sun;
par:aut_respiration.c:		s->value[DAILY_LEAF_SHADE_MAINT_RESP] = ( ( s->value[NIGHTLY_LEAF_SHADE_MAINT_RESP] / ( 86400. - meteo_daily->daylength_sec ) ) * meteo_daily->daylength_sec ) * light_inhib_shade;
par:aut_respiration.c:			s->value[DAILY_LEAF_MAINT_RESP]       *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tday   - Q10_temp ) ) );
par:aut_respiration.c:			s->value[DAILY_LEAF_SUN_MAINT_RESP]   *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tday   - Q10_temp ) ) );
par:aut_respiration.c:			s->value[DAILY_LEAF_SHADE_MAINT_RESP] *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tday   - Q10_temp ) ) );
par:aut_respiration.c:			s->value[NIGHTLY_LEAF_MAINT_RESP]     *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tnight - Q10_temp ) ) );
par:aut_respiration.c:			s->value[FROOT_MAINT_RESP]            *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tsoil - Q10_temp ) ) );
par:aut_respiration.c:			s->value[CROOT_MAINT_RESP]            *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tsoil - Q10_temp ) ) );
par:aut_respiration.c:			s->value[STEM_MAINT_RESP]             *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tavg - Q10_temp ) ) );
par:aut_respiration.c:			s->value[BRANCH_MAINT_RESP]           *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_avg_tavg - Q10_temp ) ) );
par:aut_respiration.c:			s->value[DAILY_LEAF_MAINT_RESP]         *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tday   - Q10_temp ) ) );
par:aut_respiration.c:			s->value[DAILY_LEAF_SUN_MAINT_RESP]     *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tday   - Q10_temp ) ) );
par:aut_respiration.c:			s->value[DAILY_LEAF_SHADE_MAINT_RESP]   *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tday   - Q10_temp ) ) );
par:aut_respiration.c:			s->value[NIGHTLY_LEAF_MAINT_RESP]       *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tnight - Q10_temp ) ) );
par:aut_respiration.c:			s->value[NIGHTLY_LEAF_SUN_MAINT_RESP]   *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tnight - Q10_temp ) ) );
par:aut_respiration.c:			s->value[NIGHTLY_LEAF_SHADE_MAINT_RESP] *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tnight - Q10_temp ) ) );
par:aut_respiration.c:			s->value[FROOT_MAINT_RESP]            *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tsoil - Q10_temp ) ) );
par:aut_respiration.c:			s->value[CROOT_MAINT_RESP]            *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tsoil - Q10_temp ) ) );
par:aut_respiration.c:			s->value[STEM_MAINT_RESP]             *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tavg - Q10_temp ) ) );
par:aut_respiration.c:			s->value[BRANCH_MAINT_RESP]           *= pow ( 10., ( acc_const * ( meteo_daily->ten_day_weighted_avg_tavg - Q10_temp ) ) );
par:canopy_evapotranspiration.c:				s->value[CANOPY_FRAC_DAY_TRANSP] = transp_daylength_sec / meteo_daily->daylength_sec;
par:canopy_evapotranspiration.c:				s->value[CANOPY_FRAC_DAY_TRANSP] = subl_melt_daylength_sec / meteo_daily->daylength_sec;
par:canopy_interception.c:	if( ( meteo_daily->prcp > 0.) && ( s->value[LAI_PROJ] > 0. ) && ( ! s->value[CANOPY_WATER] ) && ( ! s->value[CANOPY_SNOW] ) )
par:canopy_interception.c:			s->value[CANOPY_INT]      = s->value[INT_COEFF] * meteo_daily->rain * ( 1. - exp(-0.5 * s->value[LAI_PROJ])) * s->value[DAILY_CANOPY_COVER_PROJ];
par:canopy_interception.c:			s->value[CANOPY_INT_RAIN] = MIN( Int_max_rain , meteo_daily->rain );
par:canopy_interception.c:				Int_max_rain = 0.284 + 0.092 * s->value[LAI_PROJ] * ( 1. - exp ( -0.231 * meteo_daily->rain ) );
par:canopy_interception.c:				s->value[CANOPY_INT_RAIN] = MIN( Int_max_rain , meteo_daily->rain );
par:canopy_interception.c:			CHECK_CONDITION( s->value[CANOPY_INT_RAIN], > , meteo_daily->rain );
par:canopy_interception.c:			//s->value[CANOPY_INT_SNOW] = s->value[CANOPY_SNOW] + 0.7 * ( Int_max_snow - s->value[CANOPY_SNOW] ) * (1. - exp( - ( meteo_daily->snow / Int_max_snow ) ) ) * s->value[DAILY_CANOPY_COVER_PROJ];
par:canopy_interception.c:			s->value[CANOPY_INT_SNOW] = s->value[CANOPY_SNOW] + 0.7 * ( Int_max_snow - s->value[CANOPY_SNOW] ) * (1. - exp( - ( meteo_daily->snow / Int_max_snow ) ) ) ;
par:canopy_interception.c:			CHECK_CONDITION(s->value[CANOPY_INT_SNOW], > , meteo_daily->snow);
par:canopy_radiation_lw_band.c:	s->value[LW_RAD_TRANSM] = (((1. - LW_emis_canopy_frac) * meteo_daily->atm_lw_downward_W) +
par:canopy_radiation_lw_band.c:			(meteo_daily->atm_lw_downward_W * (1. - /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_PROJ]));
par:canopy_radiation_lw_band.c:	c->net_lw_rad_for_soil = c->soil_long_wave_emitted - (EMSOIL * s->value[LW_RAD_TRANSM]) - (EMSOIL * meteo_daily->atm_lw_downward_W);
par:canopy_radiation_lw_band.c://	s->value[LW_RAD_ABS] = LW_abs_canopy_frac * (meteo_daily->atm_lw_downward_W + lw_soil_emit - (2. * s->value[LW_RAD_EMIT]));
par:canopy_radiation_lw_band.c://	s->value[LW_RAD_ABS] = LW_abs_canopy_frac *(meteo_daily->atm_lw_downward_W + lw_soil_emit - (2. * s->value[LW_RAD_EMIT])) * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP];
par:canopy_radiation_lw_band.c://	lw_atm_temp = (lw_atm_trasm_canopy_to_soil * /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]) + (meteo_daily->atm_lw_downward_W * (1. - /*leaf_cell_cover_eff*/ s->value[CANOPY_COVER_EXP]));
par:canopy_radiation_sw_band.c:	s->value[PAR]             = meteo_daily->par  * s->value[DAILY_CANOPY_COVER_PROJ];
par:canopy_radiation_sw_band.c:	s->value[SW_RAD]              = meteo_daily->sw_downward_W * s->value[DAILY_CANOPY_COVER_PROJ];
par:canopy_radiation_sw_band.c:	s->value[NET_RAD]              = meteo_daily->Net_rad_threePG * s->value[DAILY_CANOPY_COVER_PROJ];
par:canopy_temperature.c:				((s->value[NET_RAD] * ra)/(meteo_daily->rho_air * CP)) *
par:dendrometry.c:	//		pot_par = meteo_daily->incoming_par - (meteo_daily->incoming_par * Light_refl_par_frac * s->value[DAILY_CANOPY_COVER_EXP]);
par:heat_fluxes.c:	s->value[CANOPY_LATENT_HEAT] = s->value[CANOPY_EVAPO_TRANSP] * meteo_daily->lh_vap / 86400;
par:modifiers.c:		if ( ( meteo_daily->tavg <= s->value[GROWTHTMIN]) || (meteo_daily->tavg >= s->value[GROWTHTMAX] ) )
par:modifiers.c:			s->value[F_T] = ( ( meteo_daily->tavg - s->value[GROWTHTMIN]) / (s->value[GROWTHTOPT] - s->value[GROWTHTMIN] ) ) *
par:modifiers.c:					pow ( ( ( s->value[GROWTHTMAX] - meteo_daily->tavg) / (s->value[GROWTHTMAX] - s->value[GROWTHTOPT] ) ),
par:modifiers.c:		if ( ( meteo_daily->tday <= s->value[GROWTHTMIN]) || (meteo_daily->tday >= s->value[GROWTHTMAX] ) )
par:modifiers.c:			s->value[F_T] = ( ( meteo_daily->tday - s->value[GROWTHTMIN]) / (s->value[GROWTHTOPT] - s->value[GROWTHTMIN] ) ) *
par:modifiers.c:					pow ( ( ( s->value[GROWTHTMAX] - meteo_daily->tday) / (s->value[GROWTHTMAX] - s->value[GROWTHTOPT] ) ),
par:modifiers.c:	s->value[F_VPD] = exp ( - s->value[COEFFCOND] * meteo_daily->vpd );
par:modifiers.c:		s->value[F_VPD] = (vpd_close - meteo_daily->vpd) / (vpd_close - vpd_open);
par:phenology.c:						if ((meteo_daily->thermic_sum >= s->value[GROWTHSTART] && month <= 6) ||
par:phenology.c:		// old if ( meteo_daily->thermic_sum >= s->value[GROWTHSTART] && s->value[LAI] < s->value[PEAK_LAI] )
par:photosynthesis2.c:		cond_corr                    = s->value[LEAF_SUN_CONDUCTANCE] * 1e6 / ( GCtoGW * Rgas * ( meteo_daily->tday + TempAbs ) );
par:photosynthesis2.c:		s->value[ASSIMILATION_SUN]   = psn * s->value[LAI_SUN_PROJ] * meteo_daily->daylength_sec * GC_MOL * 1e-6;
par:photosynthesis2.c:		cond_corr                    = s->value[LEAF_SHADE_CONDUCTANCE] * 1e6 / ( GCtoGW * Rgas * ( meteo_daily->tday + TempAbs ) );
par:photosynthesis2.c:		s->value[ASSIMILATION_SHADE] = psn * s->value[LAI_SHADE_PROJ] * meteo_daily->daylength_sec * GC_MOL * 1e-6;
par:photosynthesis3.c:		s->value[ASSIMILATION_SUN]   = psn * s->value[LAI_SUN_PROJ] * meteo_daily->daylength_sec * GC_MOL * 1e-6;
par:photosynthesis3.c:		s->value[ASSIMILATION_SHADE] = psn * s->value[LAI_SHADE_PROJ] * meteo_daily->daylength_sec * GC_MOL * 1e-6;
par:photosynthesis3.c:		s->value[STOMATAL_SUN_CONDUCTANCE]  = gs / 1e3 * ( GCtoGW * Rgas * ( meteo_daily->tday + TempAbs ) );
par:photosynthesis3.c:		s->value[STOMATAL_SHADE_CONDUCTANCE] = gs / 1e3 * ( GCtoGW * Rgas * ( meteo_daily->tday + TempAbs ) );
par:recruitment.c:	EstabRate = (s->value[GERMCAPACITY] * (1 - exp((-5) * (1 - meteo_daily->par))) * (1 - meteo_daily->par)) / s->counter[N_TREE];
par:regeneration.c:   if (meteo_daily->spring_thermic_sum >= s->value[GDD_SEED]) {
par:regeneration.c:    if ( meteo_daily->thermic_sum >= s->value[GDD_SEED] &&  meteo_daily->sw_downward_W >= 0. && c->asw >= 0. && c->psi < min_psi) {
peak_lai.c:	s->value[PEAK_LAI_PROJ] = ( ( s->value[SAPWOOD_AREA] / 10000. ) * s->value[SAP_LEAF]) / s->value[CROWN_AREA_PROJ];
peak_lai.c:	if (s->value[PEAK_LAI_PROJ] > MAX_PEAK_LAI_PROJ) s->value[PEAK_LAI_PROJ] = MAX_PEAK_LAI_PROJ;
peak_lai.c:	s->value[MAX_LEAF_C]   = ( ( s->value[PEAK_LAI_PROJ] / s->value[SLA_AVG] ) / 1e3 ) * ( s->value[CANOPY_COVER_PROJ] * g_settings->sizeCell );
peak_lai.c:	s->value[MAX_FROOT_C]  = s->value[MAX_LEAF_C] * s->value[FINE_ROOT_LEAF];
peak_lai.c:	s->value[PEAK_LAI_EXP] = ( ( s->value[SAPWOOD_AREA] / 10000. ) * s->value[SAP_LEAF]) / s->value[CROWN_AREA_PROJ];
peak_lai.c:	if ((s->value[PHENOLOGY] == 1.1 || s->value[PHENOLOGY] == 1.2) && ( !day && !month && !years ))
peak_lai.c:		if ((s->value[LAI_PROJ] > s->value[PEAK_LAI_PROJ]) || (s->value[LEAF_C] > s->value[MAX_LEAF_C]))
peak_lai.c:			s->value[LAI_PROJ] = s->value[PEAK_LAI_PROJ];
peak_lai.c:			s->value[LEAF_C]   = s->value[MAX_LEAF_C];
peak_lai.c:			s->value[FROOT_C]  = s->value[MAX_FROOT_C];
phenology.c:					mdl = s->value[MINDAYLENGTH] ;
phenology.c:					if (s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2)
phenology.c:						s->counter[DAYS_LEAFFALL] = (int)(s->value[LEAF_FALL_FRAC_GROWING] * s->counter[DAY_VEG_FOR_LEAF_FALL]);
phenology.c:						logger(g_debug_log, "-days of leaf fall for %s = %d day\n", c->heights[height].dbhs[dbh].ages[age].species[species].name, s->counter[DAYS_LEAFFALL]);
phenology.c:						if ((meteo_daily->thermic_sum >= s->value[GROWTHSTART] && month <= 6) ||
phenology.c:							s->counter[VEG_UNVEG] = 1;
phenology.c:							if ( ! s->counter[FIRST_VEG_DAYS] )
phenology.c:								s->counter[FIRST_VEG_DAYS] = c->doy;
phenology.c:							logger(g_debug_log, "-%s is in veg period\n", s->name);
phenology.c:								s->counter[LEAF_FALL_COUNTER] += 1;
phenology.c:								if(s->counter[LEAF_FALL_COUNTER] <= (int)s->counter[DAYS_LEAFFALL])
phenology.c:									s->counter[VEG_UNVEG] = 1;
phenology.c:									s->counter[VEG_UNVEG] = 0;
phenology.c:								s->counter[VEG_UNVEG] = 0;
phenology.c:								logger(g_debug_log, "-%s is in un-veg period\n", s->name);
phenology.c:						s->counter[VEG_UNVEG] = 1;
phenology.c:						logger(g_debug_log, "-%s is in veg period\n", s->name);
phenology.c:	logger(g_debug_log, "\n--DAILY PHENOLOGY for SPECIES %s phenology = %.1f--\n", s->name, s->value[PHENOLOGY]);
phenology.c:	logger(g_debug_log, "-LAI_PROJ = %g\n-PEAK_LAI_PROJ = %g\n", s->value[LAI_PROJ], s->value[PEAK_LAI_PROJ]);
phenology.c:	if (s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2)
phenology.c:		if (s->counter[VEG_UNVEG] == 1 )
phenology.c:			if (s->counter[VEG_DAYS] <= ((int)s->value[BUD_BURST]))
phenology.c:				if (s->value[LAI_PROJ] < s->value[PEAK_LAI_PROJ])
phenology.c:					s->phenology_phase = 1;
phenology.c:					s->phenology_phase = 2;
phenology.c:					s->phenology_phase = 2;
phenology.c:				mdl = s->value[MINDAYLENGTH] ;
phenology.c:						s->phenology_phase = 2;
phenology.c:						s->phenology_phase = 3;
phenology.c:			s->phenology_phase = 0;
phenology.c:		// old if ( meteo_daily->thermic_sum >= s->value[GROWTHSTART] && s->value[LAI] < s->value[PEAK_LAI] )
phenology.c:		if ( s->value[LAI_PROJ] < s->value[PEAK_LAI_PROJ] && ( ( c->lat > 0 && month < 5 ) ||
phenology.c:			s->phenology_phase = 1;
phenology.c:			s->phenology_phase = 2;
phenology.c:	logger(g_debug_log, "phenology phase = %d\n", s->phenology_phase);
phenology.c:	if ( s->counter[VEG_UNVEG] == 1 )
phenology.c:		logger(g_debug_log, "\n\n*****VEGETATIVE PERIOD FOR %s SPECIES*****\n", s->name );
phenology.c:		++s->counter[VEG_DAYS];
phenology.c:		logger(g_debug_log, "VEG_DAYS = %d \n", s->counter[VEG_DAYS]);
phenology.c:		logger(g_debug_log, "\n\n*****UN-VEGETATIVE PERIOD FOR %s SPECIES*****\n", s->name );
phenology.c:		s->counter[VEG_DAYS] = 0;
phenology.c:		logger(g_debug_log, "VEG_DAYS = %d \n", s->counter[VEG_DAYS]);
phenology.c://	logger(g_debug_log, "--GET_DAILY PHENOLOGY for SPECIES %s phenology = %.1f--\n", s->name, s->value[PHENOLOGY]);
phenology.c://	if (s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2)
phenology.c://		if (s->counter[VEG_UNVEG] == 1 )
phenology.c://			if (s->counter[VEG_DAYS] <= s->value[BUD_BURST])
phenology.c://				if (s->value[LAI] < (s->value[PEAK_LAI] * 0.5))
phenology.c://					s->phenology_phase = 1;
phenology.c://				else if (s->value[LAI] > (s->value[PEAK_LAI] * 0.5)	&& s->value[LAI] < s->value[PEAK_LAI])
phenology.c://					logger(g_debug_log, "LAI = %f\n", s->value[LAI]);
phenology.c://					logger(g_debug_log, "PEAK LAI = %f\n", s->value[PEAK_LAI]);
phenology.c://					s->phenology_phase = 2;
phenology.c://					s->phenology_phase = 4;
phenology.c://				if (s->value[LAI] <= (s->value[PEAK_LAI] * 0.5))
phenology.c://					s->phenology_phase = 2;
phenology.c://				if (s->value[LAI] > (s->value[PEAK_LAI] * 0.5)&& s->value[LAI] < s->value[PEAK_LAI])
phenology.c://					s->phenology_phase = 3;
phenology.c://				if(fabs (s->value[LAI] - s->value[PEAK_LAI]) < 0.1)
phenology.c://					s->phenology_phase = 4;
phenology.c://				if (met[month].d[day].daylength < s->value[MINDAYLENGTH] && month+1 > 6 /*c->abscission_daylength*/)
phenology.c://					s->phenology_phase = 5;
phenology.c://			s->phenology_phase = 0;
phenology.c://		if (met[month].d[day].thermic_sum >= s->value[GROWTHSTART] && s->value[LAI] < s->value[PEAK_LAI]																										   && month < 6)
phenology.c://			s->phenology_phase = 1;
phenology.c://			s->counter[LEAF_FALL_COUNTER] = 0;
phenology.c://			s->phenology_phase = 2;
phenology.c://			if (s->counter[LEAF_FALL_COUNTER] == 0)
phenology.c://				s->counter[LEAF_FALL_COUNTER] = 1;
phenology.c://			else if (s->counter[LEAF_FALL_COUNTER] == 1)
phenology.c://				s->counter[LEAF_FALL_COUNTER] = 2;
phenology.c://			s->phenology_phase = 1;
phenology.c://			s->counter[LEAF_FALL_COUNTER] = 0;
phenology.c://			s->value[DAILY_LEAVES_BIOMASS_TO_REMOVE] = 0.0;
phenology.c://	logger(g_debug_log, "phenology phase = %d\n", s->phenology_phase);
photosynthesis2.c:	if ( s->value[LEAF_SUN_N] > 0. )
photosynthesis2.c:		cond_corr                    = s->value[LEAF_SUN_CONDUCTANCE] * 1e6 / ( GCtoGW * Rgas * ( meteo_daily->tday + TempAbs ) );
photosynthesis2.c:		leafN                        = ( s->value[LEAF_SUN_N] * 1e6 / g_settings->sizeCell ) / s->value[LAI_SUN_PROJ];
photosynthesis2.c:		leaf_day_mresp               = ( s->value[DAILY_LEAF_SUN_MAINT_RESP] / ( 86400. * GC_MOL * 1e-6 ) ) / s->value[LAI_SUN_PROJ];
photosynthesis2.c:		par_abs                      = ( s->value[APAR_SUN] * 1e6 / 86400. ) / s->value[LAI_SUN_PROJ];
photosynthesis2.c:		s->value[ASSIMILATION_SUN]   = psn * s->value[LAI_SUN_PROJ] * meteo_daily->daylength_sec * GC_MOL * 1e-6;
photosynthesis2.c:		if ( psn <= 0 ) s->value[ASSIMILATION_SUN] = 0.;
photosynthesis2.c:	if ( s->value[LEAF_SHADE_N] > 0. )
photosynthesis2.c:		cond_corr                    = s->value[LEAF_SHADE_CONDUCTANCE] * 1e6 / ( GCtoGW * Rgas * ( meteo_daily->tday + TempAbs ) );
photosynthesis2.c:		leafN                        = ( s->value[LEAF_SHADE_N] * 1e6 / g_settings->sizeCell ) / s->value[LAI_SHADE_PROJ];
photosynthesis2.c:		leaf_day_mresp               = ( s->value[DAILY_LEAF_SHADE_MAINT_RESP] / ( 86400. * GC_MOL * 1e-6 ) ) / s->value[LAI_SHADE_PROJ];
photosynthesis2.c:		par_abs                      = ( s->value[APAR_SHADE] * 1e6 / 86400. ) / s->value[LAI_SHADE_PROJ];
photosynthesis2.c:		s->value[ASSIMILATION_SHADE] = psn * s->value[LAI_SHADE_PROJ] * meteo_daily->daylength_sec * GC_MOL * 1e-6;
photosynthesis2.c:		if ( psn <= 0 ) s->value[ASSIMILATION_SHADE] = 0.;
photosynthesis2.c:	s->value[ASSIMILATION] = s->value[ASSIMILATION_SUN] + s->value[ASSIMILATION_SHADE];
photosynthesis2.c:	CHECK_CONDITION( s->value[ASSIMILATION] , <, 0.0);
photosynthesis2.c:	s->value[GPP_SUN]                     = s->value[ASSIMILATION_SUN]   + s->value[DAILY_LEAF_SUN_MAINT_RESP];
photosynthesis2.c:	s->value[GPP_SHADE]                   = s->value[ASSIMILATION_SHADE] + s->value[DAILY_LEAF_SHADE_MAINT_RESP];
photosynthesis2.c:	if (s->value[GPP_SUN]  < 0.) s->value[GPP_SUN]   = 0.;
photosynthesis2.c:	if (s->value[GPP_SHADE]< 0.) s->value[GPP_SHADE] = 0.;
photosynthesis2.c:	s->value[GPP]                         = s->value[GPP_SUN] + s->value[GPP_SHADE];
photosynthesis2.c:	CHECK_CONDITION( s->value[GPP]       , <, 0.0);
photosynthesis2.c:	CHECK_CONDITION( s->value[GPP_SUN]   , <, 0.0);
photosynthesis2.c:	CHECK_CONDITION( s->value[GPP_SHADE] , <, 0.0);
photosynthesis2.c:	s->value[GPP_tC]                      = s->value[GPP] / 1e6 * g_settings->sizeCell ;
photosynthesis2.c:	s->value[MONTHLY_ASSIMILATION]       += s->value[ASSIMILATION];
photosynthesis2.c:	s->value[MONTHLY_ASSIMILATION_SUN]   += s->value[ASSIMILATION_SUN];
photosynthesis2.c:	s->value[MONTHLY_ASSIMILATION_SHADE] += s->value[ASSIMILATION_SHADE];
photosynthesis2.c:	s->value[YEARLY_ASSIMILATION]        += s->value[ASSIMILATION];
photosynthesis2.c:	s->value[YEARLY_ASSIMILATION_SUN]    += s->value[ASSIMILATION_SUN];
photosynthesis2.c:	s->value[YEARLY_ASSIMILATION_SHADE]  += s->value[ASSIMILATION_SHADE];
photosynthesis2.c:	s->value[MONTHLY_GPP]                += s->value[GPP];
photosynthesis2.c:	s->value[MONTHLY_GPP_SUN]            += s->value[GPP_SUN];
photosynthesis2.c:	s->value[MONTHLY_GPP_SHADE]          += s->value[GPP_SHADE];
photosynthesis2.c:	s->value[YEARLY_GPP]                 += s->value[GPP];
photosynthesis2.c:	s->value[YEARLY_GPP_SUN]             += s->value[GPP_SUN];
photosynthesis2.c:	s->value[YEARLY_GPP_SHADE]           += s->value[GPP_SHADE];
photosynthesis2.c:	c->daily_gpp                         += s->value[GPP];
photosynthesis2.c:	c->monthly_gpp                       += s->value[GPP];
photosynthesis2.c:	c->annual_gpp                        += s->value[GPP];
photosynthesis2.c:	c->daily_ass                         += s->value[ASSIMILATION];
photosynthesis2.c:	c->monthly_ass                       += s->value[ASSIMILATION];
photosynthesis2.c:	c->annual_ass                        += s->value[ASSIMILATION];
photosynthesis2.c:	c->daily_gpp_tC                      += s->value[GPP_tC];
photosynthesis2.c:	c->monthly_gpp_tC                    += s->value[GPP_tC];
photosynthesis2.c:	c->annual_gpp_tC                     += s->value[GPP_tC];
photosynthesis2.c:	if ( s->value[GPP] > 0. )
photosynthesis2.c:		++s->counter[YEARLY_VEG_DAYS];
photosynthesis2.c:	if ( s->value[ASSIMILATION]       > 0. ) s->value[ALPHA_EFF]          = ( s->value[ASSIMILATION]       / GC_MOL ) / s->value[PAR];
photosynthesis2.c:	else                                         s->value[ALPHA_EFF]          = 0.;
photosynthesis2.c:	if ( s->value[ASSIMILATION_SUN]   > 0. ) s->value[ALPHA_EFF_SUN]      = ( s->value[ASSIMILATION_SUN]   / GC_MOL ) / s->value[PAR_SUN];
photosynthesis2.c:	else                                         s->value[ALPHA_EFF_SUN]      = 0.;
photosynthesis2.c:	if ( s->value[ASSIMILATION_SHADE] > 0. ) s->value[ALPHA_EFF_SHADE]    = ( s->value[ASSIMILATION_SHADE] / GC_MOL ) / s->value[PAR_SHADE];
photosynthesis2.c:	else                                         s->value[ALPHA_EFF_SHADE]    = 0.;
photosynthesis2.c:	const double Kc25          = 404;    /* (ubar or umol mol-1) Michaelis-Menten const carboxylase, 25 deg C  Badger and Collatz value*/
photosynthesis2.c:	const double Ko25          = 248000; /* (ubar or umol mol-1) Michaelis-Menten const oxygenase, 25 deg C 248 Badger and Collatz, 278.4 Bernacchi et al., 2001 */
photosynthesis2.c:	const double Kc25          = 404.9;  /* (ubar or umol mol-1) Michaelis-Menten const carboxylase, 25 deg C  Badger and Collatz value*/
photosynthesis2.c:	const double Ko25          = 278400; /* (ubar or umol mol-1) Michaelis-Menten const oxygenase, 25 deg C 248 Badger and Collatz, 278.4 Bernacchi et al., 2001 */
photosynthesis2.c:	const double act25         = 60;     /* (umol CO2 g-1 Rubisco s-1) specific activity of Rubisco at 25 °C */
photosynthesis2.c:	double Kc;                            /* (Pa) Michaelis-Menten constant for carboxylase reaction */
photosynthesis2.c:	double Ko;                            /* (Pa) Michaelis-Menten constant for oxygenase reaction */
photosynthesis2.c:	double Kmfn;                          /* (Pa) effective Michaelis-Menten coefficient of Rubisco activity */
photosynthesis2.c:	/* effective Michaelis-Menten coefficient of Rubisco activity */
photosynthesis2.c:	Vcmax = /*s->value[VCMAX]*/ test_Vcmax;
photosynthesis2.c:	Vcmax25   = leafN * s->value[N_RUBISCO] * fnr * act25 /** s->value[F_NUTR]*/;
photosynthesis2.c:	if ( g_settings->Photo_accl )
photosynthesis2.c:	Vcmax     = Vcmax25 * kT_Vcmax * s->value[F_SW];
photosynthesis2.c:	Jmax = /*s->value[JMAX]*/test_Jmax;
photosynthesis2.c:	if ( g_settings->Photo_accl )
photosynthesis2.c:	if ( g_settings->Photo_accl )
photosynthesis2.c:		s->value[A_SUN]                  = A;
photosynthesis2.c:		if ( Av < Aj )s->value[Av_SUN]   = Av;
photosynthesis2.c:		else          s->value[Aj_SUN]   = Aj;
photosynthesis2.c:		s->value[YEARLY_A_SUN]    += A;
photosynthesis2.c:		s->value[YEARLY_Av_SUN]   += s->value[Av_SUN];
photosynthesis2.c:		s->value[YEARLY_Aj_SUN]   += s->value[Aj_SUN];
photosynthesis2.c:		CHECK_CONDITION ( fabs ( s->value[YEARLY_A_SUN] - ( s->value[YEARLY_Av_SUN] + s->value[YEARLY_Aj_SUN] ) ) , > , eps );
photosynthesis2.c:		s->value[A_SHADE]                  = A;
photosynthesis2.c:		if ( Av < Aj )s->value[Av_SHADE]   = Av;
photosynthesis2.c:		else          s->value[Aj_SHADE]   = Aj;
photosynthesis2.c:		s->value[YEARLY_A_SHADE]    += A;
photosynthesis2.c:		s->value[YEARLY_Av_SHADE]   += s->value[Av_SHADE];
photosynthesis2.c:		s->value[YEARLY_Aj_SHADE]   += s->value[Aj_SHADE];
photosynthesis2.c:		CHECK_CONDITION ( fabs ( s->value[YEARLY_A_SHADE] - ( s->value[YEARLY_Av_SHADE] + s->value[YEARLY_Aj_SHADE] ) ) , > , eps );
photosynthesis2.c:	s->value[A_TOT]  = s->value[A_SUN]  + s->value[A_SHADE];
photosynthesis2.c:	s->value[Av_TOT] = s->value[Av_SUN] + s->value[Av_SHADE];
photosynthesis2.c:	s->value[Aj_TOT] = s->value[Aj_SUN] + s->value[Aj_SHADE];
photosynthesis2.c:	s->value[YEARLY_A_TOT]  += s->value[A_SUN]  + s->value[A_SHADE];
photosynthesis2.c:	s->value[YEARLY_Av_TOT] += s->value[Av_SUN] + s->value[Av_SHADE];
photosynthesis2.c:	s->value[YEARLY_Aj_TOT] += s->value[Aj_SUN] + s->value[Aj_SHADE];
photosynthesis2.c:	CHECK_CONDITION ( fabs ( s->value[YEARLY_A_TOT] - ( s->value[YEARLY_Av_TOT] + s->value[YEARLY_Aj_TOT] ) ) , > , eps );
photosynthesis3.c:	if ( s->value[LEAF_SUN_N] > 0. )
photosynthesis3.c:		leafN                        = ( s->value[LEAF_SUN_N] * 1e6 / g_settings->sizeCell ) / s->value[LAI_SUN_PROJ];
photosynthesis3.c:		leaf_day_mresp               = ( s->value[DAILY_LEAF_SUN_MAINT_RESP] / ( 86400. * GC_MOL * 1e-6 ) ) / s->value[LAI_SUN_PROJ];
photosynthesis3.c:		par_abs                      = ( s->value[APAR_SUN] * 1e6 / 86400. ) / s->value[LAI_SUN_PROJ];
photosynthesis3.c:		s->value[ASSIMILATION_SUN]   = psn * s->value[LAI_SUN_PROJ] * meteo_daily->daylength_sec * GC_MOL * 1e-6;
photosynthesis3.c:		if ( psn <= 0 ) s->value[ASSIMILATION_SUN] = 0.;
photosynthesis3.c:	if ( s->value[LEAF_SHADE_N] > 0. )
photosynthesis3.c:		leafN                        = ( s->value[LEAF_SHADE_N] * 1e6 / g_settings->sizeCell ) / s->value[LAI_SHADE_PROJ];
photosynthesis3.c:		leaf_day_mresp               = ( s->value[DAILY_LEAF_SHADE_MAINT_RESP] / ( 86400. * GC_MOL * 1e-6 ) ) / s->value[LAI_SHADE_PROJ];
photosynthesis3.c:		par_abs                      = ( s->value[APAR_SHADE] * 1e6 / 86400. ) / s->value[LAI_SHADE_PROJ];
photosynthesis3.c:		s->value[ASSIMILATION_SHADE] = psn * s->value[LAI_SHADE_PROJ] * meteo_daily->daylength_sec * GC_MOL * 1e-6;
photosynthesis3.c:		if ( psn <= 0 ) s->value[ASSIMILATION_SHADE] = 0.;
photosynthesis3.c:	s->value[ASSIMILATION] = s->value[ASSIMILATION_SUN] + s->value[ASSIMILATION_SHADE];
photosynthesis3.c:	CHECK_CONDITION( s->value[ASSIMILATION] , <, 0.0);
photosynthesis3.c:	s->value[GPP_SUN]                     = s->value[ASSIMILATION_SUN]   + s->value[DAILY_LEAF_SUN_MAINT_RESP];
photosynthesis3.c:	s->value[GPP_SHADE]                   = s->value[ASSIMILATION_SHADE] + s->value[DAILY_LEAF_SHADE_MAINT_RESP];
photosynthesis3.c:	if (s->value[GPP_SUN]  < 0.) s->value[GPP_SUN]   = 0.;
photosynthesis3.c:	if (s->value[GPP_SHADE]< 0.) s->value[GPP_SHADE] = 0.;
photosynthesis3.c:	s->value[GPP]                         = s->value[GPP_SUN] + s->value[GPP_SHADE];
photosynthesis3.c:	CHECK_CONDITION( s->value[GPP]       , <, 0.0);
photosynthesis3.c:	CHECK_CONDITION( s->value[GPP_SUN]   , <, 0.0);
photosynthesis3.c:	CHECK_CONDITION( s->value[GPP_SHADE] , <, 0.0);
photosynthesis3.c:	s->value[GPP_tC]                      = s->value[GPP] / 1e6 * g_settings->sizeCell ;
photosynthesis3.c:	s->value[MONTHLY_ASSIMILATION]       += s->value[ASSIMILATION];
photosynthesis3.c:	s->value[MONTHLY_ASSIMILATION_SUN]   += s->value[ASSIMILATION_SUN];
photosynthesis3.c:	s->value[MONTHLY_ASSIMILATION_SHADE] += s->value[ASSIMILATION_SHADE];
photosynthesis3.c:	s->value[YEARLY_ASSIMILATION]        += s->value[ASSIMILATION];
photosynthesis3.c:	s->value[YEARLY_ASSIMILATION_SUN]    += s->value[ASSIMILATION_SUN];
photosynthesis3.c:	s->value[YEARLY_ASSIMILATION_SHADE]  += s->value[ASSIMILATION_SHADE];
photosynthesis3.c:	s->value[MONTHLY_GPP]                += s->value[GPP];
photosynthesis3.c:	s->value[MONTHLY_GPP_SUN]            += s->value[GPP_SUN];
photosynthesis3.c:	s->value[MONTHLY_GPP_SHADE]          += s->value[GPP_SHADE];
photosynthesis3.c:	s->value[YEARLY_GPP]                 += s->value[GPP];
photosynthesis3.c:	s->value[YEARLY_GPP_SUN]             += s->value[GPP_SUN];
photosynthesis3.c:	s->value[YEARLY_GPP_SHADE]           += s->value[GPP_SHADE];
photosynthesis3.c:	c->daily_gpp                         += s->value[GPP];
photosynthesis3.c:	c->monthly_gpp                       += s->value[GPP];
photosynthesis3.c:	c->annual_gpp                        += s->value[GPP];
photosynthesis3.c:	c->daily_ass                         += s->value[ASSIMILATION];
photosynthesis3.c:	c->monthly_ass                       += s->value[ASSIMILATION];
photosynthesis3.c:	c->annual_ass                        += s->value[ASSIMILATION];
photosynthesis3.c:	c->daily_gpp_tC                      += s->value[GPP_tC];
photosynthesis3.c:	c->monthly_gpp_tC                    += s->value[GPP_tC];
photosynthesis3.c:	c->annual_gpp_tC                     += s->value[GPP_tC];
photosynthesis3.c:	if ( s->value[GPP] > 0. )
photosynthesis3.c:		++s->counter[YEARLY_VEG_DAYS];
photosynthesis3.c:	if ( s->value[ASSIMILATION]       > 0. ) s->value[ALPHA_EFF]          = ( s->value[ASSIMILATION]       / GC_MOL ) / s->value[PAR];
photosynthesis3.c:	else                                         s->value[ALPHA_EFF]          = 0.;
photosynthesis3.c:	if ( s->value[ASSIMILATION_SUN]   > 0. ) s->value[ALPHA_EFF_SUN]      = ( s->value[ASSIMILATION_SUN]   / GC_MOL ) / s->value[PAR_SUN];
photosynthesis3.c:	else                                         s->value[ALPHA_EFF_SUN]      = 0.;
photosynthesis3.c:	if ( s->value[ASSIMILATION_SHADE] > 0. ) s->value[ALPHA_EFF_SHADE]    = ( s->value[ASSIMILATION_SHADE] / GC_MOL ) / s->value[PAR_SHADE];
photosynthesis3.c:	else                                         s->value[ALPHA_EFF_SHADE]    = 0.;
photosynthesis3.c:	const double Kc25          = 404;    /* (ubar or umol mol-1) Michaelis-Menten const carboxylase, 25 deg C  Badger and Collatz value*/
photosynthesis3.c:	const double Ko25          = 248000; /* (ubar or umol mol-1) Michaelis-Menten const oxygenase, 25 deg C 248 Badger and Collatz, 278.4 Bernacchi et al., 2001 */
photosynthesis3.c:	const double Kc25          = 404.9;  /* (ubar or umol mol-1) Michaelis-Menten const carboxylase, 25 deg C  Badger and Collatz value*/
photosynthesis3.c:	const double Ko25          = 278400; /* (ubar or umol mol-1) Michaelis-Menten const oxygenase, 25 deg C 248 Badger and Collatz, 278.4 Bernacchi et al., 2001 */
photosynthesis3.c:	const double act25         = 60;     /* (umol CO2 g-1 Rubisco s-1) specific activity of Rubisco at 25 °C */
photosynthesis3.c:	double Kc;                            /* (umol/mol) Michaelis-Menten constant for carboxylase reaction */
photosynthesis3.c:	double Ko;                            /* (umol/mol) Michaelis-Menten constant for oxygenase reaction */
photosynthesis3.c:	double Kmfn;                          /* (umol/mol) Effective Michaelis-Menten coefficient of Rubisco activity */
photosynthesis3.c:	if ( ! string_compare_i(s->name, "Fagussylvatica") )
photosynthesis3.c:		s->value[MAXCOND]   = 0.005;
photosynthesis3.c:		s->value[N_RUBISCO] = 0.1;
photosynthesis3.c:	else if ( ! string_compare_i(s->name, "Pinusylvestris") )
photosynthesis3.c:		s->value[MAXCOND]   = 0.002;
photosynthesis3.c:		s->value[N_RUBISCO] = 0.055;
photosynthesis3.c:	else if ( ! string_compare_i(s->name, "Piceaabies") )
photosynthesis3.c:		s->value[MAXCOND]   = 0.002;
photosynthesis3.c:		s->value[N_RUBISCO] = 0.035;
photosynthesis3.c:	else if ( ! string_compare_i(s->name, "Pinuspinaster") )
photosynthesis3.c:		s->value[MAXCOND]   = 0.002;
photosynthesis3.c:		s->value[N_RUBISCO] = 0.055;
photosynthesis3.c:	gsmax     = s->value[MAXCOND] * 1e3 * conv;
photosynthesis3.c:	gl_bl     = s->value[BLCOND] * 1e3 * conv;
photosynthesis3.c:	gl_c      = s->value[CUTCOND] * 1e3 * conv;
photosynthesis3.c:	/* effective Michaelis-Menten coefficient of Rubisco activity (umol/mol) */
photosynthesis3.c:	gsdiva  = g0 + g1 * rel_hum / ( Ca - gamma_unstar ) * s->value[F_SW];
photosynthesis3.c:	gsdiva  = ( g0  + /*1.6 * */ ( 1. + ( g1 / sqrt( vpd ) ) ) * ( 1. / Ca ) ) * s->value[F_SW];
photosynthesis3.c:	Vcmax = /*s->value[VCMAX]*/ test_Vcmax;
photosynthesis3.c:	Vcmax25   = leafN * s->value[N_RUBISCO] * fnr * act25 /** s->value[F_NUTR]*/;
photosynthesis3.c:	if ( g_settings->Photo_accl )
photosynthesis3.c:	Vcmax     = Vcmax25 * temp_corr * high_temp_corr * s->value[F_SW];
photosynthesis3.c:	Jmax = /*s->value[JMAX]*/test_Jmax;
photosynthesis3.c:	if ( g_settings->Photo_accl )
photosynthesis3.c:	if ( g_settings->Photo_accl )
photosynthesis3.c:		s->value[STOMATAL_SUN_CONDUCTANCE]  = gs / 1e3 * ( GCtoGW * Rgas * ( meteo_daily->tday + TempAbs ) );
photosynthesis3.c:		Ci = Ca - A / s->value[STOMATAL_SUN_CONDUCTANCE];
photosynthesis3.c:		s->value[STOMATAL_SHADE_CONDUCTANCE] = gs / 1e3 * ( GCtoGW * Rgas * ( meteo_daily->tday + TempAbs ) );
photosynthesis3.c:		Ci = Ca - A / s->value[STOMATAL_SHADE_CONDUCTANCE];
photosynthesis3.c:		s->value[A_SUN]                  = A;
photosynthesis3.c:		if ( Av < Aj )s->value[Av_SUN]   = Av;
photosynthesis3.c:		else          s->value[Aj_SUN]   = Aj;
photosynthesis3.c:		s->value[YEARLY_A_SUN]    += A;
photosynthesis3.c:		s->value[YEARLY_Av_SUN]   += s->value[Av_SUN];
photosynthesis3.c:		s->value[YEARLY_Aj_SUN]   += s->value[Aj_SUN];
photosynthesis3.c:		CHECK_CONDITION ( fabs ( s->value[YEARLY_A_SUN] - ( s->value[YEARLY_Av_SUN] + s->value[YEARLY_Aj_SUN] ) ) , > , eps );
photosynthesis3.c:		s->value[A_SHADE]                  = A;
photosynthesis3.c:		if ( Av < Aj )s->value[Av_SHADE]   = Av;
photosynthesis3.c:		else          s->value[Aj_SHADE]   = Aj;
photosynthesis3.c:		s->value[YEARLY_A_SHADE]    += A;
photosynthesis3.c:		s->value[YEARLY_Av_SHADE]   += s->value[Av_SHADE];
photosynthesis3.c:		s->value[YEARLY_Aj_SHADE]   += s->value[Aj_SHADE];
photosynthesis3.c:		CHECK_CONDITION ( fabs ( s->value[YEARLY_A_SHADE] - ( s->value[YEARLY_Av_SHADE] + s->value[YEARLY_Aj_SHADE] ) ) , > , eps );
photosynthesis3.c:	s->value[A_TOT]  = s->value[A_SUN]  + s->value[A_SHADE];
photosynthesis3.c:	s->value[Av_TOT] = s->value[Av_SUN] + s->value[Av_SHADE];
photosynthesis3.c:	s->value[Aj_TOT] = s->value[Aj_SUN] + s->value[Aj_SHADE];
photosynthesis3.c:	s->value[YEARLY_A_TOT]  += s->value[A_SUN]  + s->value[A_SHADE];
photosynthesis3.c:	s->value[YEARLY_Av_TOT] += s->value[Av_SUN] + s->value[Av_SHADE];
photosynthesis3.c:	s->value[YEARLY_Aj_TOT] += s->value[Aj_SUN] + s->value[Aj_SHADE];
photosynthesis3.c:	CHECK_CONDITION ( fabs ( s->value[YEARLY_A_TOT] - ( s->value[YEARLY_Av_TOT] + s->value[YEARLY_Aj_TOT] ) ) , > , eps );
photosynthesis.c:	if ( s->value[ALPHA] != NO_DATA )
photosynthesis.c:		//fixme use or not s->value[F_CO2_TR]???????
photosynthesis.c:		Alpha_C   = s->value[ALPHA] * s->value[F_CO2] * s->value[F_NUTR] * s->value[F_T] * s->value[PHYS_MOD] /* * s->value[F_CO2_TR] */;
photosynthesis.c:		//fixme use or not s->value[F_CO2_TR]???????
photosynthesis.c:		Epsilon_C = s->value[EPSILONgCMJ] * s->value[F_CO2] * s->value[F_NUTR] * s->value[F_T] * s->value[PHYS_MOD] /* * s->value[F_CO2_TR] */;
photosynthesis.c:		s->value[ALPHA] = s->value[EPSILONgCMJ] / (MOLPAR_MJ * GC_MOL);
photosynthesis.c:	if ( s->value[F_SW] <= WATER_STRESS_LIMIT )
photosynthesis.c:		if ( ! s->value[CANOPY_TRANSP] )
photosynthesis.c:			Alpha_C *=  s->value[F_SW];
photosynthesis.c:	if (Alpha_C > s->value[ALPHA])
photosynthesis.c:		/* set Alpha C to s->value[ALPHA] */
photosynthesis.c:		Alpha_C = s->value[ALPHA];
photosynthesis.c:	Lue           = s->value[APAR]       * Alpha_C;
photosynthesis.c:	Lue_max       = s->value[PAR]        * Alpha_C;
photosynthesis.c:	Lue_sun       = s->value[APAR_SUN]   * Alpha_C * s->value[F_LIGHT_SUN_MAKELA];
photosynthesis.c:	Lue_sun_max   = s->value[PAR_SUN]    * Alpha_C;
photosynthesis.c:	Lue_shade     = s->value[APAR_SHADE] * Alpha_C * s->value[F_LIGHT_SHADE_MAKELA];
photosynthesis.c:	Lue_shade_max = s->value[PAR_SHADE]  * Alpha_C;
photosynthesis.c:	GPPmolC        = Lue       /* FIXME it should account for transp * s->value[CANOPY_FRAC_DAY_TRANSP]*/;
photosynthesis.c:	GPP_sun_molC   = Lue_sun   /* FIXME it should account for sun transp * s->value[CANOPY_SUN_FRAC_DAY_TRANSP]*/;
photosynthesis.c:	GPP_shade_molC = Lue_shade /* FIXME it should account for shade transp * s->value[CANOPY_SHADE_FRAC_DAY_TRANSP]*/;
photosynthesis.c:	s->value[ASSIMILATION_SUN]   = GPP_sun_molC   * GC_MOL;
photosynthesis.c:	s->value[ASSIMILATION_SHADE] = GPP_shade_molC * GC_MOL;
photosynthesis.c:	s->value[ASSIMILATION]       = s->value[ASSIMILATION_SUN] + s->value[ASSIMILATION_SHADE];
photosynthesis.c:	s->value[GPP_SUN]            = s->value[ASSIMILATION_SUN];
photosynthesis.c:	s->value[GPP_SHADE]          = s->value[ASSIMILATION_SHADE];
photosynthesis.c:	s->value[GPP]                = s->value[GPP_SUN] + s->value[GPP_SHADE];
photosynthesis.c:	s->value[GPP_tC]             = s->value[GPP] / 1e6 * g_settings->sizeCell ;
photosynthesis.c:	s->value[MONTHLY_GPP]       += s->value[GPP];
photosynthesis.c:	s->value[MONTHLY_GPP_SUN]   += s->value[GPP_SUN];
photosynthesis.c:	s->value[MONTHLY_GPP_SHADE] += s->value[GPP_SHADE];
photosynthesis.c:	s->value[YEARLY_GPP]        += s->value[GPP];
photosynthesis.c:	s->value[YEARLY_GPP_SUN]    += s->value[GPP_SUN];
photosynthesis.c:	s->value[YEARLY_GPP_SHADE]  += s->value[GPP_SHADE];
photosynthesis.c:	s->value[MONTHLY_ASSIMILATION]       += s->value[ASSIMILATION];
photosynthesis.c:	s->value[MONTHLY_ASSIMILATION_SUN]   += s->value[ASSIMILATION_SUN];
photosynthesis.c:	s->value[MONTHLY_ASSIMILATION_SHADE] += s->value[ASSIMILATION_SHADE];
photosynthesis.c:	s->value[YEARLY_ASSIMILATION]        += s->value[ASSIMILATION];
photosynthesis.c:	s->value[YEARLY_ASSIMILATION_SUN]    += s->value[ASSIMILATION_SUN];
photosynthesis.c:	s->value[YEARLY_ASSIMILATION_SHADE]  += s->value[ASSIMILATION_SHADE];
photosynthesis.c:	c->daily_gpp                += s->value[GPP];
photosynthesis.c:	c->monthly_gpp              += s->value[GPP];
photosynthesis.c:	c->annual_gpp               += s->value[GPP];
photosynthesis.c:	c->daily_ass                += s->value[ASSIMILATION];
photosynthesis.c:	c->monthly_ass              += s->value[ASSIMILATION];
photosynthesis.c:	c->annual_ass               += s->value[ASSIMILATION];
photosynthesis.c:	c->daily_gpp_tC             += s->value[GPP_tC];
photosynthesis.c:	c->monthly_gpp_tC           += s->value[GPP_tC];
photosynthesis.c:	c->annual_gpp_tC            += s->value[GPP_tC];
photosynthesis.c:	if ( s->value[GPP] > 0. )
photosynthesis.c:		++s->counter[YEARLY_VEG_DAYS];
photosynthesis.c:	if ( Lue       > 0. ) s->value[ALPHA_EFF]          = Lue       / s->value[PAR];
photosynthesis.c:	else                  s->value[ALPHA_EFF]          = 0.;
photosynthesis.c:	if ( Lue_sun   > 0. ) s->value[ALPHA_EFF_SUN]      = Lue_sun   / s->value[PAR_SUN];
photosynthesis.c:	else                  s->value[ALPHA_EFF_SUN]      = 0.;
photosynthesis.c:	if ( Lue_shade > 0. ) s->value[ALPHA_EFF_SHADE]    = Lue_shade / s->value[PAR_SHADE];
photosynthesis.c:	else                  s->value[ALPHA_EFF_SHADE]    = 0.;
print.c:			"-s-wave downward = %f W/m2\n"
print.c:	if (g_settings->spatial == 's')
print.c:	logger(g_debug_log, "* landuse = %c\n", (LANDUSE_F == g_soil_settings->landuse) ? 'F' : 'Z');
print.c:	logger(g_debug_log, "- Species           = %s\n", s->name);
print.c:	logger(g_debug_log, "- Number of trees   = %d trees \n", s->counter[N_TREE]);
print.c:	logger(g_debug_log, "- Vegetative Days   =  %d days\n", s->counter[DAY_VEG_FOR_LEAF_FALL]);
print.c:	logger(g_debug_log, "- LAI_PROJ          = %f \n", s->value[LAI_PROJ]);
print.c:	logger(g_debug_log, "- Crown Diameter    = %f \n",  s->value[CROWN_DIAMETER]);
print.c:	logger(g_debug_log, "- Canopy Cover Proj = %f \n", s->value[CANOPY_COVER_PROJ]);
print.c:	logger(g_debug_log, "- Phenology type    = %f\n", s->value[PHENOLOGY]);
print.c:	logger(g_debug_log, "- Management type   = %c\n", (0 == s->management) ? 'T' : ((1 == s->management) ? 'C' : 'N'));
print.c:	logger(g_debug_log, "+ leaf              = %f tC/area\n", s->value[LEAF_C]);
print.c:	logger(g_debug_log, "+ stem              = %f tC/area\n", s->value[STEM_C]);
print.c:	logger(g_debug_log, "+ branch and bark   = %f tC/area\n", s->value[BRANCH_C]);
print.c:	logger(g_debug_log, "+ coarse root       = %f tC/area\n", s->value[CROOT_C]);
print.c:	logger(g_debug_log, "+ fine root         = %f tC/area\n", s->value[FROOT_C]);
print.c:	logger(g_debug_log, "+ reserve           = %f tC/area\n", s->value[RESERVE_C]);
print.c:	logger(g_debug_log, "+ fruit             = %f tC/area\n", s->value[FRUIT_C]);
print.c:	logger(g_debug_log, "+ seed              = %d seeds/area\n", s->counter[N_SEED]); //Modified by Saponaro
print.c:	logger(g_debug_log, "+ stem live         = %f tC/area\n", s->value[STEM_LIVEWOOD_C]);
print.c:	logger(g_debug_log, "+ coarse live       = %f tC/area\n", s->value[CROOT_LIVEWOOD_C]);
print.c:	logger(g_debug_log, "+ branch live       = %f tC/area\n", s->value[BRANCH_LIVEWOOD_C]);
print.c:	logger(g_debug_log, "+ stem dead         = %f tC/area\n", s->value[STEM_DEADWOOD_C]);
print.c:	logger(g_debug_log, "+ coarse dead       = %f tC/area\n", s->value[CROOT_DEADWOOD_C]);
print.c:	logger(g_debug_log, "+ branch dead       = %f tC/area\n", s->value[BRANCH_DEADWOOD_C]);
print.c:	logger(g_debug_log, "+ leaf              = %f tN/area\n", s->value[LEAF_N]);
print.c:	logger(g_debug_log, "+ stem              = %f tN/area\n", s->value[STEM_N]);
print.c:	logger(g_debug_log, "+ branch and bark   = %f tN/area\n", s->value[BRANCH_N]);
print.c:	logger(g_debug_log, "+ coarse root       = %f tN/area\n", s->value[CROOT_N]);
print.c:	logger(g_debug_log, "+ fine root         = %f tN/area\n", s->value[FROOT_N]);
print.c:	logger(g_debug_log, "+ reserve           = %f tN/area\n", s->value[RESERVE_N]);
print.c:	logger(g_debug_log, "+ fruit             = %f tN/area\n", s->value[FRUIT_N]);
print.c:	logger(g_debug_log, "- Species           = %s\n", s->name);
print.c:	logger(g_debug_log, "- Number of trees   = %d trees \n", s->counter[N_TREE]);
print.c:	logger(g_debug_log, "- LAI_PROJ          = %f \n", s->value[LAI_PROJ]);
print.c:	logger(g_debug_log, "- Crown Diameter    = %f \n",  s->value[CROWN_DIAMETER]);
print.c:	logger(g_debug_log, "- Canopy Cover Proj = %f \n", s->value[CANOPY_COVER_PROJ]);
print.c:	logger(g_debug_log, "- Phenology type    = %f\n", s->value[PHENOLOGY]);
print.c:	logger(g_debug_log, "- Management type   = %c\n", (0 == s->management) ? 'T' : ((1 == s->management) ? 'C' : 'N'));
print.c:	logger(g_debug_log, "+ leaf              = %f tC/area\n", s->value[LEAF_C]);
print.c:	logger(g_debug_log, "+ stem              = %f tC/area\n", s->value[STEM_C]);
print.c:	logger(g_debug_log, "+ branch and bark   = %f tC/area\n", s->value[BRANCH_C]);
print.c:	logger(g_debug_log, "+ coarse root       = %f tC/area\n", s->value[CROOT_C]);
print.c:	logger(g_debug_log, "+ fine root         = %f tC/area\n", s->value[FROOT_C]);
print.c:	logger(g_debug_log, "+ reserve           = %f tC/area\n", s->value[RESERVE_C]);
print.c:	logger(g_debug_log, "+ fruit             = %f tC/area\n", s->value[FRUIT_C]);
print.c:	logger(g_debug_log, "+ seed              = %d seed/area\n", s->counter[N_SEED]);
print.c:	logger(g_debug_log, "+ stem sapwood      = %f tC/area\n", s->value[STEM_SAPWOOD_C]);
print.c:	logger(g_debug_log, "+ stem heartwood    = %f tC/area\n", s->value[STEM_HEARTWOOD_C]);
print.c:	logger(g_debug_log, "+ coarse sapwood    = %f tC/area\n", s->value[CROOT_SAPWOOD_C]);
print.c:	logger(g_debug_log, "+ coarse heartwood  = %f tC/area\n", s->value[CROOT_HEARTWOOD_C]);
print.c:	logger(g_debug_log, "+ branch sapwood    = %f tC/area\n", s->value[BRANCH_SAPWOOD_C]);
print.c:	logger(g_debug_log, "+ branch heartwood  = %f tC/area\n", s->value[BRANCH_HEARTWOOD_C]);
print.c:	logger(g_debug_log, "+ stem live         = %f tC/area\n", s->value[STEM_LIVEWOOD_C]);
print.c:	logger(g_debug_log, "+ coarse live       = %f tC/area\n", s->value[CROOT_LIVEWOOD_C]);
print.c:	logger(g_debug_log, "+ branch live       = %f tC/area\n", s->value[BRANCH_LIVEWOOD_C]);
print.c:	logger(g_debug_log, "+ stem dead         = %f tC/area\n", s->value[STEM_DEADWOOD_C]);
print.c:	logger(g_debug_log, "+ coarse dead       = %f tC/area\n", s->value[CROOT_DEADWOOD_C]);
print.c:	logger(g_debug_log, "+ branch dead       = %f tC/area\n", s->value[BRANCH_DEADWOOD_C]);
print.c:	logger(g_debug_log, "+ leaf              = %f tN/area\n", s->value[LEAF_N]);
print.c:	logger(g_debug_log, "+ stem              = %f tN/area\n", s->value[STEM_N]);
print.c:	logger(g_debug_log, "+ branch and bark   = %f tN/area\n", s->value[BRANCH_N]);
print.c:	logger(g_debug_log, "+ coarse root       = %f tN/area\n", s->value[CROOT_N]);
print.c:	logger(g_debug_log, "+ fine root         = %f tN/area\n", s->value[FROOT_N]);
print.c:	logger(g_debug_log, "+ reserve           = %f tN/area\n", s->value[RESERVE_N]);
print.c:	logger(g_debug_log, "+ fruit             = %f tN/area\n", s->value[FRUIT_N]);
print_output.c:	logger(_log, "\n\n#site: %s\n", g_settings->sitename);
print_output.c:		logger(_log, "#--input files--\n");
print_output.c:	if ( g_settings->CO2_trans )
print_output.c:	logger(log, "#--model settings--\n");
print_output.c:	logger(log, "#CO2_mod = %s\n", g_settings->CO2_mod ? "on" : "off");
print_output.c:	logger(log, "#CO2 trans = %s\n", (CO2_TRANS_VAR == g_settings->CO2_trans) ? "var" : (CO2_TRANS_ON == g_settings->CO2_trans) ? "on" : "off");
print_output.c:	if ( CO2_TRANS_OFF == g_settings->CO2_trans )
print_output.c:		logger(log, "#fixed co2 concentration = %g ppmv\n", g_settings->co2Conc);
print_output.c:	else if ( CO2_TRANS_VAR == g_settings->CO2_trans )
print_output.c:		logger(log, "#year %d at which co2 concentration is fixed at value = %g ppmv\n", g_settings->year_start_co2_fixed, g_settings->co2Conc);
print_output.c:	logger(log, "#Resp accl = %s\n", g_settings->Resp_accl ? "on" : "off");
print_output.c:	logger(log, "#regeneration = %s\n", g_settings->regeneration ? "on" : "off");
print_output.c:	logger(log, "#Management = %s\n", (MANAGEMENT_VAR == g_settings->management) ? "var" : (MANAGEMENT_ON == g_settings->management) ? "on" : "off");
print_output.c:	if ( g_settings->management )
print_output.c:		logger(log, "#Year Start Management = %d\n", g_settings->year_start_management);
print_output.c:	if ( g_settings->year_restart != -1 )
print_output.c:		logger(log, "#Year restart = %d\n", g_settings->year_restart);
print_output.c:													s->value[GPP],
print_output.c:													s->value[TOTAL_GROWTH_RESP],
print_output.c:													s->value[TOTAL_MAINT_RESP],
print_output.c:													s->value[TOTAL_AUT_RESP],
print_output.c:													s->value[NPP],
print_output.c:													s->value[CUE],
print_output.c:													s->value[LAI_PROJ],
print_output.c:													s->value[PEAK_LAI_PROJ],
print_output.c:													s->value[LAI_EXP],
print_output.c:													s->value[DAILY_CANOPY_COVER_PROJ],
print_output.c:													s->value[DBHDC_EFF],
print_output.c:													s->value[CROWN_AREA_PROJ],
print_output.c:													s->value[CROWN_AREA_EXP],
print_output.c:													s->value[PAR],
print_output.c:													s->value[APAR],
print_output.c:													s->value[fAPAR],
print_output.c:													s->counter[N_TREE],
print_output.c:													s->counter[VEG_DAYS],
print_output.c:													s->value[CANOPY_INT_RAIN],
print_output.c:													s->value[CANOPY_WATER],
print_output.c:													s->value[CANOPY_EVAPO],
print_output.c:													s->value[CANOPY_TRANSP],
print_output.c:													s->value[CANOPY_EVAPO_TRANSP],
print_output.c:													s->value[CANOPY_LATENT_HEAT],
print_output.c:													s->value[WUE],
print_output.c:													s->value[RESERVE_C],
print_output.c:													s->value[STEM_C],
print_output.c:													s->value[STEM_SAPWOOD_C],
print_output.c:													s->value[STEM_LIVEWOOD_C],
print_output.c:													s->value[STEM_DEADWOOD_C],
print_output.c:													s->value[LEAF_C],
print_output.c:													s->value[FROOT_C],
print_output.c:													s->value[CROOT_C],
print_output.c:													s->value[CROOT_SAPWOOD_C],
print_output.c:													s->value[CROOT_LIVEWOOD_C],
print_output.c:													s->value[CROOT_DEADWOOD_C],
print_output.c:													s->value[BRANCH_C],
print_output.c:													s->value[BRANCH_SAPWOOD_C],
print_output.c:													s->value[BRANCH_LIVEWOOD_C],
print_output.c:													s->value[BRANCH_DEADWOOD_C],
print_output.c:													s->value[FRUIT_C],
print_output.c:													s->value[C_TO_RESERVE],
print_output.c:													s->value[C_TO_STEM],
print_output.c:													s->value[C_TO_LEAF],
print_output.c:													s->value[C_TO_FROOT],
print_output.c:													s->value[C_TO_CROOT],
print_output.c:													s->value[C_TO_BRANCH],
print_output.c:													s->value[C_TO_FRUIT],
print_output.c:													s->value[STEM_AUT_RESP],
print_output.c:													s->value[LEAF_AUT_RESP],
print_output.c:													s->value[FROOT_AUT_RESP],
print_output.c:													s->value[CROOT_AUT_RESP],
print_output.c:													s->value[BRANCH_AUT_RESP],
print_output.c:													s->value[F_CO2],
print_output.c:													s->value[F_CO2_TR],
print_output.c:													s->value[F_LIGHT_MAKELA],
print_output.c:													s->value[F_AGE],
print_output.c:													s->value[F_T],
print_output.c:													s->value[F_VPD],
print_output.c:													s->value[F_NUTR],
print_output.c:													s->value[F_SW],
print_output.c:													s->value[LITR_C],
print_output.c:													s->value[CWD_C],
print_output.c:													s->value[SOIL_C]
print_output.c:													s->value[MONTHLY_GPP],
print_output.c:													s->value[MONTHLY_TOTAL_AUT_RESP],
print_output.c:													s->value[MONTHLY_NPP],
print_output.c:													s->value[MONTHLY_CUE],
print_output.c:													s->value[MONTHLY_CANOPY_TRANSP],
print_output.c:													s->value[MONTHLY_CANOPY_EVAPO_TRANSP],
print_output.c:													s->value[MONTHLY_CANOPY_LATENT_HEAT],
print_output.c:													s->value[CANOPY_COVER_PROJ],
print_output.c:													s->value[DBHDC_EFF],
print_output.c:													s->value[HD_EFF],
print_output.c:													s->value[HD_MAX],
print_output.c:													s->value[HD_MIN],
print_output.c:													s->counter[N_TREE],
print_output.c:													s->value[MONTHLY_WUE],
print_output.c:													s->value[RESERVE_C],
print_output.c:													s->value[STEM_C],
print_output.c:													s->value[STEM_LIVEWOOD_C],
print_output.c:													s->value[STEM_DEADWOOD_C],
print_output.c:													s->value[MAX_LEAF_C],
print_output.c:													s->value[MAX_FROOT_C],
print_output.c:													s->value[CROOT_C],
print_output.c:													s->value[CROOT_LIVEWOOD_C],
print_output.c:													s->value[CROOT_DEADWOOD_C],
print_output.c:													s->value[BRANCH_C],
print_output.c:													s->value[BRANCH_LIVEWOOD_C],
print_output.c:													s->value[BRANCH_DEADWOOD_C]);
print_output.c:														s->value[YEARLY_GPP],
print_output.c:														s->value[YEARLY_TOTAL_GROWTH_RESP],
print_output.c:														s->value[YEARLY_TOTAL_MAINT_RESP],
print_output.c:														s->value[YEARLY_TOTAL_AUT_RESP],
print_output.c:														s->value[YEARLY_NPP],
print_output.c:														s->value[YEARLY_CUE],
print_output.c:														s->value[YEARLY_TOTAL_AUT_RESP]/s->value[YEARLY_GPP]*100.,
print_output.c:														s->value[PEAK_LAI_PROJ],
print_output.c:														s->value[MAX_LAI_PROJ],
print_output.c:														s->value[SAPWOOD_AREA],
print_output.c:														s->value[CANOPY_COVER_PROJ],
print_output.c:														s->value[DBHDC_EFF],
print_output.c:														s->value[CROWN_DIAMETER],
print_output.c:														s->value[CROWN_HEIGHT],
print_output.c:														s->value[CROWN_AREA_PROJ],
print_output.c:														s->value[YEARLY_APAR],
print_output.c:														s->counter[N_TREE],
print_output.c:														s->counter[DEAD_TREE],
print_output.c:														s->counter[THINNED_TREE],
print_output.c:														s->counter[YEARLY_VEG_DAYS],
print_output.c:														s->counter[FIRST_VEG_DAYS],
print_output.c:														s->value[YEARLY_CANOPY_TRANSP],
print_output.c:														s->value[YEARLY_CANOPY_INT],
print_output.c:														s->value[YEARLY_CANOPY_LATENT_HEAT],
print_output.c:														s->value[YEARLY_WUE],
print_output.c:														s->value[MIN_RESERVE_C],
print_output.c:														s->value[RESERVE_C],
print_output.c:														s->value[STEM_C],
print_output.c:														s->value[STEM_SAPWOOD_C],
print_output.c:														s->value[STEM_HEARTWOOD_C],
print_output.c:														s->value[STEM_LIVEWOOD_C],
print_output.c:														s->value[STEM_DEADWOOD_C],
print_output.c:														s->value[MAX_LEAF_C],
print_output.c:														s->value[MAX_FROOT_C],
print_output.c:														s->value[CROOT_C],
print_output.c:														s->value[CROOT_LIVEWOOD_C],
print_output.c:														s->value[CROOT_DEADWOOD_C],
print_output.c:														s->value[BRANCH_C],
print_output.c:														s->value[BRANCH_LIVEWOOD_C],
print_output.c:														s->value[BRANCH_DEADWOOD_C],
print_output.c:														s->value[FRUIT_C],
print_output.c:														s->value[STANDING_WOOD],
print_output.c:														s->value[YEARLY_C_TO_WOOD],
print_output.c:														s->value[CUM_YEARLY_C_TO_WOOD],
print_output.c:														s->value[STAND_BASAL_AREA_m2],
print_output.c:														s->value[TREE_CAI],
print_output.c:														s->value[TREE_MAI],
print_output.c:														s->value[CAI],
print_output.c:														s->value[MAI],
print_output.c:														s->value[VOLUME],
print_output.c:														s->value[TREE_VOLUME],
print_output.c:														(s->value[TREE_CAI]/s->value[TREE_VOLUME])*100.,
print_output.c:														s->value[DELTA_AGB],
print_output.c:														s->value[DELTA_BGB],
print_output.c:														s->value[AGB],
print_output.c:														s->value[BGB],
print_output.c:														s->value[BGB]/s->value[AGB],
print_output.c:														s->value[DELTA_TREE_AGB],
print_output.c:														s->value[DELTA_TREE_BGB],
print_output.c:														s->value[C_HWP],
print_output.c:														s->value[VOLUME_HWP],
print_output.c:														s->value[YEARLY_STEM_AUT_RESP],
print_output.c:														s->value[YEARLY_LEAF_AUT_RESP],
print_output.c:														s->value[YEARLY_FROOT_AUT_RESP],
print_output.c:														s->value[YEARLY_CROOT_AUT_RESP],
print_output.c:														s->value[YEARLY_BRANCH_AUT_RESP]
print_output.c:	logger(_log, "\n\n#site: %s\n", g_settings->sitename);
print_output.c:		logger(_log, "#--input files--\n");
print_output.c:	if ( g_settings->CO2_trans )
print_output.c:	logger(log, "#--model settings--\n");
print_output.c:	if ( !g_settings->PSN_mod )
print_output.c:	logger(log, "#CO2 trans = %s\n", (CO2_TRANS_VAR == g_settings->CO2_trans) ? "var" : (CO2_TRANS_ON == g_settings->CO2_trans) ? "on" : "off");
print_output.c:	if ( CO2_TRANS_OFF == g_settings->CO2_trans )
print_output.c:		logger(log, "#fixed co2 concentration = %g ppmv\n", g_settings->co2Conc);
print_output.c:	else if ( CO2_TRANS_VAR == g_settings->CO2_trans )
print_output.c:		logger(log, "#year %d at which co2 concentration is fixed at value = %g ppmv\n", g_settings->year_start_co2_fixed, g_settings->co2Conc);
print_output.c:	logger(log, "#Photo accl = %s\n", g_settings->Photo_accl ? "on" : "off");
print_output.c:	logger(log, "#Resp  accl = %s\n", g_settings->Resp_accl ? "on" : "off");
print_output.c:	logger(log, "#regeneration = %s\n", g_settings->regeneration ? "on" : "off");
print_output.c:	logger(log, "#Management = %s\n", (MANAGEMENT_VAR == g_settings->management) ? "var" : (MANAGEMENT_ON == g_settings->management) ? "on" : "off");
print_output.c:	if ( g_settings->management )
print_output.c:		logger(log, "#Year Start Management = %d\n", g_settings->year_start_management);
print_output.c:	if ( g_settings->year_restart != -1 )
print_output.c:		logger(log, "#Year restart = %d\n", g_settings->year_restart);
print_output.c:                if (!g_settings->regeneration)
print_output.c:									s->value[GPP],
print_output.c:									s->value[Av_TOT],
print_output.c:									s->value[Aj_TOT],
print_output.c:									s->value[A_TOT],
print_output.c:									s->value[TOTAL_GROWTH_RESP],
print_output.c:									s->value[TOTAL_MAINT_RESP],
print_output.c:									s->value[TOTAL_AUT_RESP],
print_output.c:									s->value[NPP],
print_output.c:									s->value[BP],
print_output.c:									s->value[CUE],
print_output.c:									s->value[BPE],
print_output.c:									s->value[LAI_PROJ],
print_output.c:									s->value[PEAK_LAI_PROJ],
print_output.c:									s->value[LAI_EXP],
print_output.c:									s->value[DAILY_CANOPY_COVER_PROJ],
print_output.c:									s->value[DBHDC_EFF],
print_output.c:									s->value[CROWN_AREA_PROJ],
print_output.c:									s->value[PAR],
print_output.c:									s->value[APAR],
print_output.c:									s->value[fAPAR],
print_output.c:									s->counter[N_TREE],
print_output.c:									s->counter[VEG_DAYS],
print_output.c:									s->value[CANOPY_INT_RAIN],
print_output.c:									s->value[CANOPY_WATER],
print_output.c:									s->value[CANOPY_EVAPO],
print_output.c:									s->value[CANOPY_TRANSP],
print_output.c:									s->value[CANOPY_EVAPO_TRANSP],
print_output.c:									s->value[CANOPY_LATENT_HEAT],
print_output.c:									s->value[WUE],
print_output.c:									s->value[RESERVE_C],
print_output.c:									s->value[STEM_C],
print_output.c:									s->value[STEM_SAPWOOD_C],
print_output.c:									s->value[STEM_LIVEWOOD_C],
print_output.c:									s->value[STEM_DEADWOOD_C],
print_output.c:									s->value[LEAF_C],
print_output.c:									s->value[FROOT_C],
print_output.c:									s->value[CROOT_C],
print_output.c:									s->value[CROOT_SAPWOOD_C],
print_output.c:									s->value[CROOT_LIVEWOOD_C],
print_output.c:									s->value[CROOT_DEADWOOD_C],
print_output.c:									s->value[BRANCH_C],
print_output.c:									s->value[BRANCH_SAPWOOD_C],
print_output.c:									s->value[BRANCH_LIVEWOOD_C],
print_output.c:									s->value[BRANCH_DEADWOOD_C],
print_output.c:									s->value[FRUIT_C],
print_output.c:									s->value[TOT_SAPWOOD_C],
print_output.c:									s->value[C_TO_RESERVE],
print_output.c:									s->value[C_TO_STEM],
print_output.c:									s->value[C_TO_LEAF],
print_output.c:									s->value[C_TO_FROOT],
print_output.c:									s->value[C_TO_CROOT],
print_output.c:									s->value[C_TO_BRANCH],
print_output.c:									s->value[C_TO_FRUIT],
print_output.c:									s->value[RESERVE_N],
print_output.c:									s->value[STEM_N],
print_output.c:									s->value[STEM_LIVEWOOD_N],
print_output.c:									s->value[STEM_DEADWOOD_N],
print_output.c:									s->value[LEAF_N],
print_output.c:									s->value[FROOT_N],
print_output.c:									s->value[CROOT_N],
print_output.c:									s->value[CROOT_LIVEWOOD_N],
print_output.c:									s->value[CROOT_DEADWOOD_N],
print_output.c:									s->value[BRANCH_N],
print_output.c:									s->value[BRANCH_LIVEWOOD_N],
print_output.c:									s->value[BRANCH_DEADWOOD_N],
print_output.c:									s->value[FRUIT_N],
print_output.c:									s->value[N_TO_RESERVE],
print_output.c:									s->value[N_TO_STEM],
print_output.c:									s->value[N_TO_LEAF],
print_output.c:									s->value[N_TO_FROOT],
print_output.c:									s->value[N_TO_CROOT],
print_output.c:									s->value[N_TO_BRANCH],
print_output.c:									s->value[N_TO_FRUIT],
print_output.c:									s->value[STEM_AUT_RESP],
print_output.c:									s->value[LEAF_AUT_RESP],
print_output.c:									s->value[FROOT_AUT_RESP],
print_output.c:									s->value[CROOT_AUT_RESP],
print_output.c:									s->value[BRANCH_AUT_RESP],
print_output.c:									s->value[F_CO2],
print_output.c:									s->value[F_CO2_VER],
print_output.c:									s->value[F_CO2_FRANKS],
print_output.c:									s->value[F_CO2_TR],
print_output.c:									s->value[F_LIGHT_MAKELA],
print_output.c:									s->value[F_AGE],
print_output.c:									s->value[F_T],
print_output.c:									s->value[F_VPD],
print_output.c:									s->value[F_NUTR],
print_output.c:									s->value[F_SW],
print_output.c:									s->value[LITR_C],
print_output.c:									s->value[CWD_C]);
print_output.c:                                                                        //s->value[psi]);
print_output.c:        if (!g_settings->regeneration)
print_output.c:                  if (!g_settings->regeneration)
print_output.c:									s->value[GPP],
print_output.c:									s->value[Av_TOT],
print_output.c:									s->value[Aj_TOT],
print_output.c:									s->value[A_TOT],
print_output.c:									s->value[TOTAL_GROWTH_RESP],
print_output.c:									s->value[TOTAL_MAINT_RESP],
print_output.c:									s->value[TOTAL_AUT_RESP],
print_output.c:									s->value[NPP],
print_output.c:									s->value[BP],
print_output.c:									s->value[CUE],
print_output.c:									s->value[BPE],
print_output.c:									s->value[LAI_PROJ],
print_output.c:									s->value[PEAK_LAI_PROJ],
print_output.c:									s->value[LAI_EXP],
print_output.c:									s->value[DAILY_CANOPY_COVER_PROJ],
print_output.c:									s->value[DBHDC_EFF],
print_output.c:									s->value[CROWN_AREA_PROJ],
print_output.c:									s->value[PAR],
print_output.c:									s->value[APAR],
print_output.c:									s->value[fAPAR],
print_output.c:									s->counter[N_TREE],
print_output.c:									s->counter[VEG_DAYS],
print_output.c:									s->value[CANOPY_INT_RAIN],
print_output.c:									s->value[CANOPY_WATER],
print_output.c:									s->value[CANOPY_EVAPO],
print_output.c:									s->value[CANOPY_TRANSP],
print_output.c:									s->value[CANOPY_EVAPO_TRANSP],
print_output.c:									s->value[CANOPY_LATENT_HEAT],
print_output.c:									s->value[WUE],
print_output.c:									s->value[RESERVE_C],
print_output.c:									s->value[STEM_C],
print_output.c:									s->value[STEM_SAPWOOD_C],
print_output.c:									s->value[STEM_LIVEWOOD_C],
print_output.c:									s->value[STEM_DEADWOOD_C],
print_output.c:									s->value[LEAF_C],
print_output.c:									s->value[FROOT_C],
print_output.c:									s->value[CROOT_C],
print_output.c:									s->value[CROOT_SAPWOOD_C],
print_output.c:									s->value[CROOT_LIVEWOOD_C],
print_output.c:									s->value[CROOT_DEADWOOD_C],
print_output.c:									s->value[BRANCH_C],
print_output.c:									s->value[BRANCH_SAPWOOD_C],
print_output.c:									s->value[BRANCH_LIVEWOOD_C],
print_output.c:									s->value[BRANCH_DEADWOOD_C],
print_output.c:									s->value[FRUIT_C],
print_output.c:									s->value[TOT_SAPWOOD_C],
print_output.c:									s->value[C_TO_RESERVE],
print_output.c:									s->value[C_TO_STEM],
print_output.c:									s->value[C_TO_LEAF],
print_output.c:									s->value[C_TO_FROOT],
print_output.c:									s->value[C_TO_CROOT],
print_output.c:									s->value[C_TO_BRANCH],
print_output.c:									s->value[C_TO_FRUIT],
print_output.c:									s->value[RESERVE_N],
print_output.c:									s->value[STEM_N],
print_output.c:									s->value[STEM_LIVEWOOD_N],
print_output.c:									s->value[STEM_DEADWOOD_N],
print_output.c:									s->value[LEAF_N],
print_output.c:									s->value[FROOT_N],
print_output.c:									s->value[CROOT_N],
print_output.c:									s->value[CROOT_LIVEWOOD_N],
print_output.c:									s->value[CROOT_DEADWOOD_N],
print_output.c:									s->value[BRANCH_N],
print_output.c:									s->value[BRANCH_LIVEWOOD_N],
print_output.c:									s->value[BRANCH_DEADWOOD_N],
print_output.c:									s->value[FRUIT_N],
print_output.c:									s->value[N_TO_RESERVE],
print_output.c:									s->value[N_TO_STEM],
print_output.c:									s->value[N_TO_LEAF],
print_output.c:									s->value[N_TO_FROOT],
print_output.c:									s->value[N_TO_CROOT],
print_output.c:									s->value[N_TO_BRANCH],
print_output.c:									s->value[N_TO_FRUIT],
print_output.c:									s->value[STEM_AUT_RESP],
print_output.c:									s->value[LEAF_AUT_RESP],
print_output.c:									s->value[FROOT_AUT_RESP],
print_output.c:									s->value[CROOT_AUT_RESP],
print_output.c:									s->value[BRANCH_AUT_RESP],
print_output.c:									s->value[F_CO2],
print_output.c:									s->value[F_CO2_VER],
print_output.c:									s->value[F_CO2_FRANKS],
print_output.c:									s->value[F_CO2_TR],
print_output.c:									s->value[F_LIGHT_MAKELA],
print_output.c:									s->value[F_AGE],
print_output.c:									s->value[F_T],
print_output.c:									s->value[F_VPD],
print_output.c:									s->value[F_NUTR],
print_output.c:									s->value[F_SW],
print_output.c:									s->value[LITR_C],
print_output.c:									s->value[CWD_C]);
print_output.c:                                                                        //s->value[psi]);
print_output.c:          if (!g_settings->regeneration)
print_output.c:                 // if (!g_settings->regeneration)
print_output.c:									s->value[GPP],
print_output.c:									s->value[Av_TOT],
print_output.c:									s->value[Aj_TOT],
print_output.c:									s->value[A_TOT],
print_output.c:									s->value[TOTAL_GROWTH_RESP],
print_output.c:									s->value[TOTAL_MAINT_RESP],
print_output.c:									s->value[TOTAL_AUT_RESP],
print_output.c:									s->value[NPP],
print_output.c:									s->value[BP],
print_output.c:									s->value[CUE],
print_output.c:									s->value[BPE],
print_output.c:									s->value[LAI_PROJ],
print_output.c:									s->value[PEAK_LAI_PROJ],
print_output.c:									s->value[LAI_EXP],
print_output.c:									s->value[DAILY_CANOPY_COVER_PROJ],
print_output.c:									s->value[DBHDC_EFF],
print_output.c:									s->value[CROWN_AREA_PROJ],
print_output.c:									s->value[PAR],
print_output.c:									s->value[APAR],
print_output.c:									s->value[fAPAR],
print_output.c:									s->counter[N_TREE],
print_output.c:									s->counter[VEG_DAYS],
print_output.c:									s->value[CANOPY_INT_RAIN],
print_output.c:									s->value[CANOPY_WATER],
print_output.c:									s->value[CANOPY_EVAPO],
print_output.c:									s->value[CANOPY_TRANSP],
print_output.c:									s->value[CANOPY_EVAPO_TRANSP],
print_output.c:									s->value[CANOPY_LATENT_HEAT],
print_output.c:									s->value[WUE],
print_output.c:									s->value[RESERVE_C],
print_output.c:									s->value[STEM_C],
print_output.c:									s->value[STEM_SAPWOOD_C],
print_output.c:									s->value[STEM_LIVEWOOD_C],
print_output.c:									s->value[STEM_DEADWOOD_C],
print_output.c:									s->value[LEAF_C],
print_output.c:									s->value[FROOT_C],
print_output.c:									s->value[CROOT_C],
print_output.c:									s->value[CROOT_SAPWOOD_C],
print_output.c:									s->value[CROOT_LIVEWOOD_C],
print_output.c:									s->value[CROOT_DEADWOOD_C],
print_output.c:									s->value[BRANCH_C],
print_output.c:									s->value[BRANCH_SAPWOOD_C],
print_output.c:									s->value[BRANCH_LIVEWOOD_C],
print_output.c:									s->value[BRANCH_DEADWOOD_C],
print_output.c:									s->value[FRUIT_C],
print_output.c:									s->value[TOT_SAPWOOD_C],
print_output.c:									s->value[C_TO_RESERVE],
print_output.c:									s->value[C_TO_STEM],
print_output.c:									s->value[C_TO_LEAF],
print_output.c:									s->value[C_TO_FROOT],
print_output.c:									s->value[C_TO_CROOT],
print_output.c:									s->value[C_TO_BRANCH],
print_output.c:									s->value[C_TO_FRUIT],
print_output.c:									s->value[RESERVE_N],
print_output.c:									s->value[STEM_N],
print_output.c:									s->value[STEM_LIVEWOOD_N],
print_output.c:									s->value[STEM_DEADWOOD_N],
print_output.c:									s->value[LEAF_N],
print_output.c:									s->value[FROOT_N],
print_output.c:									s->value[CROOT_N],
print_output.c:									s->value[CROOT_LIVEWOOD_N],
print_output.c:									s->value[CROOT_DEADWOOD_N],
print_output.c:									s->value[BRANCH_N],
print_output.c:									s->value[BRANCH_LIVEWOOD_N],
print_output.c:									s->value[BRANCH_DEADWOOD_N],
print_output.c:									s->value[FRUIT_N],
print_output.c:									s->value[N_TO_RESERVE],
print_output.c:									s->value[N_TO_STEM],
print_output.c:									s->value[N_TO_LEAF],
print_output.c:									s->value[N_TO_FROOT],
print_output.c:									s->value[N_TO_CROOT],
print_output.c:									s->value[N_TO_BRANCH],
print_output.c:									s->value[N_TO_FRUIT],
print_output.c:									s->value[STEM_AUT_RESP],
print_output.c:									s->value[LEAF_AUT_RESP],
print_output.c:									s->value[FROOT_AUT_RESP],
print_output.c:									s->value[CROOT_AUT_RESP],
print_output.c:									s->value[BRANCH_AUT_RESP],
print_output.c:									s->value[F_CO2],
print_output.c:									s->value[F_CO2_VER],
print_output.c:									s->value[F_CO2_FRANKS],
print_output.c:									s->value[F_CO2_TR],
print_output.c:									s->value[F_LIGHT_MAKELA],
print_output.c:									s->value[F_AGE],
print_output.c:									s->value[F_T],
print_output.c:									s->value[F_VPD],
print_output.c:									s->value[F_NUTR],
print_output.c:									s->value[F_SW],
print_output.c:									s->value[LITR_C],
print_output.c:									s->value[CWD_C]);
print_output.c:                if (!g_settings->regeneration)
print_output.c:									s->value[MONTHLY_GPP],
print_output.c:									s->value[MONTHLY_ASSIMILATION],
print_output.c:									s->value[MONTHLY_TOTAL_AUT_RESP],
print_output.c:									s->value[MONTHLY_NPP],
print_output.c:									s->value[MONTHLY_CUE],
print_output.c:									s->value[MONTHLY_CANOPY_TRANSP],
print_output.c:									s->value[MONTHLY_CANOPY_EVAPO_TRANSP],
print_output.c:									s->value[MONTHLY_CANOPY_LATENT_HEAT],
print_output.c:									s->value[MONTHLY_LAI_PROJ]/31.,   //5p6
print_output.c:									s->value[CANOPY_COVER_PROJ],
print_output.c:									s->value[DBHDC_EFF],
print_output.c:									s->value[HD_EFF],
print_output.c:									s->value[HD_MAX],
print_output.c:									s->value[HD_MIN],
print_output.c:									s->counter[N_TREE],
print_output.c:									s->value[MONTHLY_WUE],
print_output.c:									s->value[RESERVE_C],
print_output.c:									s->value[STEM_C],
print_output.c:									s->value[STEM_LIVEWOOD_C],
print_output.c:									s->value[STEM_DEADWOOD_C],
print_output.c:									s->value[MAX_LEAF_C],
print_output.c:									s->value[MAX_FROOT_C],
print_output.c:									s->value[CROOT_C],
print_output.c:									s->value[CROOT_LIVEWOOD_C],
print_output.c:									s->value[CROOT_DEADWOOD_C],
print_output.c:									s->value[BRANCH_C],
print_output.c:									s->value[BRANCH_LIVEWOOD_C],
print_output.c:									s->value[BRANCH_DEADWOOD_C]);
print_output.c:         if (!g_settings->regeneration)
print_output.c:                if (!g_settings->regeneration)
print_output.c:									s->value[MONTHLY_GPP],
print_output.c:									s->value[MONTHLY_ASSIMILATION],
print_output.c:									s->value[MONTHLY_TOTAL_AUT_RESP],
print_output.c:									s->value[MONTHLY_NPP],
print_output.c:									s->value[MONTHLY_CUE],
print_output.c:									s->value[MONTHLY_CANOPY_TRANSP],
print_output.c:									s->value[MONTHLY_CANOPY_EVAPO_TRANSP],
print_output.c:									s->value[MONTHLY_CANOPY_LATENT_HEAT],
print_output.c:								       s->value[MONTHLY_LAI_PROJ]/31.,   //5p6 divided by 31, otherwise we have value higher than the PEAK_LAI
print_output.c:									s->value[CANOPY_COVER_PROJ],
print_output.c:									s->value[DBHDC_EFF],
print_output.c:									s->value[HD_EFF],
print_output.c:									s->value[HD_MAX],
print_output.c:									s->value[HD_MIN],
print_output.c:									s->counter[N_TREE],
print_output.c:									s->value[MONTHLY_WUE],
print_output.c:									s->value[RESERVE_C],
print_output.c:									s->value[STEM_C],
print_output.c:									s->value[STEM_LIVEWOOD_C],
print_output.c:									s->value[STEM_DEADWOOD_C],
print_output.c:									s->value[MAX_LEAF_C],
print_output.c:									s->value[MAX_FROOT_C],
print_output.c:									s->value[CROOT_C],
print_output.c:									s->value[CROOT_LIVEWOOD_C],
print_output.c:									s->value[CROOT_DEADWOOD_C],
print_output.c:									s->value[BRANCH_C],
print_output.c:									s->value[BRANCH_LIVEWOOD_C],
print_output.c:									s->value[BRANCH_DEADWOOD_C]);
print_output.c:         if (!g_settings->regeneration)
print_output.c:									s->value[MONTHLY_GPP],
print_output.c:									s->value[MONTHLY_ASSIMILATION],
print_output.c:									s->value[MONTHLY_TOTAL_AUT_RESP],
print_output.c:									s->value[MONTHLY_NPP],
print_output.c:									s->value[MONTHLY_CUE],
print_output.c:									s->value[MONTHLY_CANOPY_TRANSP],
print_output.c:									s->value[MONTHLY_CANOPY_EVAPO_TRANSP],
print_output.c:									s->value[MONTHLY_CANOPY_LATENT_HEAT],
print_output.c:									s->value[MONTHLY_LAI_PROJ]/31.,   //divided by 31, otherwise we have value higher than the PEAK_LAI
print_output.c:									s->value[CANOPY_COVER_PROJ],
print_output.c:									s->value[DBHDC_EFF],
print_output.c:									s->value[HD_EFF],
print_output.c:									s->value[HD_MAX],
print_output.c:									s->value[HD_MIN],
print_output.c:									s->counter[N_TREE],
print_output.c:									s->value[MONTHLY_WUE],
print_output.c:									s->value[RESERVE_C],
print_output.c:									s->value[STEM_C],
print_output.c:									s->value[STEM_LIVEWOOD_C],
print_output.c:									s->value[STEM_DEADWOOD_C],
print_output.c:									s->value[MAX_LEAF_C],
print_output.c:									s->value[MAX_FROOT_C],
print_output.c:									s->value[CROOT_C],
print_output.c:									s->value[CROOT_LIVEWOOD_C],
print_output.c:									s->value[CROOT_DEADWOOD_C],
print_output.c:									s->value[BRANCH_C],
print_output.c:									s->value[BRANCH_LIVEWOOD_C],
print_output.c:									s->value[BRANCH_DEADWOOD_C]);
print_output.c:										s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_GPP_SUN]   / s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_GPP_SHADE] / s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_Av_SUN]    / s->value[YEARLY_A_SUN],
print_output.c:										s->value[YEARLY_Aj_SUN]    / s->value[YEARLY_A_SUN],
print_output.c:										s->value[YEARLY_Av_SHADE]  / s->value[YEARLY_A_SHADE],
print_output.c:										s->value[YEARLY_Aj_SHADE]  / s->value[YEARLY_A_SHADE],
print_output.c:										s->value[YEARLY_Av_TOT]    / s->value[YEARLY_A_TOT],
print_output.c:										s->value[YEARLY_Aj_TOT]    / s->value[YEARLY_A_TOT],
print_output.c:										s->value[YEARLY_TOTAL_GROWTH_RESP],
print_output.c:										s->value[YEARLY_TOTAL_MAINT_RESP],
print_output.c:										s->value[YEARLY_TOTAL_AUT_RESP],
print_output.c:										s->value[YEARLY_NPP],
print_output.c:										s->value[YEARLY_BP],
print_output.c:										(s->value[YEARLY_NPP] - s->value[YEARLY_BP]),
print_output.c:										s->value[YEARLY_RESERVE_ALLOC],
print_output.c:										s->value[YEARLY_RESERVE_DEPLE],
print_output.c:										s->value[YEARLY_RESERVE_USAGE],
print_output.c:										(s->value[YEARLY_BP] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_ALLOC] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_ALLOC] / s->value[YEARLY_BP]),
print_output.c:										(s->value[YEARLY_RESERVE_DEPLE] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_DEPLE] / s->value[YEARLY_BP]),
print_output.c:										(s->value[YEARLY_RESERVE_USAGE] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_USAGE] / s->value[YEARLY_BP]),
print_output.c:										s->value[YEARLY_CUE],
print_output.c:										s->value[YEARLY_BPE],
print_output.c:										(s->value[YEARLY_CUE] - s->value[YEARLY_BPE]),
print_output.c:										s->value[YEARLY_TOTAL_AUT_RESP] / s->value[YEARLY_GPP] * 100.,
print_output.c:										s->value[MAX_RESERVE_C_CONC],
print_output.c:										s->value[MIN_RESERVE_C_CONC],
print_output.c:										s->value[PEAK_LAI_PROJ],
print_output.c:										s->value[MAX_LAI_PROJ],
print_output.c:										s->value[SLA_PROJ],
print_output.c:										s->value[SAPWOOD_AREA],
print_output.c:										s->value[HEARTWOOD_AREA],
print_output.c:										s->value[CANOPY_COVER_PROJ],
print_output.c:										s->value[DBHDC_EFF],
print_output.c:										s->value[CROWN_DIAMETER],
print_output.c:										s->value[CROWN_HEIGHT],
print_output.c:										s->value[CROWN_AREA_PROJ],
print_output.c:										s->value[YEARLY_APAR],
print_output.c:										s->counter[N_TREE],
print_output.c:										s->counter[DEAD_TREE],
print_output.c:										s->counter[THINNED_TREE],
print_output.c:										s->counter[YEARLY_VEG_DAYS],
print_output.c:										s->counter[FIRST_VEG_DAYS],
print_output.c:										s->value[YEARLY_CANOPY_TRANSP],
print_output.c:										s->value[YEARLY_CANOPY_INT],
print_output.c:										s->value[YEARLY_CANOPY_LATENT_HEAT],
print_output.c:										s->value[YEARLY_WUE],
print_output.c:										s->value[MAX_ANN_RESERVE_C],
print_output.c:                                                                               s->value[MIN_ANN_RESERVE_C],  //5p6
print_output.c:										s->value[MIN_RESERVE_C],
print_output.c:										s->value[RESERVE_C],
print_output.c:										s->value[STEM_C],
print_output.c:										s->value[STEM_SAPWOOD_C],
print_output.c:										s->value[STEM_HEARTWOOD_C],
print_output.c:										(s->value[STEM_SAPWOOD_C] * 100. ) / s->value[STEM_C],
print_output.c:										s->value[STEM_LIVEWOOD_C],
print_output.c:										s->value[STEM_DEADWOOD_C],
print_output.c:										(s->value[STEM_LIVEWOOD_C] * 100. ) / s->value[STEM_C],
print_output.c:										s->value[MAX_LEAF_C],
print_output.c:										s->value[MAX_FROOT_C],
print_output.c:										s->value[CROOT_C],
print_output.c:										s->value[CROOT_LIVEWOOD_C],
print_output.c:										s->value[CROOT_DEADWOOD_C],
print_output.c:										(s->value[CROOT_LIVEWOOD_C] * 100. ) / s->value[CROOT_C],
print_output.c:										s->value[BRANCH_C],
print_output.c:										s->value[BRANCH_LIVEWOOD_C],
print_output.c:										s->value[BRANCH_DEADWOOD_C],
print_output.c:										(s->value[BRANCH_LIVEWOOD_C] * 100. ) / s->value[BRANCH_C],
print_output.c:										s->value[FRUIT_C],
print_output.c:										s->value[MAX_FRUIT_C],
print_output.c:										s->value[TOT_SAPWOOD_C],
print_output.c:										s->value[TOT_HEARTWOOD_C],
print_output.c:										s->value[RESERVE_N],
print_output.c:										s->value[STEM_N],
print_output.c:										s->value[STEM_LIVEWOOD_N],
print_output.c:										s->value[STEM_DEADWOOD_N],
print_output.c:										s->value[CROOT_N],
print_output.c:										s->value[CROOT_LIVEWOOD_N],
print_output.c:										s->value[CROOT_DEADWOOD_N],
print_output.c:										s->value[BRANCH_N],
print_output.c:										s->value[BRANCH_LIVEWOOD_N],
print_output.c:										s->value[BRANCH_DEADWOOD_N],
print_output.c:										s->value[FRUIT_N],
print_output.c:										s->value[STANDING_WOOD],
print_output.c:										s->value[YEARLY_C_TO_WOOD],
print_output.c:										s->value[CUM_YEARLY_C_TO_WOOD],
print_output.c:										s->value[STAND_BASAL_AREA_m2],
print_output.c:										s->value[TREE_CAI],
print_output.c:										s->value[TREE_MAI],
print_output.c:										s->value[CAI],
print_output.c:										s->value[MAI],
print_output.c:										s->value[VOLUME],
print_output.c:										s->value[TREE_VOLUME],
print_output.c:										(s->value[TREE_CAI]*100.)/s->value[TREE_VOLUME],
print_output.c:										s->value[DELTA_AGB],
print_output.c:										s->value[DELTA_BGB],
print_output.c:										s->value[AGB],
print_output.c:										s->value[BGB],
print_output.c:										s->value[BGB]/s->value[AGB],
print_output.c:										s->value[DELTA_TREE_AGB],
print_output.c:										s->value[DELTA_TREE_BGB],
print_output.c:										s->value[C_HWP],
print_output.c:										s->value[VOLUME_HWP],
print_output.c:										s->value[YEARLY_STEM_AUT_RESP],
print_output.c:										s->value[YEARLY_LEAF_AUT_RESP],
print_output.c:										s->value[YEARLY_FROOT_AUT_RESP],
print_output.c:										s->value[YEARLY_CROOT_AUT_RESP],
print_output.c:										s->value[YEARLY_BRANCH_AUT_RESP]);
print_output.c:                 if (!g_settings->regeneration)
print_output.c:										s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_GPP_SUN]   / s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_GPP_SHADE] / s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_Av_SUN]    / s->value[YEARLY_A_SUN],
print_output.c:										s->value[YEARLY_Aj_SUN]    / s->value[YEARLY_A_SUN],
print_output.c:										s->value[YEARLY_Av_SHADE]  / s->value[YEARLY_A_SHADE],
print_output.c:										s->value[YEARLY_Aj_SHADE]  / s->value[YEARLY_A_SHADE],
print_output.c:										s->value[YEARLY_Av_TOT]    / s->value[YEARLY_A_TOT],
print_output.c:										s->value[YEARLY_Aj_TOT]    / s->value[YEARLY_A_TOT],
print_output.c:										s->value[YEARLY_TOTAL_GROWTH_RESP],
print_output.c:										s->value[YEARLY_TOTAL_MAINT_RESP],
print_output.c:										s->value[YEARLY_TOTAL_AUT_RESP],
print_output.c:										s->value[YEARLY_NPP],
print_output.c:										s->value[YEARLY_BP],
print_output.c:										(s->value[YEARLY_NPP] - s->value[YEARLY_BP]),
print_output.c:										s->value[YEARLY_RESERVE_ALLOC],
print_output.c:										s->value[YEARLY_RESERVE_DEPLE],
print_output.c:										s->value[YEARLY_RESERVE_USAGE],
print_output.c:										(s->value[YEARLY_BP] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_ALLOC] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_ALLOC] / s->value[YEARLY_BP]),
print_output.c:										(s->value[YEARLY_RESERVE_DEPLE] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_DEPLE] / s->value[YEARLY_BP]),
print_output.c:										(s->value[YEARLY_RESERVE_USAGE] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_USAGE] / s->value[YEARLY_BP]),
print_output.c:										s->value[YEARLY_CUE],
print_output.c:										s->value[YEARLY_BPE],
print_output.c:										(s->value[YEARLY_CUE] - s->value[YEARLY_BPE]),
print_output.c:										s->value[YEARLY_TOTAL_AUT_RESP] / s->value[YEARLY_GPP] * 100.,
print_output.c:										s->value[MAX_RESERVE_C_CONC],
print_output.c:										s->value[MIN_RESERVE_C_CONC],
print_output.c:										s->value[PEAK_LAI_PROJ],
print_output.c:										s->value[MAX_LAI_PROJ],
print_output.c:										s->value[SLA_PROJ],
print_output.c:										s->value[SAPWOOD_AREA],
print_output.c:										s->value[HEARTWOOD_AREA],
print_output.c:										s->value[CANOPY_COVER_PROJ],
print_output.c:										s->value[DBHDC_EFF],
print_output.c:										s->value[CROWN_DIAMETER],
print_output.c:										s->value[CROWN_HEIGHT],
print_output.c:										s->value[CROWN_AREA_PROJ],
print_output.c:										s->value[YEARLY_APAR],
print_output.c:										s->counter[N_TREE],
print_output.c:										s->counter[DEAD_TREE],
print_output.c:										s->counter[THINNED_TREE],
print_output.c:										s->counter[YEARLY_VEG_DAYS],
print_output.c:										s->counter[FIRST_VEG_DAYS],
print_output.c:										s->value[YEARLY_CANOPY_TRANSP],
print_output.c:										s->value[YEARLY_CANOPY_INT],
print_output.c:										s->value[YEARLY_CANOPY_LATENT_HEAT],
print_output.c:										s->value[YEARLY_WUE],
print_output.c:										s->value[MAX_ANN_RESERVE_C],
print_output.c:                                                                               s->value[MIN_ANN_RESERVE_C],      //5p6
print_output.c:                                                                               s->value[TREE_MAX_ANN_RESERVE_C], //5p6
print_output.c:                                                                               s->value[TREE_MIN_ANN_RESERVE_C], //5p6
print_output.c:										s->value[MIN_RESERVE_C],
print_output.c:										s->value[RESERVE_C],
print_output.c:										s->value[STEM_C],
print_output.c:										s->value[STEM_SAPWOOD_C],
print_output.c:										s->value[STEM_HEARTWOOD_C],
print_output.c:										(s->value[STEM_SAPWOOD_C] * 100. ) / s->value[STEM_C],
print_output.c:										s->value[STEM_LIVEWOOD_C],
print_output.c:										s->value[STEM_DEADWOOD_C],
print_output.c:										(s->value[STEM_LIVEWOOD_C] * 100. ) / s->value[STEM_C],
print_output.c:										s->value[MAX_LEAF_C],
print_output.c:										s->value[MAX_FROOT_C],
print_output.c:										s->value[CROOT_C],
print_output.c:										s->value[CROOT_LIVEWOOD_C],
print_output.c:										s->value[CROOT_DEADWOOD_C],
print_output.c:										(s->value[CROOT_LIVEWOOD_C] * 100. ) / s->value[CROOT_C],
print_output.c:										s->value[BRANCH_C],
print_output.c:										s->value[BRANCH_LIVEWOOD_C],
print_output.c:										s->value[BRANCH_DEADWOOD_C],
print_output.c:										(s->value[BRANCH_LIVEWOOD_C] * 100. ) / s->value[BRANCH_C],
print_output.c:										s->value[FRUIT_C],
print_output.c:										s->counter[N_SEED], // Added by Saponaro; row76
print_output.c:										s->counter[SEEDLINGS_SURV], //Added by Saponaro; row77
print_output.c:										s->value[MAX_FRUIT_C],
print_output.c:										s->value[TOT_SAPWOOD_C],
print_output.c:										s->value[TOT_HEARTWOOD_C],
print_output.c:										s->value[RESERVE_N],
print_output.c:										s->value[STEM_N],
print_output.c:										s->value[STEM_LIVEWOOD_N],
print_output.c:										s->value[STEM_DEADWOOD_N],
print_output.c:										s->value[CROOT_N],
print_output.c:										s->value[CROOT_LIVEWOOD_N],
print_output.c:										s->value[CROOT_DEADWOOD_N],
print_output.c:										s->value[BRANCH_N],
print_output.c:										s->value[BRANCH_LIVEWOOD_N],
print_output.c:										s->value[BRANCH_DEADWOOD_N],
print_output.c:										s->value[FRUIT_N],
print_output.c:										s->value[STANDING_WOOD],
print_output.c:										s->value[YEARLY_C_TO_WOOD],
print_output.c:										s->value[CUM_YEARLY_C_TO_WOOD],
print_output.c:										s->value[STAND_BASAL_AREA_m2],
print_output.c:										s->value[TREE_CAI],
print_output.c:										s->value[TREE_MAI],
print_output.c:										s->value[CAI],
print_output.c:										s->value[MAI],
print_output.c:										s->value[VOLUME],
print_output.c:										s->value[TREE_VOLUME],
print_output.c:										(s->value[TREE_CAI]*100.)/s->value[TREE_VOLUME],
print_output.c:										s->value[DELTA_AGB],
print_output.c:										s->value[DELTA_BGB],
print_output.c:										s->value[AGB],
print_output.c:										s->value[BGB],
print_output.c:										s->value[BGB]/s->value[AGB],
print_output.c:										s->value[DELTA_TREE_AGB],
print_output.c:										s->value[DELTA_TREE_BGB],
print_output.c:										s->value[C_HWP],
print_output.c:										s->value[VOLUME_HWP],
print_output.c:										s->value[YEARLY_STEM_AUT_RESP],
print_output.c:										s->value[YEARLY_LEAF_AUT_RESP],
print_output.c:										s->value[YEARLY_FROOT_AUT_RESP],
print_output.c:										s->value[YEARLY_CROOT_AUT_RESP],
print_output.c:										s->value[YEARLY_BRANCH_AUT_RESP]);
print_output.c: if (!g_settings->regeneration)
print_output.c:                 if (!g_settings->regeneration)
print_output.c:										s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_GPP_SUN]   / s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_GPP_SHADE] / s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_Av_SUN]    / s->value[YEARLY_A_SUN],
print_output.c:										s->value[YEARLY_Aj_SUN]    / s->value[YEARLY_A_SUN],
print_output.c:										s->value[YEARLY_Av_SHADE]  / s->value[YEARLY_A_SHADE],
print_output.c:										s->value[YEARLY_Aj_SHADE]  / s->value[YEARLY_A_SHADE],
print_output.c:										s->value[YEARLY_Av_TOT]    / s->value[YEARLY_A_TOT],
print_output.c:										s->value[YEARLY_Aj_TOT]    / s->value[YEARLY_A_TOT],
print_output.c:										s->value[YEARLY_TOTAL_GROWTH_RESP],
print_output.c:										s->value[YEARLY_TOTAL_MAINT_RESP],
print_output.c:										s->value[YEARLY_TOTAL_AUT_RESP],
print_output.c:										s->value[YEARLY_NPP],
print_output.c:										s->value[YEARLY_BP],
print_output.c:										(s->value[YEARLY_NPP] - s->value[YEARLY_BP]),
print_output.c:										s->value[YEARLY_RESERVE_ALLOC],
print_output.c:										s->value[YEARLY_RESERVE_DEPLE],
print_output.c:										s->value[YEARLY_RESERVE_USAGE],
print_output.c:										(s->value[YEARLY_BP] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_ALLOC] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_ALLOC] / s->value[YEARLY_BP]),
print_output.c:										(s->value[YEARLY_RESERVE_DEPLE] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_DEPLE] / s->value[YEARLY_BP]),
print_output.c:										(s->value[YEARLY_RESERVE_USAGE] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_USAGE] / s->value[YEARLY_BP]),
print_output.c:										s->value[YEARLY_CUE],
print_output.c:										s->value[YEARLY_BPE],
print_output.c:										(s->value[YEARLY_CUE] - s->value[YEARLY_BPE]),
print_output.c:										s->value[YEARLY_TOTAL_AUT_RESP] / s->value[YEARLY_GPP] * 100.,
print_output.c:										s->value[MAX_RESERVE_C_CONC],
print_output.c:										s->value[MIN_RESERVE_C_CONC],
print_output.c:										s->value[PEAK_LAI_PROJ],
print_output.c:										s->value[MAX_LAI_PROJ],
print_output.c:										s->value[SLA_PROJ],
print_output.c:										s->value[SAPWOOD_AREA],
print_output.c:										s->value[HEARTWOOD_AREA],
print_output.c:										s->value[CANOPY_COVER_PROJ],
print_output.c:										s->value[DBHDC_EFF],
print_output.c:										s->value[CROWN_DIAMETER],
print_output.c:										s->value[CROWN_HEIGHT],
print_output.c:										s->value[CROWN_AREA_PROJ],
print_output.c:										s->value[YEARLY_APAR],
print_output.c:										s->counter[N_TREE],
print_output.c:										s->counter[DEAD_TREE],
print_output.c:										s->counter[THINNED_TREE],
print_output.c:										s->counter[YEARLY_VEG_DAYS],
print_output.c:										s->counter[FIRST_VEG_DAYS],
print_output.c:										s->value[YEARLY_CANOPY_TRANSP],
print_output.c:										s->value[YEARLY_CANOPY_INT],
print_output.c:										s->value[YEARLY_CANOPY_LATENT_HEAT],
print_output.c:										s->value[YEARLY_WUE],
print_output.c:										s->value[MAX_ANN_RESERVE_C],
print_output.c:                                                                               s->value[MIN_ANN_RESERVE_C],       //5p6
print_output.c:                                                                               s->value[TREE_MAX_ANN_RESERVE_C],  //5p6
print_output.c:                                                                               s->value[TREE_MIN_ANN_RESERVE_C],  //5p6
print_output.c:										s->value[MIN_RESERVE_C],
print_output.c:										s->value[RESERVE_C],
print_output.c:										s->value[STEM_C],
print_output.c:										s->value[STEM_SAPWOOD_C],
print_output.c:										s->value[STEM_HEARTWOOD_C],
print_output.c:										(s->value[STEM_SAPWOOD_C] * 100. ) / s->value[STEM_C],
print_output.c:										s->value[STEM_LIVEWOOD_C],
print_output.c:										s->value[STEM_DEADWOOD_C],
print_output.c:										(s->value[STEM_LIVEWOOD_C] * 100. ) / s->value[STEM_C],
print_output.c:										s->value[MAX_LEAF_C],
print_output.c:										s->value[MAX_FROOT_C],
print_output.c:										s->value[CROOT_C],
print_output.c:										s->value[CROOT_LIVEWOOD_C],
print_output.c:										s->value[CROOT_DEADWOOD_C],
print_output.c:										(s->value[CROOT_LIVEWOOD_C] * 100. ) / s->value[CROOT_C],
print_output.c:										s->value[BRANCH_C],
print_output.c:										s->value[BRANCH_LIVEWOOD_C],
print_output.c:										s->value[BRANCH_DEADWOOD_C],
print_output.c:										(s->value[BRANCH_LIVEWOOD_C] * 100. ) / s->value[BRANCH_C],
print_output.c:										s->value[FRUIT_C],
print_output.c:										s->counter[N_SEED], //Added by saponaro; row76
print_output.c:										s->counter[SEEDLINGS_SURV], //Added by saponaro; row77
print_output.c:										s->value[MAX_FRUIT_C],
print_output.c:										s->value[TOT_SAPWOOD_C],
print_output.c:										s->value[TOT_HEARTWOOD_C],
print_output.c:										s->value[RESERVE_N],
print_output.c:										s->value[STEM_N],
print_output.c:										s->value[STEM_LIVEWOOD_N],
print_output.c:										s->value[STEM_DEADWOOD_N],
print_output.c:										s->value[CROOT_N],
print_output.c:										s->value[CROOT_LIVEWOOD_N],
print_output.c:										s->value[CROOT_DEADWOOD_N],
print_output.c:										s->value[BRANCH_N],
print_output.c:										s->value[BRANCH_LIVEWOOD_N],
print_output.c:										s->value[BRANCH_DEADWOOD_N],
print_output.c:										s->value[FRUIT_N],
print_output.c:										s->value[STANDING_WOOD],
print_output.c:										s->value[YEARLY_C_TO_WOOD],
print_output.c:										s->value[CUM_YEARLY_C_TO_WOOD],
print_output.c:										s->value[STAND_BASAL_AREA_m2],
print_output.c:										s->value[TREE_CAI],
print_output.c:										s->value[TREE_MAI],
print_output.c:										s->value[CAI],
print_output.c:										s->value[MAI],
print_output.c:										s->value[VOLUME],
print_output.c:										s->value[TREE_VOLUME],
print_output.c:										(s->value[TREE_CAI]*100.)/s->value[TREE_VOLUME],
print_output.c:										s->value[DELTA_AGB],
print_output.c:										s->value[DELTA_BGB],
print_output.c:										s->value[AGB],
print_output.c:										s->value[BGB],
print_output.c:										s->value[BGB]/s->value[AGB],
print_output.c:										s->value[DELTA_TREE_AGB],
print_output.c:										s->value[DELTA_TREE_BGB],
print_output.c:										s->value[C_HWP],
print_output.c:										s->value[VOLUME_HWP],
print_output.c:										s->value[YEARLY_STEM_AUT_RESP],
print_output.c:										s->value[YEARLY_LEAF_AUT_RESP],
print_output.c:										s->value[YEARLY_FROOT_AUT_RESP],
print_output.c:										s->value[YEARLY_CROOT_AUT_RESP],
print_output.c:										s->value[YEARLY_BRANCH_AUT_RESP]);
print_output.c:                  if (!g_settings->regeneration)
print_output.c:										s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_GPP_SUN]   / s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_GPP_SHADE] / s->value[YEARLY_GPP],
print_output.c:										s->value[YEARLY_Av_SUN]    / s->value[YEARLY_A_SUN],
print_output.c:										s->value[YEARLY_Aj_SUN]    / s->value[YEARLY_A_SUN],
print_output.c:										s->value[YEARLY_Av_SHADE]  / s->value[YEARLY_A_SHADE],
print_output.c:										s->value[YEARLY_Aj_SHADE]  / s->value[YEARLY_A_SHADE],
print_output.c:										s->value[YEARLY_Av_TOT]    / s->value[YEARLY_A_TOT],
print_output.c:										s->value[YEARLY_Aj_TOT]    / s->value[YEARLY_A_TOT],
print_output.c:										s->value[YEARLY_TOTAL_GROWTH_RESP],
print_output.c:										s->value[YEARLY_TOTAL_MAINT_RESP],
print_output.c:										s->value[YEARLY_TOTAL_AUT_RESP],
print_output.c:										s->value[YEARLY_NPP],
print_output.c:										s->value[YEARLY_BP],
print_output.c:										(s->value[YEARLY_NPP] - s->value[YEARLY_BP]),
print_output.c:										s->value[YEARLY_RESERVE_ALLOC],
print_output.c:										s->value[YEARLY_RESERVE_DEPLE],
print_output.c:										s->value[YEARLY_RESERVE_USAGE],
print_output.c:										(s->value[YEARLY_BP] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_ALLOC] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_ALLOC] / s->value[YEARLY_BP]),
print_output.c:										(s->value[YEARLY_RESERVE_DEPLE] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_DEPLE] / s->value[YEARLY_BP]),
print_output.c:										(s->value[YEARLY_RESERVE_USAGE] / s->value[YEARLY_NPP]),
print_output.c:										(s->value[YEARLY_RESERVE_USAGE] / s->value[YEARLY_BP]),
print_output.c:										s->value[YEARLY_CUE],
print_output.c:										s->value[YEARLY_BPE],
print_output.c:										(s->value[YEARLY_CUE] - s->value[YEARLY_BPE]),
print_output.c:										s->value[YEARLY_TOTAL_AUT_RESP] / s->value[YEARLY_GPP] * 100.,
print_output.c:										s->value[MAX_RESERVE_C_CONC],
print_output.c:										s->value[MIN_RESERVE_C_CONC],
print_output.c:										s->value[PEAK_LAI_PROJ],
print_output.c:										s->value[MAX_LAI_PROJ],
print_output.c:										s->value[SLA_PROJ],
print_output.c:										s->value[SAPWOOD_AREA],
print_output.c:										s->value[HEARTWOOD_AREA],
print_output.c:										s->value[CANOPY_COVER_PROJ],
print_output.c:										s->value[DBHDC_EFF],
print_output.c:										s->value[CROWN_DIAMETER],
print_output.c:										s->value[CROWN_HEIGHT],
print_output.c:										s->value[CROWN_AREA_PROJ],
print_output.c:										s->value[YEARLY_APAR],
print_output.c:										s->counter[N_TREE],
print_output.c:										s->counter[DEAD_TREE],
print_output.c:										s->counter[THINNED_TREE],
print_output.c:										s->counter[YEARLY_VEG_DAYS],
print_output.c:										s->counter[FIRST_VEG_DAYS],
print_output.c:										s->value[YEARLY_CANOPY_TRANSP],
print_output.c:										s->value[YEARLY_CANOPY_INT],
print_output.c:										s->value[YEARLY_CANOPY_LATENT_HEAT],
print_output.c:										s->value[YEARLY_WUE],
print_output.c:										s->value[MAX_ANN_RESERVE_C],
print_output.c:                                                                               s->value[MIN_ANN_RESERVE_C],       //5p6
print_output.c:                                                                               s->value[TREE_MAX_ANN_RESERVE_C],  //5p6
print_output.c:                                                                               s->value[TREE_MIN_ANN_RESERVE_C],  //5p6
print_output.c:                                                                               s->value[MIN_RESERVE_C],
print_output.c:										s->value[RESERVE_C],
print_output.c:										s->value[STEM_C],
print_output.c:										s->value[STEM_SAPWOOD_C],
print_output.c:										s->value[STEM_HEARTWOOD_C],
print_output.c:										(s->value[STEM_SAPWOOD_C] * 100. ) / s->value[STEM_C],
print_output.c:										s->value[STEM_LIVEWOOD_C],
print_output.c:										s->value[STEM_DEADWOOD_C],
print_output.c:										(s->value[STEM_LIVEWOOD_C] * 100. ) / s->value[STEM_C],
print_output.c:										s->value[MAX_LEAF_C],
print_output.c:										s->value[MAX_FROOT_C],
print_output.c:										s->value[CROOT_C],
print_output.c:										s->value[CROOT_LIVEWOOD_C],
print_output.c:										s->value[CROOT_DEADWOOD_C],
print_output.c:										(s->value[CROOT_LIVEWOOD_C] * 100. ) / s->value[CROOT_C],
print_output.c:										s->value[BRANCH_C],
print_output.c:										s->value[BRANCH_LIVEWOOD_C],
print_output.c:										s->value[BRANCH_DEADWOOD_C],
print_output.c:										(s->value[BRANCH_LIVEWOOD_C] * 100. ) / s->value[BRANCH_C],
print_output.c:										s->value[FRUIT_C],
print_output.c:										s->counter[N_SEED], //Added by Saponaro; row76
print_output.c:										s->counter[SEEDLINGS_SURV], //Added by Saponaro; row77
print_output.c:										s->value[MAX_FRUIT_C],
print_output.c:										s->value[TOT_SAPWOOD_C],
print_output.c:										s->value[TOT_HEARTWOOD_C],
print_output.c:										s->value[RESERVE_N],
print_output.c:										s->value[STEM_N],
print_output.c:										s->value[STEM_LIVEWOOD_N],
print_output.c:										s->value[STEM_DEADWOOD_N],
print_output.c:										s->value[CROOT_N],
print_output.c:										s->value[CROOT_LIVEWOOD_N],
print_output.c:										s->value[CROOT_DEADWOOD_N],
print_output.c:										s->value[BRANCH_N],
print_output.c:										s->value[BRANCH_LIVEWOOD_N],
print_output.c:										s->value[BRANCH_DEADWOOD_N],
print_output.c:										s->value[FRUIT_N],
print_output.c:										s->value[STANDING_WOOD],
print_output.c:										s->value[YEARLY_C_TO_WOOD],
print_output.c:										s->value[CUM_YEARLY_C_TO_WOOD],
print_output.c:										s->value[STAND_BASAL_AREA_m2],
print_output.c:										s->value[TREE_CAI],
print_output.c:										s->value[TREE_MAI],
print_output.c:										s->value[CAI],
print_output.c:										s->value[MAI],
print_output.c:										s->value[VOLUME],
print_output.c:										s->value[TREE_VOLUME],
print_output.c:										(s->value[TREE_CAI]*100.)/s->value[TREE_VOLUME],
print_output.c:										s->value[DELTA_AGB],
print_output.c:										s->value[DELTA_BGB],
print_output.c:										s->value[AGB],
print_output.c:										s->value[BGB],
print_output.c:										s->value[BGB]/s->value[AGB],
print_output.c:										s->value[DELTA_TREE_AGB],
print_output.c:										s->value[DELTA_TREE_BGB],
print_output.c:										s->value[C_HWP],
print_output.c:										s->value[VOLUME_HWP],
print_output.c:										s->value[YEARLY_STEM_AUT_RESP],
print_output.c:										s->value[YEARLY_LEAF_AUT_RESP],
print_output.c:										s->value[YEARLY_FROOT_AUT_RESP],
print_output.c:										s->value[YEARLY_CROOT_AUT_RESP],
print_output.c:										s->value[YEARLY_BRANCH_AUT_RESP]);
recruitment.c:	logger(g_debug_log, "Intrinsic Germinability Rate = %f %% \n", s->value[GERMCAPACITY] * 100);
recruitment.c:	logger(g_debug_log, "Annual Number of seeds using LPJ  = %d seeds/ha/year\n", s->counter[N_SEED]);
recruitment.c:	   LightAbsorb = 1 -  (exp(- s->value[K] * s->value[LAI]));
recruitment.c:	   EstabRate = s->value[GERMCAPACITY] * (1 - exp((-5) * (1 - FProCov))) * (1 - FProCov);
recruitment.c:	EstabRate = (s->value[GERMCAPACITY] * (1 - exp((-5) * (1 - meteo_daily->par))) * (1 - meteo_daily->par)) / s->counter[N_TREE];
recruitment.c:	s->counter[N_TREE_SAP] = (int)(s->counter[N_SEED] * EstabRate);
recruitment.c:	logger(g_debug_log, "Annual Number of Saplings using LPJ = %f Saplings/year m^2\n", (double) Nsapling / g_settings->sizeCell );
recruitment.c:	logger(g_debug_log, "Percentage of seeds survived using LPJ = %f %% seeds/year hectare\n", ((double)Nsapling * 100)/(double)s->counter[N_SEED] );
recruitment.c:	p = string_copy(s->name);
recruitment.c:    a->species[a->species_count-1].counter[N_TREE]  = s->counter[SEEDLINGS_SURV];
recruitment.c:       //printf("Name species = %s\n", s->name);
recruitment.c:    s->counter[SEEDLINGS_TO_SAPLINGS] = malloc(sizeof(s->counter[SEEDLINGS_TO_SAPLINGS]));
recruitment.c:	if (s->counter[SEEDLINGS_TO_SAPLINGS] == NULL) {
regeneration.c:	fruit_gDM = s->value[FRUIT_C] * 1000000 * GC_GDM;
regeneration.c:	seeds_number = (int)(fruit_gDM / s->value[WEIGHTSEED]);
regeneration.c:	logger(g_debug_log, "fruit biomass= %g tC\n", s->value[FRUIT_C]);
regeneration.c:	s->value[FRUIT_C] = 0.;
regeneration.c:	saplings_number = (int)(seeds_number * s->value[GERMCAPACITY]);
regeneration.c:	logger(g_debug_log, "name = %s\n", s->name);
regeneration.c:	g_settings->regeneration_n_tree = saplings_number;
regeneration.c:	strncpy(g_settings->regeneration_species, ((const char*)s->name), SETTINGS_REGENERATION_SPECIES_MAX_SIZE-1);
regeneration.c:	if( g_settings->regeneration_n_tree )
regeneration.c:            N_seed_vitality = s->counter[N_SEED] * SEED_VITALITY;
regeneration.c:            Seedlings_Number = N_seed_vitality * s->value[GERMCAPACITY];
regeneration.c:            s->counter[SEEDLINGS] = Seedlings_Number;
regeneration.c:           // printf("Seedlings = \t%d\n", s->counter[SEEDLINGS]);
regeneration.c:    //printf("Seedlings = \t%d\n", s->counter[SEEDLINGS]);
regeneration.c:// s->counter[SEEDLINGS] = Seedlings_Number;
regeneration.c:        if (SumTerm >= s->value[GDD_SEED] && Soil_T > 5. && swp >= -0.2) {
regeneration.c:    			Seedlings_Number = (s->counter[TANK_SEEDS] * 0.62);
regeneration.c:                s->counter[TANK_SEEDS] = 0.;
regeneration.c:                s->counter[SEEDLINGS] = Seedlings_Number;
regeneration.c:                s->counter[SEEDLINGS_POOL] += s->counter[SEEDLINGS];
regeneration.c:        else if (SumTerm >= s->value[GDD_SEED] && Soil_T > 5. && swp < -0.2 && swp >= -0.6) {
regeneration.c:    			Seedlings_Number = (s->counter[TANK_SEEDS] * 0.48);
regeneration.c:    			s->counter[TANK_SEEDS] = 0.;
regeneration.c:                s->counter[SEEDLINGS] = Seedlings_Number;
regeneration.c:                s->counter[SEEDLINGS_POOL] += s->counter[SEEDLINGS];
regeneration.c:        else if (SumTerm >= s->value[GDD_SEED] && Soil_T > 5. && swp < -0.6 && swp >= -1.2) {
regeneration.c:    			Seedlings_Number = (s->counter[TANK_SEEDS] * 0.20);
regeneration.c:                s->counter[TANK_SEEDS] = 0.;
regeneration.c:                s->counter[SEEDLINGS] = Seedlings_Number;
regeneration.c:                s->counter[SEEDLINGS_POOL] += s->counter[SEEDLINGS];
regeneration.c:  printf("Seeds = %ld\n", s->counter[N_SEED]);
regeneration.c:  printf("Tankseeds = %ld\n", s->counter[TANK_SEEDS]);
regeneration.c:  printf("Seedlings = %d\n", s->counter[SEEDLINGS]);
regeneration.c:  printf("Seedlings_pool = %d\n", s->counter[SEEDLINGS_POOL]);
regeneration.c:  Seedlings_Number = s->counter[SEEDLINGS];
regeneration.c:  Seedlings_pool = s->counter[SEEDLINGS_POOL];
regeneration.c:    if ( meteo_daily->thermic_sum >= s->value[GDD_SEED] &&  meteo_daily->sw_downward_W >= 0. && c->asw >= 0. && c->psi < min_psi) {
regeneration.c:        yos[*yos_count-1].m[month].d[day].s->counter[N_SEED] = yos[*yos_count-2].m[month].d[day].s->counter[N_SEED];
regeneration.c:         Seedlings_Number = (s->counter[TANK_SEEDS] * s->value[GERMCAPACITY]);
regeneration.c:         s->counter[SEEDLINGS] = Seedlings_Number;
regeneration.c:         s->counter[SEEDLINGS] = 0;
regeneration.c:         s->counter[SEEDLINGS_POOL] += s->counter[SEEDLINGS];
regeneration.c:         } while (s->counter[TANK_SEEDS] = 0);
regeneration.c:   Saplings_Number = s->counter[SEEDLINGS_POOL] * 0.70; //Value observed in MUffler L. er al., 2021
regeneration.c:   s->counter[SAPLINGS] = Saplings_Number;
regeneration.c:   s->counter[SAPLINGS_POOL] += s->counter[SAPLINGS];
regeneration.c:   //printf("Saplings = %d\n", s->counter[SAPLINGS]);
regeneration.c:       } while (s->counter[SEEDLINGS_POOL] = 0.);
regeneration.c:    s->counter[SAPLINGS] = 0;
regeneration.c:     // printf("Seeds = %d\n", s->counter[N_SEED]);
regeneration.c:     // printf("Tankseeds = %d\n", s->counter[TANK_SEEDS]);
regeneration.c:     // printf("Seedlings = %d\n", s->counter[SEEDLINGS]);
regeneration.c:     // printf("Seedlings_pool = %d\n", s->counter[SEEDLINGS_POOL]);
regeneration.c:     // printf("Saplings = %d\n", s->counter[SAPLINGS]);
regeneration.c:     // printf("Saplings_pool = %d\n", s->counter[SAPLINGS_POOL]);
regeneration.c:		if (meteo_daily->seedling_par >= s->value[SURV_PAR] && meteo_daily->seedling_temp <= s->value[SURV_TEMP]) {
regeneration.c:			Seedlings_surv = (s->counter[SEEDLINGS] * 0.7); //L.Muffler et al.2021 0.70
regeneration.c:            s->counter[SEEDLINGS_SURV] = Seedlings_surv;
regeneration.c:        else if (meteo_daily->seedling_par >= s->value[SURV_PAR] && meteo_daily->seedling_temp > s->value[SURV_TEMP]) {
regeneration.c:	        Seedlings_surv = (s->counter[SEEDLINGS] * 0.55); //L.Muffler et al.2021 0.55
regeneration.c:            s->counter[SEEDLINGS_SURV] = Seedlings_surv;
regeneration.c:        else if (meteo_daily->seedling_par < s->value[SURV_PAR] && meteo_daily->seedling_temp < s->value[SURV_TEMP]) {
regeneration.c:			Seedlings_surv = (s->counter[SEEDLINGS] * 0.3); //L.Muffler et al.2021 0.30
regeneration.c:            s->counter[SEEDLINGS_SURV] = Seedlings_surv;
regeneration.c:        else if (meteo_daily->seedling_par < s->value[SURV_PAR] && meteo_daily->seedling_temp > s->value[SURV_TEMP]) {
regeneration.c:			Seedlings_surv = (s->counter[SEEDLINGS] * 0.2); //L.Muffler et al.2021 0.20
regeneration.c:            s->counter[SEEDLINGS_SURV] = Seedlings_surv;
regeneration.c:      s->counter[SEEDLINGS_POOL] += s->counter[SEEDLINGS_SURV];
remove_tree_class.c:	if ( s->name ) {
remove_tree_class.c:		free(s->name);
remove_tree_class.c:		s->name = NULL;
remove_tree_class.c:			|| g_settings->management ) {
remove_tree_class.c:			/*|| g_settings->management*/ ) {	
settings.c:	s->replanted_count = temp_count;
settings.c:	s->replanted = malloc(s->replanted_count*sizeof*s->replanted);
settings.c:	if ( ! s->replanted )
settings.c:	for ( i = 0; i < s->replanted_count; i++ )
settings.c:		strcpy(s->replanted[i].species, temp[i].values.species);
settings.c:		s->replanted[i].management = temp[i].values.management;
settings.c:		s->replanted[i].n_tree = temp[i].values.n_tree;
settings.c:		s->replanted[i].age = temp[i].values.age;
settings.c:		s->replanted[i].avdbh = temp[i].values.avdbh;
settings.c:		s->replanted[i].lai = temp[i].values.lai;
settings.c:		s->replanted[i].height = temp[i].values.height;
settings.c:	assert(!s->prunings);
settings.c:	s->prunings = malloc(rows_count*sizeof*prunings);
settings.c:	if ( ! s->prunings ) {
settings.c:						s->prunings[row].year = (int)v;
settings.c:						s->prunings[row].month = (int)v;
settings.c:						s->prunings[row].day = (int)v;
settings.c:						s->prunings[row].intensity = v;
settings.c:						s->prunings[row].height = v;
settings.c:		s->prunings_count = imported_rows;
settings.c:	if ( ! s->prunings_count ) {
settings.c:		for ( i = 0; i < s->prunings_count; ++i )
settings.c:			year = s->prunings[i].year;
settings.c:			month = s->prunings[i].month;
settings.c:			day = s->prunings[i].day;
settings.c:		s->prunings_count = 0;
settings.c:		if ( s->prunings ) {
settings.c:			free(s->prunings);
settings.c:			s->prunings = NULL;
settings.c:	assert(!s->irrigations);
settings.c:	s->irrigations = malloc(rows_count*sizeof*irrigations);
settings.c:	if ( ! s->irrigations ) {
settings.c:						s->irrigations[row].year = (int)v;
settings.c:						s->irrigations[row].month = (int)v;
settings.c:						s->irrigations[row].day = (int)v;
settings.c:						s->irrigations[row].amount = v;
settings.c:		s->irrigations_count = imported_rows;
settings.c:	if ( ! s->irrigations_count ) {
settings.c:		for ( i = 0; i < s->irrigations_count; ++i )
settings.c:			year = s->irrigations[i].year;
settings.c:			month = s->irrigations[i].month;
settings.c:			day = s->irrigations[i].day;
settings.c:		s->irrigations_count = 0;
settings.c:		if ( s->irrigations ) {
settings.c:			free(s->irrigations);
settings.c:			s->irrigations = NULL;
settings.c:				strncpy(s->sitename, token, SETTINGS_SITENAME_MAX_SIZE-1);
settings.c:				s->version = *token;
settings.c:				s->spatial = *token;
settings.c:				s->time = *token;
settings.c:				if ( s->time != 'd' ) {
settings.c:					s->spinup = 1;
settings.c:					s->screen_output = 1;
settings.c:					s->debug_output = 1;
settings.c:					s->daily_output = 1;
settings.c:					s->monthly_output = 1;
settings.c:					s->yearly_output = 1;
settings.c:					s->soil_output = 1;
settings.c:					s->netcdf_output = 1;
settings.c:					s->CO2_trans = CO2_TRANS_ON;
settings.c:					s->CO2_trans = CO2_TRANS_VAR;
settings.c:					s->Ndep_fixed = 1;
settings.c:					s->Photo_accl = 1;
settings.c:					s->Resp_accl = 1;
settings.c:					s->replanting = 1;
settings.c:			        s->regeneration = 1;
settings.c:					s->management = MANAGEMENT_ON;
settings.c:					s->management = MANAGEMENT_VAR;
settings.c:					s->management = MANAGEMENT_VAR1;
settings.c:					s->Prog_Aut_Resp = 1;
settings.c:					s->thinning_regime = THINNING_REGIME_BELOW;
settings.c:				strncpy(s->replanting_species, (const char*)token, SETTINGS_REPLANTING_SPECIES_MAX_SIZE-1);
settings.c:					s->replanting_management = T;
settings.c:					s->replanting_management = C;
settings.c:					s->replanting_management = N;
settings.c:						s->spinup_years = (int)value;
settings.c:						s->year_start = (int)value;
settings.c:						s->year_end = (int)value;
settings.c:						s->year_restart = (int)value;
settings.c:						s->PSN_mod = (int)value;
settings.c:						s->year_start_co2_fixed = (int)value;
settings.c:						s->Tbase_resp = value;
settings.c:						s->year_start_management = (int)value;
settings.c:						s->management_type = (int)value;
settings.c:						s->sizeCell = value;
settings.c:						s->sizeCell *= s->sizeCell;
settings.c:						s->Fixed_Aut_Resp_rate = value;
settings.c:						s->co2Conc = value;
settings.c:						s->co2_incr = value;
settings.c:						s->init_frac_maxasw = value;
settings.c:						s->tree_layer_limit = value;
settings.c:						s->number_of_soil_layer = value;
settings.c:						s->max_layer_cover = value;
settings.c:						s->replanting_n_tree = value;
settings.c:						s->replanting_age = value;
settings.c:						s->replanting_avdbh = value;
settings.c:						s->replanting_lai = value;
settings.c:						s->replanting_height = value;
settings.c:	if ( 0 == s->year_restart ) {
settings.c:		s->year_restart = -1;
settings.c:	} else if ( (s->year_restart <= s->year_start) || (s->year_restart >= s->year_end) ) {
settings.c:					, s->year_start+1
settings.c:					, s->year_end-1
settings.c:					, s->year_restart
settings.c:		if ( s->irrigations_count )
settings.c:			free(s->irrigations);
settings.c:		if ( s->prunings_count )
settings.c:			free(s->prunings);
settings.c:		if ( s->replanted_count )
settings.c:			free(s->replanted);
soil_evaporation.c:			/* reset days-since-rain parameter */
soil_model.c:	CHECK_CONDITION( c->soil_layers_count, !=, g_settings->number_of_soil_layer );
soil_model.c:			if ( g_settings->irrigations_count ) {
soil_model.c:				for ( i = 0; i < g_settings->irrigations_count; ++i ) {
soil_model.c:					if ( (year+g_settings->year_start == g_settings->irrigations[i].year)
soil_model.c:							&& (month == g_settings->irrigations[i].month-1)
soil_model.c:							&& (day == g_settings->irrigations[i].day-1) ) {
soil_model.c:								c->daily_irrigation = g_settings->irrigations[i].amount;
soil_respiration.c:	double daily_soil_resp_mol;   /* soil respiration, umolC m-2 s-1 */
soil_respiration.c:	/* soil respiration in umol m-2 s-1 */
soil_respiration.c:	double daily_soil_resp_mol;   /* soil respiration, (umol m-2 s-1) */
soil_respiration.c:	double Rref;                  /* reference soil respiration (at Tsoil = 18°C and non-limiting water) (umol m-2 s-1) */
soil_respiration.c:	/* soil respiration in umol m-2 s-1 */
structure.c:			if ( (c->heights[height+1].value - c->heights[height].value) > g_settings->tree_layer_limit )
structure.c:		//if ( (c->heights[height].value - c->heights[height-1].value) > g_settings->tree_layer_limit )
structure.c:		if ( height && (c->heights[height].value - c->heights[height-1].value) > g_settings->tree_layer_limit )
structure.c:								c->tree_layers[layer].layer_n_trees += s->counter[N_TREE];
structure.c:		c->tree_layers[layer].layer_density = c->tree_layers[layer].layer_n_trees / g_settings->sizeCell;
structure.c:							c->tree_layers[layer].layer_cover_proj += s->value[CANOPY_COVER_PROJ];
structure.c:								if ( s->value[DBHDC_EFF] <= s->value[DBHDCMIN] )   //ddalmo may23: test include if layer_cc_proj > max_layer_cc_proj
structure.c:							/*if ( ( ( c->years[year].year >= g_settings->year_start_management ) && ( MANAGEMENT_VAR == g_settings->management ) )
structure.c:									|| ( MANAGEMENT_OFF == g_settings->management ) )
structure.c:								if ( s->value[DBHDC_EFF] <= s->value[DBHDCMIN] )
structure.c:					c->n_trees += s->counter[N_TREE];
structure.c:							if ( s->value[LAI_PROJ] )
structure.c:								s->value[DAILY_CANOPY_COVER_PROJ] = s->value[CANOPY_COVER_PROJ];
structure.c:								if( s->value[DAILY_CANOPY_COVER_PROJ] > 1. ) s->value[DAILY_CANOPY_COVER_PROJ] = 1.;
structure.c:								//s->value[DAILY_CANOPY_COVER_EXP] = s->value[CANOPY_COVER_EXP];
structure.c:								//if( s->value[DAILY_CANOPY_COVER_EXP] > 1. ) s->value[DAILY_CANOPY_COVER_EXP] = 1.;
structure.c:								//if ( layer == c->heights[height].height_z ) s->value[DAILY_CANOPY_COVER_EXP] *= l->layer_tree_height_modifier ;
structure.c:								//if( s->value[DAILY_CANOPY_COVER_EXP] > 1. ) s->value[DAILY_CANOPY_COVER_EXP] = 1.;
structure.c:								c->tree_layers[layer].daily_layer_cover_proj += s->value[DAILY_CANOPY_COVER_PROJ];
structure.c:								//c->tree_layers[layer].daily_layer_cover_exp  += s->value[DAILY_CANOPY_COVER_EXP];
structure.c:							logger(g_debug_log, "-Species %s DAILY_CANOPY_COVER_PROJ = %f\n", s->name, s->value[DAILY_CANOPY_COVER_PROJ]);
structure.c:							//logger(g_debug_log, "-Species %s DAILY_CANOPY_COVER_EXP  = %f\n", s->name, s->value[DAILY_CANOPY_COVER_EXP]);
structure.c://							if ( s->value[LAI_PROJ] )
structure.c://								max_cover       = s->value[DAILY_CANOPY_COVER_EXP];
structure.c://								min_cover       = s->value[DAILY_CANOPY_COVER_PROJ];
structure.c://								s->value[DAILY_CANOPY_COVER_EXP] = cum_temp_cover / daylength;
structure.c://							logger(g_debug_log, "-Species %s DAILY_CANOPY_COVER_PROJ = %f\n", s->name, s->value[DAILY_CANOPY_COVER_PROJ]);
structure.c://							logger(g_debug_log, "-Species %s DAILY_CANOPY_COVER_EXP  = %f\n", s->name, s->value[DAILY_CANOPY_COVER_EXP]);
structure.c://							CHECK_CONDITION ( s->value[DAILY_CANOPY_COVER_EXP], > , 1 )
structure.c:					s->value[DAILY_CANOPY_COVER_EXP] *=s->value[F_LIGHT_VERT];
structure.c:					logger(g_debug_log, "-Species %s test_daily_conopy_cover_exp  = %f\n", s->name, s->value[DAILY_CANOPY_COVER_EXP]);
tree_model.c:#include "C-deciduous-partitioning.h"
tree_model.c:               //if (MANAGEMENT_VAR == g_settings->management || MANAGEMENT_ON == g_settings->management)
tree_model.c:									"*****************************************************************************\n", s->name);
tree_model.c:							++s->counter[DOS];
tree_model.c:							if ( ! day && ! month ) ++s->counter[MOS];
tree_model.c:							if ( ! day && ! month ) ++s->counter[YOS];
tree_model.c:							/* compute species-specific phenological phase */
tree_model.c:							if ( ! g_settings->PSN_mod )
tree_model.c:							else if ( g_settings->PSN_mod == 1 )
tree_model.c:							if ( s->value[PHENOLOGY] == 0.1 || s->value[PHENOLOGY] == 0.2 )
tree_model.c:                                        //if ( g_settings->management == MANAGEMENT_VAR || g_settings->management == MANAGEMENT_VAR1)
tree_model.c:                                        if ( g_settings->management == MANAGEMENT_VAR)
tree_model.c:								if ( c->years[year].year > g_settings->year_start_management && g_settings->management != MANAGEMENT_VAR )
tree_model.c:                        if ( g_settings->Natural_regeneration) {
tree_model.c:                                   //printf("Carbon fruit = %f\n", s->value[MAX_FRUIT_C]);
tree_model.c:                                   //printf("Seed = %ld\n", s->counter[N_SEED]);
tree_model.c:                                     if (year && meteo_daily->spring_thermic_sum >= s->value[GDD_SEED])
tree_model.c://if ( meteo_daily->spring_thermic_sum >= s->value[GDD_SEED])
tree_model.c:                                         //printf("Seedlings = \t%d\n", s->counter[SEEDLINGS]);
tree_model.c:                                     //printf("Carbon fruit = %f\n", s->value[MAX_FRUIT_C]);
tree_model.c:                                     //printf("Seed = %ld\n", s->counter[N_SEED]);
tree_model.c:                                     //printf("tank =   %ld\n", s->counter[TANK_SEEDS]);
tree_model.c:                                     //printf("Seedlings = \t%d\n", s->counter[SEEDLINGS]);
tree_model.c:                                     //printf("Seedlings pool = %d\n", s->counter[SEEDLINGS_POOL]);
tree_model.c:                                     //printf("Seedlings surv =  \t%d\n", s->counter[SEEDLINGS_SURV]);
tree_model.c:        if ( g_settings->Natural_regeneration) {
tree_model.c:                  //printf("Carbon fruit = %f\n", s->value[MAX_FRUIT_C]);
tree_model.c:                  //printf("Seed = %ld\n", s->counter[N_SEED]);
tree_model.c:                        if (year && meteo_daily->spring_thermic_sum >= s->value[GDD_SEED])
tree_model.c:                           //printf("Seedlings = \t%d\n", s->counter[SEEDLINGS]);
tree_model.c:                             s->counter[SEEDLINGS_SURV] = 0;
tree_model.c:                                //printf("Name species = %s\n", s->name);
tree_model_check_balance.c:	in = s->value[PAR];
tree_model_check_balance.c:	out = s->value[PAR_REFL] + s->value[TRANSM_PAR];
tree_model_check_balance.c:	store = s->value[APAR_SUN] + s->value[APAR_SHADE];
tree_model_check_balance.c:	in      = s->value[SW_RAD];
tree_model_check_balance.c:	out     = s->value[SW_RAD_REFL] + s->value[SW_RAD_TRANSM];
tree_model_check_balance.c:	store   = s->value[SW_RAD_ABS_SUN] + s->value[SW_RAD_ABS_SHADE];
tree_model_check_balance.c:	in      = s->value[GPP];
tree_model_check_balance.c:	out     = s->value[TOTAL_GROWTH_RESP] + s->value[TOTAL_MAINT_RESP];
tree_model_check_balance.c:	store   = s->value[NPP];
tree_model_check_balance.c:		error_log("GPP            = %g gC/m2/day\n", s->value[GPP]);
tree_model_check_balance.c:		error_log("TOTAL_AUT_RESP = %g gC/m2/day\n", s->value[TOTAL_AUT_RESP]);
tree_model_check_balance.c:		error_log("NPP            = %g gC/m2/day\n", s->value[NPP]);
tree_model_check_balance.c:	in      = s->value[GPP_tC];
tree_model_check_balance.c:	out     = s->value[TOTAL_MAINT_RESP_tC] +
tree_model_check_balance.c:			s->value[TOTAL_GROWTH_RESP_tC]  +
tree_model_check_balance.c:			s->value[C_LEAF_TO_LITR]        +
tree_model_check_balance.c:			s->value[C_FROOT_TO_LITR]       +
tree_model_check_balance.c:			s->value[C_STEM_TO_CWD]         +
tree_model_check_balance.c:			s->value[C_CROOT_TO_CWD]        +
tree_model_check_balance.c:			s->value[C_BRANCH_TO_CWD]       +
tree_model_check_balance.c:			s->value[C_RESERVE_TO_CWD]      +
tree_model_check_balance.c:			s->value[C_FRUIT_TO_CWD]        ;
tree_model_check_balance.c:	store   = s->value[C_TO_LEAF]  +
tree_model_check_balance.c:			s->value[C_TO_STEM]    +
tree_model_check_balance.c:			s->value[C_TO_FROOT]   +
tree_model_check_balance.c:			s->value[C_TO_CROOT]   +
tree_model_check_balance.c:			s->value[C_TO_BRANCH]  +
tree_model_check_balance.c:			s->value[C_TO_RESERVE] +
tree_model_check_balance.c:			s->value[C_TO_FRUIT]   ;
tree_model_check_balance.c:		error_log("GPP_gC            = %g tC/cell/day\n", s->value[GPP_tC]);
tree_model_check_balance.c:		error_log("TOTAL_MAINT_RESP  = %g tC/cell/day\n", s->value[TOTAL_MAINT_RESP_tC]);
tree_model_check_balance.c:		error_log("TOTAL_GROWTH_RESP = %g tC/cell/day\n", s->value[TOTAL_GROWTH_RESP_tC]);
tree_model_check_balance.c:		error_log("C_LEAF_TO_LITR    = %g tC/cell/day\n", s->value[C_LEAF_TO_LITR]);
tree_model_check_balance.c:		error_log("C_FROOT_TO_LITR   = %g tC/cell/day\n", s->value[C_FROOT_TO_LITR]);
tree_model_check_balance.c:		error_log("C_STEM_TO_CWD     = %g tC/cell/day\n", s->value[C_STEM_TO_CWD]);
tree_model_check_balance.c:		error_log("C_CROOT_TO_CWD    = %g tC/cell/day\n", s->value[C_CROOT_TO_CWD]);
tree_model_check_balance.c:		error_log("C_BRANCH_TO_CWD   = %g tC/cell/day\n", s->value[C_BRANCH_TO_CWD]);
tree_model_check_balance.c:		error_log("C_RESERVE_TO_CWD  = %g tC/cell/day\n", s->value[C_RESERVE_TO_CWD]);
tree_model_check_balance.c:		error_log("C_FRUIT_TO_CWD    = %g tC/cell/day\n", s->value[C_FRUIT_TO_CWD]);
tree_model_check_balance.c:		error_log("C_TO_LEAF         = %g tC/cell/day\n", s->value[C_TO_LEAF]);
tree_model_check_balance.c:		error_log("C_TO_FROOT        = %g tC/cell/day\n", s->value[C_TO_FROOT]);
tree_model_check_balance.c:		error_log("C_TO_STEM         = %g tC/cell/day\n", s->value[C_TO_STEM]);
tree_model_check_balance.c:		error_log("C_TO_CROOT        = %g tC/cell/day\n", s->value[C_TO_CROOT]);
tree_model_check_balance.c:		error_log("C_TO_BRANCH       = %g tC/cell/day\n", s->value[C_TO_BRANCH]);
tree_model_check_balance.c:		error_log("C_TO_RESERVE      = %g tC/cell/day\n", s->value[C_TO_RESERVE]);
tree_model_check_balance.c:		error_log("C_TO_FRUIT        = %g tC/cell/day\n", s->value[C_TO_FRUIT]);
tree_model_check_balance.c:         //printf("LEAF_C               = %g tC/cell/day\n", s->value[LEAF_C]);
tree_model_check_balance.c:		//printf("FROOT_C              = %g tC/cell/day\n", s->value[FROOT_C]);
tree_model_check_balance.c:		//printf("CROOT_C              = %g tC/cell/day\n", s->value[CROOT_C]);
tree_model_check_balance.c:		//printf("STEM_C               = %g tC/cell/day\n", s->value[STEM_C]);
tree_model_check_balance.c:		//printf("BRANCH_C             = %g tC/cell/day\n", s->value[BRANCH_C]);
tree_model_check_balance.c:		//printf("RESERVE_C            = %g tC/cell/day\n", s->value[RESERVE_C]);
tree_model_check_balance.c:		//printf("FRUIT_C              = %g tC/cell/day\n", s->value[FRUIT_C]);
tree_model_check_balance.c:		//printf("ntree              = %d npiante/class\n", s->counter[N_TREE]);
tree_model_check_balance.c:		//printf("mant respirs2             = %g tC/cell/day\n", s->value[TOTAL_MAINT_RESP_tC]);
tree_model_check_balance.c:	s->value[TREEC_IN]    = s->value[GPP_tC];
tree_model_check_balance.c:	s->value[TREEC_OUT]   = s->value[TOTAL_MAINT_RESP_tC] +
tree_model_check_balance.c:			s->value[TOTAL_GROWTH_RESP_tC]                +
tree_model_check_balance.c:			s->value[C_LEAF_TO_LITR]                      +
tree_model_check_balance.c:			s->value[C_FROOT_TO_LITR]                     +
tree_model_check_balance.c:			s->value[C_BRANCH_TO_CWD]                     +
tree_model_check_balance.c:			s->value[C_STEM_TO_CWD]                       +
tree_model_check_balance.c:			s->value[C_CROOT_TO_CWD]                      +
tree_model_check_balance.c:			s->value[C_RESERVE_TO_CWD]                    +
tree_model_check_balance.c:			s->value[C_FRUIT_TO_CWD]                      ;
tree_model_check_balance.c:	s->value[TREEC_STORE] = s->value[LEAF_C] +
tree_model_check_balance.c:			s->value[FROOT_C]                +
tree_model_check_balance.c:			s->value[CROOT_C]                +
tree_model_check_balance.c:			s->value[STEM_C]                 +
tree_model_check_balance.c:			s->value[BRANCH_C]               +
tree_model_check_balance.c:			s->value[RESERVE_C]              +
tree_model_check_balance.c:			s->value[FRUIT_C]                ;
tree_model_check_balance.c:	s->value[TREEC_BALANCE] = s->value[TREEC_IN] - s->value[TREEC_OUT] - ( s->value[TREEC_STORE] - s->value[TREEC_OLDSTORE] );
tree_model_check_balance.c:	if ( ( fabs( s->value[TREEC_BALANCE] ) > eps ) && s->counter[DOS] > 1 && c->doy != 1 )
tree_model_check_balance.c:		error_log("TREE DOS             = %d\n",             s->counter[DOS]);
tree_model_check_balance.c:		error_log("\nin                 = %g tC/cell/day\n", s->value[TREEC_IN]);
tree_model_check_balance.c:		error_log("GPP                  = %g tC/cell\n",     s->value[GPP_tC]);
tree_model_check_balance.c:		error_log("\nout                = %g tC/cell/day\n", s->value[TREEC_OUT]);
tree_model_check_balance.c:		error_log("TOTAL_MAINT_RESP_tC  = %g tC/cell/day\n", s->value[TOTAL_MAINT_RESP_tC]);
tree_model_check_balance.c:		error_log("TOTAL_GROWTH_RESP_tC = %g tC/cell/day\n", s->value[TOTAL_GROWTH_RESP_tC]);
tree_model_check_balance.c:		error_log("C_LEAF_TO_LITR       = %g tC/cell/day\n", s->value[C_LEAF_TO_LITR]);
tree_model_check_balance.c:		error_log("C_FROOT_TO_LITR      = %g tC/cell/day\n", s->value[C_FROOT_TO_LITR]);
tree_model_check_balance.c:		error_log("C_STEM_TO_CWD        = %g tC/cell/day\n", s->value[C_STEM_TO_CWD]);
tree_model_check_balance.c:		error_log("C_BRANCH_TO_CWD      = %g tC/cell/day\n", s->value[C_BRANCH_TO_CWD]);
tree_model_check_balance.c:		error_log("C_CROOT_TO_CWD       = %g tC/cell/day\n", s->value[C_CROOT_TO_CWD]);
tree_model_check_balance.c:		error_log("C_RESERVE_TO_CWD     = %g tC/cell/day\n", s->value[C_RESERVE_TO_CWD]);
tree_model_check_balance.c:		error_log("C_FRUIT_TO_CWD       = %g tC/cell/day\n", s->value[C_FRUIT_TO_CWD]);
tree_model_check_balance.c:		error_log("\nold_store          = %g tC/cell\n",     s->value[TREEC_OLDSTORE]);
tree_model_check_balance.c:		error_log("store                = %g tC/cell\n",     s->value[TREEC_STORE]);
tree_model_check_balance.c:		error_log("store - old_store    = %g tC/cell\n",     s->value[TREEC_STORE] - s->value[TREEC_OLDSTORE]);
tree_model_check_balance.c:		error_log("LEAF_C               = %g tC/cell/day\n", s->value[LEAF_C]);
tree_model_check_balance.c:		error_log("FROOT_C              = %g tC/cell/day\n", s->value[FROOT_C]);
tree_model_check_balance.c:		error_log("CROOT_C              = %g tC/cell/day\n", s->value[CROOT_C]);
tree_model_check_balance.c:		error_log("STEM_C               = %g tC/cell/day\n", s->value[STEM_C]);
tree_model_check_balance.c:		error_log("BRANCH_C             = %g tC/cell/day\n", s->value[BRANCH_C]);
tree_model_check_balance.c:		error_log("RESERVE_C            = %g tC/cell/day\n", s->value[RESERVE_C]);
tree_model_check_balance.c:		error_log("FRUIT_C              = %g tC/cell/day\n", s->value[FRUIT_C]);
tree_model_check_balance.c:		error_log("\nbalance            = %g tC/cell\n",     s->value[TREEC_BALANCE]);
tree_model_check_balance.c:		CHECK_CONDITION(fabs( s->value[TREEC_BALANCE] ), > , eps);
tree_model_check_balance.c:		s->value[TREEC_OLDSTORE] = s->value[TREEC_STORE];
tree_model_check_balance.c:	//printf("%f \n", s->value[N_LEAF_TO_LITR]);
tree_model_check_balance.c:	//printf("%d \n", s->counter[N_TREE]);
tree_model_check_balance.c:	in      = s->value[NPP_tN_DEMAND];
tree_model_check_balance.c:	out     =  s->value[N_LEAF_TO_LITR]     +
tree_model_check_balance.c:			s->value[N_FROOT_TO_LITR]       +
tree_model_check_balance.c:			s->value[N_STEM_TO_CWD]    +
tree_model_check_balance.c:			s->value[N_CROOT_TO_CWD]   +
tree_model_check_balance.c:			s->value[N_BRANCH_TO_CWD]  +
tree_model_check_balance.c:			s->value[N_RESERVE_TO_CWD] +
tree_model_check_balance.c:			s->value[N_FRUIT_TO_CWD]   ;
tree_model_check_balance.c:	store   = s->value[N_TO_LEAF] +
tree_model_check_balance.c:			s->value[N_TO_STEM]   +
tree_model_check_balance.c:			s->value[N_TO_FROOT]  +
tree_model_check_balance.c:			s->value[N_TO_CROOT]  +
tree_model_check_balance.c:			s->value[N_TO_BRANCH] +
tree_model_check_balance.c:			s->value[N_TO_RESERVE]+
tree_model_check_balance.c:			s->value[N_TO_FRUIT]  ;
tree_model_check_balance.c:		error_log("NPP_tN                = %f tN/cell/day\n", s->value[NPP_tN_DEMAND]);
tree_model_check_balance.c:		error_log("N_LEAF_TO_LITR        = %f tN/cell/day\n", s->value[N_LEAF_TO_LITR]);
tree_model_check_balance.c:		error_log("N_FROOT_TO_LITR       = %f tN/cell/day\n", s->value[N_FROOT_TO_LITR]);
tree_model_check_balance.c:		error_log("N_STEM_TO_CWD         = %f tN/cell/day\n", s->value[N_STEM_TO_CWD]);
tree_model_check_balance.c:		error_log("N_BRANCH_TO_CWD       = %f tN/cell/day\n", s->value[N_BRANCH_TO_CWD]);
tree_model_check_balance.c:		error_log("N_CROOT_TO_CWD        = %f tN/cell/day\n", s->value[N_CROOT_TO_CWD]);
tree_model_check_balance.c:		error_log("N_RESERVE_TO_CWD      = %f tN/cell/day\n", s->value[N_RESERVE_TO_CWD]);
tree_model_check_balance.c:		error_log("N_FRUIT_TO_CWD        = %f tN/cell/day\n", s->value[N_FRUIT_TO_CWD]);
tree_model_check_balance.c:		error_log("N_TO_LEAF             = %f tN/cell/day\n", s->value[N_TO_LEAF]);
tree_model_check_balance.c:		error_log("N_TO_FROOT            = %f tN/cell/day\n", s->value[N_TO_FROOT]);
tree_model_check_balance.c:		error_log("N_TO_STEM             = %f tN/cell/day\n", s->value[N_TO_STEM]);
tree_model_check_balance.c:		error_log("N_TO_CROOT            = %f tN/cell/day\n", s->value[N_TO_CROOT]);
tree_model_check_balance.c:		error_log("N_TO_BRANCH           = %f tN/cell/day\n", s->value[N_TO_BRANCH]);
tree_model_check_balance.c:		error_log("N_TO_RESERVE          = %f tN/cell/day\n", s->value[N_TO_RESERVE]);
tree_model_check_balance.c:		error_log("N_TO_FRUIT            = %f tN/cell/day\n", s->value[N_TO_FRUIT]);
tree_model_check_balance.c:	s->value[TREEN_IN]    = /*s->value[GPP_tN]*/0.;
tree_model_check_balance.c:	s->value[TREEN_OUT]   = s->value[N_LEAF_TO_LITR] +
tree_model_check_balance.c:			s->value[N_FROOT_TO_LITR]        +
tree_model_check_balance.c:			s->value[N_STEM_TO_CWD]     +
tree_model_check_balance.c:			s->value[N_CROOT_TO_CWD]    +
tree_model_check_balance.c:			s->value[N_BRANCH_TO_CWD]   +
tree_model_check_balance.c:			s->value[N_RESERVE_TO_CWD]  +
tree_model_check_balance.c:			s->value[N_FRUIT_TO_CWD]    ;
tree_model_check_balance.c:	s->value[TREEC_STORE] = s->value[LEAF_N] +
tree_model_check_balance.c:			s->value[FROOT_N]                +
tree_model_check_balance.c:			s->value[CROOT_N]                +
tree_model_check_balance.c:			s->value[STEM_N]                 +
tree_model_check_balance.c:			s->value[BRANCH_N]               +
tree_model_check_balance.c:			s->value[RESERVE_N]              +
tree_model_check_balance.c:			s->value[FRUIT_N]                ;
tree_model_check_balance.c:	s->value[TREEN_BALANCE] = s->value[TREEN_IN] - s->value[TREEN_OUT] - (s->value[TREEN_STORE] - s->value[TREEN_OLDSTORE]);
tree_model_check_balance.c:	if ( ( fabs( s->value[TREEN_BALANCE] ) > eps ) && ( s->counter[DOS] > 1 ) )
tree_model_check_balance.c:		error_log("TREE DOS              = %d\n",             s->counter[DOS]);
tree_model_check_balance.c:		error_log("\nin                  = %f tN/cell/day\n", s->value[TREEN_IN]);
tree_model_check_balance.c:		error_log("\nout                 = %f tN/cell/day\n", s->value[TREEN_OUT]);
tree_model_check_balance.c:		error_log("N_LEAF_TO_LITR        = %f tN/cell/day\n", s->value[N_LEAF_TO_LITR]);
tree_model_check_balance.c:		error_log("N_FROOT_TO_LITR       = %f tN/cell/day\n", s->value[N_FROOT_TO_LITR]);
tree_model_check_balance.c:		error_log("N_STEM_TO_CWD         = %f tN/cell/day\n", s->value[N_STEM_TO_CWD]);
tree_model_check_balance.c:		error_log("N_BRANCH_TO_CWD       = %f tN/cell/day\n", s->value[N_BRANCH_TO_CWD]);
tree_model_check_balance.c:		error_log("N_CROOT_TO_CWD        = %f tN/cell/day\n", s->value[N_CROOT_TO_CWD]);
tree_model_check_balance.c:		error_log("N_RESERVE_TO_CWD      = %f tN/cell/day\n", s->value[N_RESERVE_TO_CWD]);
tree_model_check_balance.c:		error_log("N_FRUIT_TO_CWD        = %f tN/cell/day\n", s->value[N_FRUIT_TO_CWD]);
tree_model_check_balance.c:		error_log("\nold_store           = %f tN/cell\n",     s->value[TREEN_OLDSTORE]);
tree_model_check_balance.c:		error_log("store                 = %f tN/cell\n",     s->value[TREEN_STORE]);
tree_model_check_balance.c:		error_log("store - old_store     = %f tN/cell\n",     s->value[TREEN_STORE] - s->value[TREEN_OLDSTORE]);
tree_model_check_balance.c:		error_log("LEAF_N                = %f tN/cell\n",     s->value[LEAF_N]);
tree_model_check_balance.c:		error_log("FROOT_N               = %f tN/cell\n",     s->value[FROOT_N]);
tree_model_check_balance.c:		error_log("CROOT_N               = %f tN/cell\n",     s->value[CROOT_N]);
tree_model_check_balance.c:		error_log("STEM_N                = %f tN/cell\n",     s->value[STEM_N]);
tree_model_check_balance.c:		error_log("BRANCH_N              = %f tN/cell\n",     s->value[BRANCH_N]);
tree_model_check_balance.c:		error_log("RESERVE_N             = %f tN/cell\n",     s->value[RESERVE_N]);
tree_model_check_balance.c:		error_log("FRUIT_N               = %f tN/cell\n",     s->value[FRUIT_N]);
tree_model_check_balance.c:		error_log("\nbalance             = %f tN/cell\n",     s->value[TREEN_BALANCE]);
tree_model_check_balance.c:		CHECK_CONDITION(fabs( s->value[TREEN_BALANCE] ), > , eps);
tree_model_check_balance.c:		s->value[TREEN_OLDSTORE] = s->value[TREEN_STORE];
tree_model_check_balance.c:	s->value[TREEW_IN]      = s->value[CANOPY_INT_RAIN] + s->value[CANOPY_INT_SNOW];
tree_model_check_balance.c:	s->value[TREEW_OUT]     = s->value[CANOPY_EVAPO];
tree_model_check_balance.c:	s->value[TREEW_STORE]   = s->value[CANOPY_WATER] + s->value[CANOPY_SNOW];
tree_model_check_balance.c:	s->value[TREEW_BALANCE] = s->value[TREEW_IN] - s->value[TREEW_OUT] - ( s->value[TREEW_STORE] - s->value[TREEW_OLDSTORE] );
tree_model_check_balance.c:	if ( ( fabs( s->value[TREEW_BALANCE] ) > eps ) && ( s->counter[DOS] > 1 ) )
tree_model_check_balance.c:		error_log("TREE DOS = %d\n",             s->counter[DOS]);
tree_model_check_balance.c:		error_log("canopy water in = %g\n",      s->value[TREEW_IN]);
tree_model_check_balance.c:		error_log("canopy water out = %g\n",     s->value[TREEW_OUT]);
tree_model_check_balance.c:		error_log("canopy water store = %g\n",   s->value[TREEW_STORE]);
tree_model_check_balance.c:		error_log("canopy water balance = %g\n", s->value[TREEW_BALANCE]);
tree_model_check_balance.c:		CHECK_CONDITION(fabs( s->value[TREEW_BALANCE] ), > , eps);
tree_model_check_balance.c:		s->value[TREEW_OLDSTORE] = s->value[TREEW_STORE];
turnover.c:		show a species-specific decrease in the proportion of sapwood from f sw = 1.0 in
turnover.c:	mat_sapwood_turnover_frac = s->value[SAPWOOD_TURNOVER]; 
turnover.c:	effective_sapwood_turnover = s->value[SAPWOOD_TURNOVER];
turnover.c:	s->value[DAILY_SAPWOOD_TURNOVER] = effective_sapwood_turnover / ( IS_LEAP_YEAR ( c->years[year].year ) ? 366 : 365 );
turnover.c:		//		if ( s->counter[YOS] == 1 )
turnover.c:		//			s->value[YEARLY_C_TO_STEM_SAPWOOD]   = s->value[STEM_SAPWOOD_C];
turnover.c:		//			s->value[YEARLY_C_TO_CROOT_SAPWOOD]  = s->value[CROOT_SAPWOOD_C];
turnover.c:		//			s->value[YEARLY_C_TO_BRANCH_SAPWOOD] = s->value[BRANCH_SAPWOOD_C];
turnover.c:		s->value[C_STEM_SAPWOOD_TO_HEARTWOOD]   = s->value[YEARLY_C_TO_STEM_SAPWOOD]   * s->value[DAILY_SAPWOOD_TURNOVER];
turnover.c:		s->value[C_CROOT_SAPWOOD_TO_HEARTWOOD]  = s->value[YEARLY_C_TO_CROOT_SAPWOOD]  * s->value[DAILY_SAPWOOD_TURNOVER];
turnover.c:		s->value[C_BRANCH_SAPWOOD_TO_HEARTWOOD] = s->value[YEARLY_C_TO_BRANCH_SAPWOOD] * s->value[DAILY_SAPWOOD_TURNOVER];
turnover.c:		s->value[YEARLY_C_TO_STEM_SAPWOOD]   = 0.;
turnover.c:		s->value[YEARLY_C_TO_CROOT_SAPWOOD]  = 0.;
turnover.c:		s->value[YEARLY_C_TO_BRANCH_SAPWOOD] = 0.;
turnover.c:		s->value[C_STEM_SAPWOOD_TO_HEARTWOOD]   = s->value[STEM_SAPWOOD_C]   * s->value[DAILY_SAPWOOD_TURNOVER];
turnover.c:		s->value[C_CROOT_SAPWOOD_TO_HEARTWOOD]  = s->value[CROOT_SAPWOOD_C]  * s->value[DAILY_SAPWOOD_TURNOVER];
turnover.c:		s->value[C_BRANCH_SAPWOOD_TO_HEARTWOOD] = s->value[BRANCH_SAPWOOD_C] * s->value[DAILY_SAPWOOD_TURNOVER];
turnover.c:		s->value[YEARLY_C_TO_STEM_SAPWOOD]   = 0.;
turnover.c:		s->value[YEARLY_C_TO_CROOT_SAPWOOD]  = 0.;
turnover.c:		s->value[YEARLY_C_TO_BRANCH_SAPWOOD] = 0.;
turnover.c:	s->value[STEM_SAPWOOD_C]     -= s->value[C_STEM_SAPWOOD_TO_HEARTWOOD];
turnover.c:	s->value[STEM_HEARTWOOD_C]   += s->value[C_STEM_SAPWOOD_TO_HEARTWOOD];
turnover.c:	s->value[CROOT_SAPWOOD_C]    -= s->value[C_CROOT_SAPWOOD_TO_HEARTWOOD];
turnover.c:	s->value[CROOT_HEARTWOOD_C]  += s->value[C_CROOT_SAPWOOD_TO_HEARTWOOD];
turnover.c:	s->value[BRANCH_SAPWOOD_C]   -= s->value[C_BRANCH_SAPWOOD_TO_HEARTWOOD];
turnover.c:	s->value[BRANCH_HEARTWOOD_C] += s->value[C_BRANCH_SAPWOOD_TO_HEARTWOOD];
turnover.c:	s->value[TOT_SAPWOOD_C]       = s->value[STEM_SAPWOOD_C]   + s->value[CROOT_SAPWOOD_C]   + s->value[BRANCH_SAPWOOD_C];
turnover.c:	s->value[TOT_HEARTWOOD_C]     = s->value[STEM_HEARTWOOD_C] + s->value[CROOT_HEARTWOOD_C] + s->value[BRANCH_HEARTWOOD_C];
turnover.c:	mat_livewood_turnover_frac = s->value[LIVEWOOD_TURNOVER]; //fixme it should be moved to species.txt
turnover.c:	effective_livewood_turnover = s->value[LIVEWOOD_TURNOVER];
turnover.c:	s->value[DAILY_LIVEWOOD_TURNOVER] = effective_livewood_turnover / ( IS_LEAP_YEAR ( c->years[year].year ) ? 366 : 365 );
turnover.c:		//		if ( s->counter[YOS] == 1 )
turnover.c:		//			s->value[YEARLY_C_TO_STEM_SAPWOOD]   = s->value[STEM_LIVEWOOD_C];
turnover.c:		//			s->value[YEARLY_C_TO_CROOT_SAPWOOD]  = s->value[CROOT_LIVEWOOD_C];
turnover.c:		//			s->value[YEARLY_C_TO_BRANCH_SAPWOOD] = s->value[BRANCH_LIVEWOOD_C];
turnover.c:		s->value[C_STEM_LIVEWOOD_TO_DEADWOOD]   = s->value[YEARLY_C_TO_STEM_LIVEWOOD]   * s->value[DAILY_LIVEWOOD_TURNOVER];
turnover.c:		s->value[C_CROOT_LIVEWOOD_TO_DEADWOOD]  = s->value[YEARLY_C_TO_CROOT_LIVEWOOD]  * s->value[DAILY_LIVEWOOD_TURNOVER];
turnover.c:		s->value[C_BRANCH_LIVEWOOD_TO_DEADWOOD] = s->value[YEARLY_C_TO_BRANCH_LIVEWOOD] * s->value[DAILY_LIVEWOOD_TURNOVER];
turnover.c:             // printf("C_STEM_LIVEWOOD_TO_DEADWOOD %f\n",s->value[C_STEM_LIVEWOOD_TO_DEADWOOD] );
turnover.c:		s->value[YEARLY_C_TO_STEM_LIVEWOOD]   = 0.;
turnover.c:		s->value[YEARLY_C_TO_CROOT_LIVEWOOD]  = 0.;
turnover.c:		s->value[YEARLY_C_TO_BRANCH_LIVEWOOD] = 0.;
turnover.c:                s->value[C_STEM_LIVEWOOD_TO_DEADWOOD]   = s->value[STEM_LIVEWOOD_C]   * s->value[DAILY_LIVEWOOD_TURNOVER];
turnover.c:		s->value[C_CROOT_LIVEWOOD_TO_DEADWOOD]  = s->value[CROOT_LIVEWOOD_C] * s->value[DAILY_LIVEWOOD_TURNOVER];
turnover.c:		s->value[C_BRANCH_LIVEWOOD_TO_DEADWOOD] = s->value[BRANCH_LIVEWOOD_C] * s->value[DAILY_LIVEWOOD_TURNOVER];
turnover.c:		s->value[YEARLY_C_TO_STEM_LIVEWOOD]   = 0.;
turnover.c:		s->value[YEARLY_C_TO_CROOT_LIVEWOOD]  = 0.;
turnover.c:		s->value[YEARLY_C_TO_BRANCH_LIVEWOOD] = 0.;
turnover.c:	s->value[STEM_LIVEWOOD_C]   -= s->value[C_STEM_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[STEM_DEADWOOD_C]   += s->value[C_STEM_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[CROOT_LIVEWOOD_C]  -= s->value[C_CROOT_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[CROOT_DEADWOOD_C]  += s->value[C_CROOT_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[BRANCH_LIVEWOOD_C] -= s->value[C_BRANCH_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[BRANCH_DEADWOOD_C] += s->value[C_BRANCH_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[TOT_LIVEWOOD_C] = s->value[STEM_LIVEWOOD_C] + s->value[CROOT_LIVEWOOD_C] + s->value[BRANCH_LIVEWOOD_C];
turnover.c:	s->value[TOT_DEADWOOD_C] = s->value[STEM_DEADWOOD_C] + s->value[CROOT_DEADWOOD_C] + s->value[BRANCH_DEADWOOD_C];
turnover.c:	mat_livewood_turnover_frac = s->value[LIVEWOOD_TURNOVER]; //fixme it should be moved to species.txt
turnover.c:	effective_livewood_turnover = s->value[LIVEWOOD_TURNOVER];
turnover.c:	s->value[DAILY_LIVEWOOD_TURNOVER] = effective_livewood_turnover / ( IS_LEAP_YEAR ( c->years[year].year ) ? 366 : 365 );
turnover.c:	if ( ! day &&  ! month && s->counter[YOS] > 1 )
turnover.c:		s->value[C_STEM_LIVEWOOD_TO_DEADWOOD]   = s->value[YEARLY_C_TO_STEM]   * s->value[DAILY_LIVEWOOD_TURNOVER];
turnover.c:		s->value[C_CROOT_LIVEWOOD_TO_DEADWOOD]  = s->value[YEARLY_C_TO_CROOT]  * s->value[DAILY_LIVEWOOD_TURNOVER];
turnover.c:		s->value[C_BRANCH_LIVEWOOD_TO_DEADWOOD] = s->value[YEARLY_C_TO_BRANCH] * s->value[DAILY_LIVEWOOD_TURNOVER];
turnover.c:		s->value[YEARLY_C_TO_STEM]   = 0.;
turnover.c:		s->value[YEARLY_C_TO_CROOT]  = 0.;
turnover.c:		s->value[YEARLY_C_TO_BRANCH] = 0.;
turnover.c:	CHECK_CONDITION (s->value[C_STEM_LIVEWOOD_TO_DEADWOOD],   <, 0.);
turnover.c:	CHECK_CONDITION (s->value[C_CROOT_LIVEWOOD_TO_DEADWOOD],  <, 0.);
turnover.c:	CHECK_CONDITION (s->value[C_BRANCH_LIVEWOOD_TO_DEADWOOD], <, 0.);
turnover.c:	CHECK_CONDITION (s->value[C_STEM_LIVEWOOD_TO_DEADWOOD],   >, s->value[STEM_SAPWOOD_C]);
turnover.c:	CHECK_CONDITION (s->value[C_CROOT_LIVEWOOD_TO_DEADWOOD],  >, s->value[CROOT_SAPWOOD_C]);
turnover.c:	CHECK_CONDITION (s->value[C_BRANCH_LIVEWOOD_TO_DEADWOOD], >, s->value[BRANCH_SAPWOOD_C]);
turnover.c:	s->value[STEM_SAPWOOD_C]   -= s->value[C_STEM_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[STEM_HEARTWOOD_C] += s->value[C_STEM_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[CROOT_SAPWOOD_C]   -= s->value[C_CROOT_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[CROOT_HEARTWOOD_C] += s->value[C_CROOT_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[BRANCH_SAPWOOD_C]   -= s->value[C_BRANCH_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[BRANCH_HEARTWOOD_C] += s->value[C_BRANCH_LIVEWOOD_TO_DEADWOOD];
turnover.c:	s->value[TOT_SAPWOOD_C]       = s->value[STEM_SAPWOOD_C]   + s->value[CROOT_SAPWOOD_C]   + s->value[BRANCH_SAPWOOD_C];
turnover.c:	s->value[TOT_HEARTWOOD_C]     = s->value[STEM_HEARTWOOD_C] + s->value[CROOT_HEARTWOOD_C] + s->value[BRANCH_HEARTWOOD_C];
utility.c:					//s->counter[DEAD_TREE] =                0;
utility.c:					s->counter[THINNING_HAPPENS] =         0;
utility.c:					s->counter[HARVESTING_HAPPENS] =       0;
utility.c:					s->value[DAILY_CANOPY_COVER_PROJ] =   0.;
utility.c:					s->value[DAILY_CANOPY_COVER_EXP] =    0.;
utility.c:					s->value[PAR] =                       0.;
utility.c:					s->value[APAR] =                      0.;
utility.c:					s->value[APAR_SUN] =                  0.;
utility.c:					s->value[APAR_SHADE] =                0.;
utility.c:					s->value[TRANSM_PAR] =                0.;
utility.c:					s->value[TRANSM_PAR_SUN] =            0.;
utility.c:					s->value[TRANSM_PAR_SHADE] =          0.;
utility.c:					s->value[fAPAR] =                     0.;
utility.c:					s->value[SW_RAD] =                    0.;
utility.c:					s->value[SW_RAD_ABS] =                0.;
utility.c:					s->value[SW_RAD_ABS_SUN] =            0.;
utility.c:					s->value[SW_RAD_ABS_SHADE] =          0.;
utility.c:					s->value[SW_RAD_TRANSM] =             0.;
utility.c:					s->value[SW_RAD_TRANSM_SUN] =         0.;
utility.c:					s->value[SW_RAD_TRANSM_SHADE] =       0.;
utility.c:					s->value[GPP] =                       0.;
utility.c:					s->value[NPP] =                       0.;
utility.c:					s->value[BP] =                        0.;
utility.c:					s->value[NPP_tC] =                    0.;
utility.c:					s->value[C_FLUX] =                    0.;
utility.c:					s->value[CUE] =                       0.;
utility.c:					s->value[BPE] =                       0.;
utility.c:					s->value[ASSIMILATION] =              0.;
utility.c:					s->value[ASSIMILATION_SUN] =          0.;
utility.c:					s->value[ASSIMILATION_SHADE] =        0.;
utility.c:					s->value[A_SUN] =                     0.;
utility.c:					s->value[Av_SUN] =                    0.;
utility.c:					s->value[Aj_SUN] =                    0.;
utility.c:					s->value[A_SHADE] =                   0.;
utility.c:					s->value[Av_SHADE] =                  0.;
utility.c:					s->value[Aj_SHADE] =                  0.;
utility.c:					s->value[A_TOT] =                     0.;
utility.c:					s->value[Av_TOT] =                    0.;
utility.c:					s->value[Aj_TOT] =                    0.;
utility.c:					s->value[STOMATAL_CONDUCTANCE] =      0.;
utility.c:					s->value[STOMATAL_SUN_CONDUCTANCE] =  0.;
utility.c:					s->value[STOMATAL_SHADE_CONDUCTANCE]= 0.;
utility.c:					s->value[LEAF_CONDUCTANCE] =          0.;
utility.c:					s->value[LEAF_SUN_CONDUCTANCE] =      0.;
utility.c:					s->value[LEAF_SHADE_CONDUCTANCE] =    0.;
utility.c:					s->value[CANOPY_INT_RAIN] =           0.;
utility.c:					s->value[CANOPY_INT_SNOW] =           0.;
utility.c:					s->value[CANOPY_EVAPO] =              0.;
utility.c:					s->value[CANOPY_TRANSP] =             0.;
utility.c:					s->value[CANOPY_TRANSP_SUN] =         0.;
utility.c:					s->value[CANOPY_TRANSP_SHADE] =       0.;
utility.c:					s->value[CANOPY_EVAPO_TRANSP] =       0.;
utility.c:					s->value[WUE] =                       0.;
utility.c:					s->value[iWUE] =                      0.;
utility.c:					s->value[iWUE_SUN] =                  0.;
utility.c:					s->value[iWUE_SHADE] =                0.;
utility.c:					s->value[F_CO2_VER] =                 0.;
utility.c:					s->value[F_CO2_WANG] =                0.;
utility.c:					s->value[F_LIGHT] =                   0.;
utility.c:					s->value[F_T] =                       0.;
utility.c:					s->value[F_VPD] =                     0.;
utility.c:					s->value[F_AGE] =                     0.;
utility.c:					s->value[F_NUTR] =                    0.;
utility.c:					s->value[F_SW] =                      0.;
utility.c:					s->value[F_PSI] =                     0.;
utility.c:					s->value[PHYS_MOD] =                  0.;
utility.c:					s->value[C_TO_LEAF] =                 0.;
utility.c:					s->value[C_TO_FROOT] =                0.;
utility.c:					s->value[C_TO_CROOT] =                0.;
utility.c:					s->value[C_TO_STEM] =                 0.;
utility.c:					s->value[C_TO_BRANCH] =               0.;
utility.c:					s->value[C_TO_RESERVE] =              0.;
utility.c:					s->value[C_TO_FRUIT] =                0.;
utility.c:					s->value[C_TO_LITR] =                 0.;
utility.c:					s->value[C_TO_CWD] =                  0.;
utility.c:					s->value[C_LEAF_TO_RESERVE] =         0.;
utility.c:					s->value[C_FROOT_TO_RESERVE] =        0.;
utility.c:					s->value[C_BRANCH_TO_RESERVE] =       0.;
utility.c:					s->value[C_CROOT_TO_RESERVE] =        0.;
utility.c:					s->value[C_LEAF_TO_LITR] =            0.;
utility.c:					s->value[C_FROOT_TO_LITR] =           0.;
utility.c:					s->value[C_STEM_TO_CWD] =             0.;
utility.c:					s->value[C_CROOT_TO_CWD] =            0.;
utility.c:					s->value[C_BRANCH_TO_CWD] =           0.;
utility.c:					s->value[C_RESERVE_TO_CWD] =          0.;
utility.c:					s->value[C_FRUIT_TO_CWD] =            0.;
utility.c:					s->value[C_STEM_SAPWOOD_TO_CWD] =     0.;
utility.c:					s->value[C_CROOT_SAPWOOD_TO_CWD] =    0.;
utility.c:					s->value[C_BRANCH_SAPWOOD_TO_CWD] =   0.;
utility.c:					s->value[C_STEM_LIVEWOOD_TO_CWD] =    0.;
utility.c:					s->value[C_CROOT_LIVEWOOD_TO_CWD] =   0.;
utility.c:					s->value[C_BRANCH_LIVEWOOD_TO_CWD] =  0.;
utility.c:					s->value[C_STEM_HEARTWOOD_TO_CWD] =   0.;
utility.c:					s->value[C_CROOT_HEARTWOOD_TO_CWD] =  0.;
utility.c:					s->value[C_BRANCH_HEARTWOOD_TO_CWD] = 0.;
utility.c:					s->value[C_STEM_DEADWOOD_TO_CWD] =    0.;
utility.c:					s->value[C_CROOT_DEADWOOD_TO_CWD] =   0.;
utility.c:					s->value[C_BRANCH_DEADWOOD_TO_CWD] =  0.;
utility.c:					s->value[LEAF_TO_LITRC] =             0.;
utility.c:					s->value[LEAF_TO_LITR1C] =            0.;
utility.c:					s->value[LEAF_TO_LITR2C] =            0.;
utility.c:					s->value[LEAF_TO_LITR3C] =            0.;
utility.c:					s->value[LEAF_TO_LITR4C] =            0.;
utility.c:					s->value[FROOT_TO_LITRC] =            0.;
utility.c:					s->value[FROOT_TO_LITR1C] =           0.;
utility.c:					s->value[FROOT_TO_LITR2C] =           0.;
utility.c:					s->value[FROOT_TO_LITR3C] =           0.;
utility.c:					s->value[FROOT_TO_LITR4C] =           0.;
utility.c:					s->value[CWD_TO_LITRC] =              0.;
utility.c:					s->value[CWD_TO_LITR2C] =             0.;
utility.c:					s->value[CWD_TO_LITR3C] =             0.;
utility.c:					s->value[CWD_TO_LITR4C] =             0.;
utility.c:					s->value[NPP_gN_DEMAND] =             0.;
utility.c:					s->value[NPP_tN_DEMAND] =             0.;
utility.c:					s->value[N_TO_LEAF] =                 0.;
utility.c:					s->value[N_TO_ROOT] =                 0.;
utility.c:					s->value[N_TO_FROOT] =                0.;
utility.c:					s->value[N_TO_CROOT] =                0.;
utility.c:					s->value[N_TO_TOT_STEM] =             0.;
utility.c:					s->value[N_TO_STEM] =                 0.;
utility.c:					s->value[N_TO_BRANCH] =               0.;
utility.c:					s->value[N_TO_RESERVE] =              0.;
utility.c:					s->value[N_TO_FRUIT] =                0.;
utility.c:					s->value[N_TO_LITTER] =               0.;
utility.c:					s->value[N_TO_LITR] =                 0.;
utility.c:					s->value[N_TO_CWD] =                  0.;
utility.c:					s->value[N_LEAF_TO_RESERVE] =         0.;
utility.c:					s->value[N_FROOT_TO_RESERVE] =        0.;
utility.c:					s->value[N_CROOT_TO_RESERVE] =        0.;
utility.c:					s->value[N_BRANCH_TO_RESERVE] =       0.;
utility.c:					s->value[N_LEAF_TO_LITR] =            0.;
utility.c:					s->value[N_FROOT_TO_LITR] =           0.;
utility.c:					s->value[N_STEM_TO_CWD] =             0.;
utility.c:					s->value[N_CROOT_TO_CWD] =            0.;
utility.c:					s->value[N_BRANCH_TO_CWD] =           0.;
utility.c:					s->value[N_RESERVE_TO_CWD] =          0.;
utility.c:					s->value[N_FRUIT_TO_CWD] =            0.;
utility.c:					s->value[LEAF_TO_LITRN] =             0.;
utility.c:					s->value[LEAF_TO_LITR1N] =            0.;
utility.c:					s->value[LEAF_TO_LITR2N] =            0.;
utility.c:					s->value[LEAF_TO_LITR3N] =            0.;
utility.c:					s->value[LEAF_TO_LITR4N] =            0.;
utility.c:					s->value[FROOT_TO_LITRN] =            0.;
utility.c:					s->value[FROOT_TO_LITR1N] =           0.;
utility.c:					s->value[FROOT_TO_LITR2N] =           0.;
utility.c:					s->value[FROOT_TO_LITR3N] =           0.;
utility.c:					s->value[FROOT_TO_LITR4N] =           0.;
utility.c:					s->value[CWD_TO_LITRN] =              0.;
utility.c:					s->value[CWD_TO_LITR2N] =             0.;
utility.c:					s->value[CWD_TO_LITR3N] =             0.;
utility.c:					s->value[CWD_TO_LITR4N] =             0.;
utility.c:					s->value[DAILY_LEAF_MAINT_RESP] =     0.;
utility.c:					s->value[NIGHTLY_LEAF_MAINT_RESP] =   0.;
utility.c:					s->value[TOT_LEAF_MAINT_RESP] =       0.;
utility.c:					s->value[DAILY_LEAF_SUN_MAINT_RESP] = 0.;
utility.c:					s->value[DAILY_LEAF_SHADE_MAINT_RESP] = 0.;
utility.c:					s->value[FROOT_MAINT_RESP] =          0.;
utility.c:					s->value[STEM_MAINT_RESP] =           0.;
utility.c:					s->value[BRANCH_MAINT_RESP] =         0.;
utility.c:					s->value[CROOT_MAINT_RESP] =          0.;
utility.c:					s->value[TOTAL_MAINT_RESP] =          0.;
utility.c:					s->value[LEAF_GROWTH_RESP] =          0.;
utility.c:					s->value[FROOT_GROWTH_RESP] =         0.;
utility.c:					s->value[CROOT_GROWTH_RESP] =         0.;
utility.c:					s->value[STEM_GROWTH_RESP] =          0.;
utility.c:					s->value[BRANCH_GROWTH_RESP] =        0.;
utility.c:					s->value[TOTAL_GROWTH_RESP] =         0.;
utility.c:					s->value[LEAF_AUT_RESP] =             0.;
utility.c:					s->value[FROOT_AUT_RESP] =            0.;
utility.c:					s->value[STEM_AUT_RESP] =             0.;
utility.c:					s->value[BRANCH_AUT_RESP] =           0.;
utility.c:					s->value[CROOT_AUT_RESP] =            0.;
utility.c:					s->value[TOTAL_AUT_RESP] =            0.;
utility.c:					s->value[MONTHLY_GPP] =                  0.;
utility.c:					s->value[MONTHLY_TOTAL_AUT_RESP] =       0.;
utility.c:					s->value[MONTHLY_NPP] =                  0.;
utility.c:					s->value[MONTHLY_BP] =                   0.;
utility.c:					s->value[MONTHLY_CUE] =                  0.;
utility.c:					s->value[MONTHLY_BPE] =                  0.;
utility.c:					s->value[MONTHLY_WUE] =                  0.;
utility.c:					s->value[MONTHLY_iWUE] =                 0.;
utility.c:					s->value[MONTHLY_iWUE_SUN] =             0.;
utility.c:					s->value[MONTHLY_iWUE_SHADE] =           0.;
utility.c:					s->value[MONTHLY_CANOPY_LATENT_HEAT] =   0.;
utility.c:					s->value[MONTHLY_TOTAL_MAINT_RESP] =     0.;
utility.c:					s->value[MONTHLY_TOTAL_GROWTH_RESP] =    0.;
utility.c:					s->value[MONTHLY_LEAF_AUT_RESP] =        0.;
utility.c:					s->value[MONTHLY_FROOT_AUT_RESP] =       0.;
utility.c:					s->value[MONTHLY_STEM_AUT_RESP] =        0.;
utility.c:					s->value[MONTHLY_CROOT_AUT_RESP] =       0.;
utility.c:					s->value[MONTHLY_BRANCH_AUT_RESP] =      0.;
utility.c:					s->value[MONTHLY_TOTAL_AUT_RESP] =       0.;
utility.c:					s->value[MONTHLY_CANOPY_TRANSP] =        0.;
utility.c:					s->value[MONTHLY_CANOPY_TRANSP_SUN] =    0.;
utility.c:					s->value[MONTHLY_CANOPY_TRANSP_SHADE] =  0.;
utility.c:					s->value[MONTHLY_CANOPY_INT] =           0.;
utility.c:					s->value[MONTHLY_CANOPY_EVAPO_TRANSP] =  0.;
utility.c:					s->value[MONTHLY_CANOPY_LATENT_HEAT] =   0.;
utility.c:					s->value[MONTHLY_ASSIMILATION]  =        0.;
utility.c:					s->value[MONTHLY_ASSIMILATION_SUN] =     0.;
utility.c:					s->value[MONTHLY_ASSIMILATION_SHADE] =   0.;
utility.c:					s->value[MONTHLY_LAI_PROJ]           =   0.;  //5p6
utility.c:					s->value[C_HWP] =                       0.;
utility.c:					s->value[VOLUME_HWP] =                  0.;
utility.c:					s->value[PEAK_LAI_PROJ] =               0.;
utility.c:					s->value[MAX_LAI_PROJ] =                0.;
utility.c:					s->value[PEAK_LAI_EXP] =                0.;
utility.c:					s->value[MAX_LAI_EXP] =                 0.;
utility.c:					s->value[MAX_LEAF_C] =                  0.;
utility.c:					s->value[MAX_FROOT_C] =                 0.;
utility.c:					s->value[MAX_FRUIT_C] =                 0.;
utility.c:					s->value[N_SEED] =                      0.; //SAPONARO
utility.c:					//s->value[SEEDLINGS] =                   0.; //SAPONARO
utility.c:					s->value[MAX_LAI_LEAFFALL_PROJ] =       0.;
utility.c:					//s->value[CANOPY_COVER_EXP] =            0.;
utility.c:					s->value[CROWN_AREA] =                  0.;
utility.c:					s->value[CROWN_VOLUME] =                0.;
utility.c:					s->value[LEAF_C_TO_REMOVE] =            0.;
utility.c:					s->value[FROOT_C_TO_REMOVE] =           0.;
utility.c:					s->value[FRUIT_C_TO_REMOVE] =           0.;
utility.c:					s->value[CROOT_C_TO_REMOVE] =           0.;
utility.c:					s->value[BRANCH_C_TO_REMOVE] =          0.;
utility.c:					s->value[LEAF_N_TO_REMOVE] =            0.;
utility.c:					s->value[FROOT_N_TO_REMOVE] =           0.;
utility.c:					s->value[FRUIT_N_TO_REMOVE] =           0.;
utility.c:					s->value[CROOT_N_TO_REMOVE] =           0.;
utility.c:					s->value[BRANCH_N_TO_REMOVE] =          0.;
utility.c:					s->value[YEARLY_A_SUN] =                0.;
utility.c:					s->value[YEARLY_Av_SUN] =               0.;
utility.c:					s->value[YEARLY_Aj_SUN] =               0.;
utility.c:					s->value[YEARLY_A_SHADE] =              0.;
utility.c:					s->value[YEARLY_Av_SHADE] =             0.;
utility.c:					s->value[YEARLY_Aj_SHADE] =             0.;
utility.c:					s->value[YEARLY_A_TOT] =                0.;
utility.c:					s->value[YEARLY_Av_TOT] =               0.;
utility.c:					s->value[YEARLY_Aj_TOT] =               0.;
utility.c:					s->counter[LEAF_FALL_COUNTER] =         0;
utility.c:					s->counter[VEG_DAYS] =                  0;
utility.c:					s->counter[YEARLY_VEG_DAYS] =           0;
utility.c:					s->counter[FIRST_VEG_DAYS] =            0;
utility.c:					s->value[YEARLY_GPP] =                  0.;
utility.c:					s->value[YEARLY_GPP_SUN] =              0.;
utility.c:					s->value[YEARLY_GPP_SHADE] =            0.;
utility.c:					s->value[YEARLY_NPP] =                  0.;
utility.c:					s->value[YEARLY_NPP_tC] =               0.;
utility.c:					s->value[YEARLY_BP] =                   0.;
utility.c:					s->value[YEARLY_CUE] =                  0.;
utility.c:					s->value[YEARLY_BPE] =                  0.;
utility.c:					s->value[YEARLY_WUE] =                  0.;
utility.c:					s->value[YEARLY_iWUE] =                 0.;
utility.c:					s->value[YEARLY_iWUE_SUN] =             0.;
utility.c:					s->value[YEARLY_iWUE_SHADE] =           0.;
utility.c:					s->value[YEARLY_APAR] =                 0.;
utility.c:					s->value[YEARLY_TOTAL_MAINT_RESP] =     0.;
utility.c:					s->value[YEARLY_TOTAL_GROWTH_RESP] =    0.;
utility.c:					s->value[YEARLY_LEAF_AUT_RESP] =        0.;
utility.c:					s->value[YEARLY_FROOT_AUT_RESP] =       0.;
utility.c:					s->value[YEARLY_STEM_AUT_RESP] =        0.;
utility.c:					s->value[YEARLY_CROOT_AUT_RESP] =       0.;
utility.c:					s->value[YEARLY_BRANCH_AUT_RESP] =      0.;
utility.c:					s->value[YEARLY_TOTAL_AUT_RESP] =       0.;
utility.c:					s->value[YEARLY_C_TO_WOOD] =            0.;
utility.c:					s->value[YEARLY_N_TO_WOOD] =            0.;
utility.c:					s->value[YEARLY_CANOPY_TRANSP] =        0.;
utility.c:					s->value[YEARLY_CANOPY_TRANSP_SUN] =    0.;
utility.c:					s->value[YEARLY_CANOPY_TRANSP_SHADE] =  0.;
utility.c:					s->value[YEARLY_CANOPY_INT] =           0.;
utility.c:					s->value[YEARLY_CANOPY_EVAPO_TRANSP] =  0.;
utility.c:					s->value[YEARLY_CANOPY_LATENT_HEAT] =   0.;
utility.c:					//s->counter[N_TREE_SAP] =                0;
utility.c:					s->value[YEARLY_RESERVE_ALLOC] =        0.;
utility.c:					s->value[YEARLY_RESERVE_DEPLE] =        0.;
utility.c:					s->value[YEARLY_RESERVE_USAGE] =        0.;
utility.c:					s->value[MAX_RESERVE_C_CONC]   =        0.;
utility.c:					s->value[MIN_RESERVE_C_CONC]   =        0.;
utility.c:					s->value[MAX_ANN_RESERVE_C]    =        0.; //5p6 annual maximum value of reserve total
utility.c:					s->value[MIN_RESERVE_C]        =        0.; //5p6 for each year the minimum reserve pool to be guaranteed
utility.c:                                       s->value[MIN_ANN_RESERVE_C]    =        0.; //5p6 annual minimum value of reserve total
utility.c:                                       s->value[TREE_MAX_ANN_RESERVE_C]    =   0.; //5p6 annual maximum value of reserve/ tree
utility.c:                                       s->value[TREE_MIN_ANN_RESERVE_C]    =   0.; //5p6 annual minimum value of reserve /tree
utility.c:					s->value[YEARLY_ASSIMILATION] =         0.;
utility.c:					s->value[YEARLY_ASSIMILATION_SUN] =     0.;
utility.c:					s->value[YEARLY_ASSIMILATION_SHADE] =   0.;
wue.c:	if( s->value[NPP] > 0. && s->value[CANOPY_TRANSP] > 0. )
wue.c:		s->value[WUE] = s->value[NPP] / s->value[CANOPY_TRANSP];
wue.c:		s->value[WUE] = 0.;
wue.c:		if( s->value[MONTHLY_NPP] > 0. && s->value[MONTHLY_CANOPY_TRANSP] > 0. )
wue.c:			s->value[MONTHLY_WUE] = s->value[MONTHLY_NPP] / s->value[MONTHLY_CANOPY_TRANSP];
wue.c:			s->value[MONTHLY_WUE] = 0.;
wue.c:		if( s->value[YEARLY_NPP] > 0. && s->value[YEARLY_CANOPY_TRANSP] > 0. )
wue.c:			s->value[YEARLY_WUE] = s->value[YEARLY_NPP] / s->value[YEARLY_CANOPY_TRANSP];
wue.c:			s->value[YEARLY_WUE] = 0.;
wue.c:	if( s->value[GPP] > 0. && s->value[CANOPY_TRANSP] > 0. )
wue.c:		s->value[iWUE]       = s->value[GPP]       / s->value[CANOPY_TRANSP];
wue.c:		s->value[iWUE_SUN]   = s->value[GPP_SUN]   / s->value[CANOPY_TRANSP_SUN];
wue.c:		s->value[iWUE_SHADE] = s->value[GPP_SHADE] / s->value[CANOPY_TRANSP_SHADE];
wue.c:		s->value[iWUE]       = 0.;
wue.c:		s->value[iWUE_SUN]   = 0.;
wue.c:		s->value[iWUE_SHADE] = 0.;
wue.c:		if( s->value[MONTHLY_GPP] > 0. && s->value[MONTHLY_CANOPY_TRANSP] > 0. )
wue.c:			s->value[MONTHLY_iWUE]       = s->value[MONTHLY_GPP]       / s->value[MONTHLY_CANOPY_TRANSP];
wue.c:			s->value[MONTHLY_iWUE_SUN]   = s->value[MONTHLY_GPP_SUN]   / s->value[MONTHLY_CANOPY_TRANSP_SUN];
wue.c:			s->value[MONTHLY_iWUE_SHADE] = s->value[MONTHLY_GPP_SHADE] / s->value[MONTHLY_CANOPY_TRANSP_SHADE];
wue.c:			s->value[MONTHLY_iWUE]       = 0.;
wue.c:			s->value[MONTHLY_iWUE_SUN]   = 0.;
wue.c:			s->value[MONTHLY_iWUE_SHADE] = 0.;
wue.c:		if( s->value[YEARLY_GPP] > 0. && s->value[YEARLY_CANOPY_TRANSP] > 0. )
wue.c:			s->value[YEARLY_iWUE]       = s->value[YEARLY_GPP]       / s->value[YEARLY_CANOPY_TRANSP];
wue.c:			s->value[YEARLY_iWUE_SUN]   = s->value[YEARLY_GPP_SUN]   / s->value[YEARLY_CANOPY_TRANSP_SUN];
wue.c:			s->value[YEARLY_iWUE_SHADE] = s->value[YEARLY_GPP_SHADE] / s->value[YEARLY_CANOPY_TRANSP_SHADE];
wue.c:			s->value[YEARLY_iWUE]       = 0.;
wue.c:			s->value[YEARLY_iWUE_SUN]   = 0.;
wue.c:			s->value[YEARLY_iWUE_SHADE] = 0.;
wue.c:	if( s->value[GPP] > 0. && s->value[STOMATAL_CONDUCTANCE] > 0. )
wue.c:		s->value[gsWUE]       = s->value[GPP]       / s->value[STOMATAL_CONDUCTANCE];
wue.c:		s->value[gsWUE_SUN]   = s->value[GPP_SUN]   / s->value[STOMATAL_SUN_CONDUCTANCE];
wue.c:		s->value[gsWUE_SHADE] = s->value[GPP_SHADE] / s->value[STOMATAL_SHADE_CONDUCTANCE];
wue.c:		s->value[gsWUE]       = 0.;
wue.c:		s->value[gsWUE_SUN]   = 0.;
wue.c:		s->value[gsWUE_SHADE] = 0.;
